/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/dompurify/dist/purify.js
var require_purify = __commonJS({
  "node_modules/dompurify/dist/purify.js"(exports, module2) {
    (function(global, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = global || self, global.DOMPurify = factory());
    })(exports, function() {
      "use strict";
      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }
          return arr2;
        } else {
          return Array.from(arr);
        }
      }
      var hasOwnProperty = Object.hasOwnProperty, setPrototypeOf = Object.setPrototypeOf, isFrozen = Object.isFrozen, getPrototypeOf = Object.getPrototypeOf, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var freeze = Object.freeze, seal = Object.seal, create = Object.create;
      var _ref = typeof Reflect !== "undefined" && Reflect, apply = _ref.apply, construct = _ref.construct;
      if (!apply) {
        apply = function apply2(fun, thisValue, args) {
          return fun.apply(thisValue, args);
        };
      }
      if (!freeze) {
        freeze = function freeze2(x) {
          return x;
        };
      }
      if (!seal) {
        seal = function seal2(x) {
          return x;
        };
      }
      if (!construct) {
        construct = function construct2(Func, args) {
          return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();
        };
      }
      var arrayForEach = unapply(Array.prototype.forEach);
      var arrayPop = unapply(Array.prototype.pop);
      var arrayPush = unapply(Array.prototype.push);
      var stringToLowerCase = unapply(String.prototype.toLowerCase);
      var stringMatch = unapply(String.prototype.match);
      var stringReplace = unapply(String.prototype.replace);
      var stringIndexOf = unapply(String.prototype.indexOf);
      var stringTrim = unapply(String.prototype.trim);
      var regExpTest = unapply(RegExp.prototype.test);
      var typeErrorCreate = unconstruct(TypeError);
      function unapply(func) {
        return function(thisArg) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          return apply(func, thisArg, args);
        };
      }
      function unconstruct(func) {
        return function() {
          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return construct(func, args);
        };
      }
      function addToSet(set, array) {
        if (setPrototypeOf) {
          setPrototypeOf(set, null);
        }
        var l = array.length;
        while (l--) {
          var element = array[l];
          if (typeof element === "string") {
            var lcElement = stringToLowerCase(element);
            if (lcElement !== element) {
              if (!isFrozen(array)) {
                array[l] = lcElement;
              }
              element = lcElement;
            }
          }
          set[element] = true;
        }
        return set;
      }
      function clone(object) {
        var newObject = create(null);
        var property = void 0;
        for (property in object) {
          if (apply(hasOwnProperty, object, [property])) {
            newObject[property] = object[property];
          }
        }
        return newObject;
      }
      function lookupGetter(object, prop) {
        while (object !== null) {
          var desc = getOwnPropertyDescriptor(object, prop);
          if (desc) {
            if (desc.get) {
              return unapply(desc.get);
            }
            if (typeof desc.value === "function") {
              return unapply(desc.value);
            }
          }
          object = getPrototypeOf(object);
        }
        function fallbackValue(element) {
          console.warn("fallback value for", element);
          return null;
        }
        return fallbackValue;
      }
      var html = freeze(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]);
      var svg = freeze(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]);
      var svgFilters = freeze(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]);
      var svgDisallowed = freeze(["animate", "color-profile", "cursor", "discard", "fedropshadow", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]);
      var mathMl = freeze(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover"]);
      var mathMlDisallowed = freeze(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]);
      var text = freeze(["#text"]);
      var html$1 = freeze(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "xmlns", "slot"]);
      var svg$1 = freeze(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]);
      var mathMl$1 = freeze(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]);
      var xml = freeze(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]);
      var MUSTACHE_EXPR = seal(/\{\{[\s\S]*|[\s\S]*\}\}/gm);
      var ERB_EXPR = seal(/<%[\s\S]*|[\s\S]*%>/gm);
      var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/);
      var ARIA_ATTR = seal(/^aria-[\-\w]+$/);
      var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i);
      var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
      var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g);
      var DOCTYPE_NAME = seal(/^html$/i);
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      function _toConsumableArray$1(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }
          return arr2;
        } else {
          return Array.from(arr);
        }
      }
      var getGlobal = function getGlobal2() {
        return typeof window === "undefined" ? null : window;
      };
      var _createTrustedTypesPolicy = function _createTrustedTypesPolicy2(trustedTypes, document2) {
        if ((typeof trustedTypes === "undefined" ? "undefined" : _typeof(trustedTypes)) !== "object" || typeof trustedTypes.createPolicy !== "function") {
          return null;
        }
        var suffix = null;
        var ATTR_NAME = "data-tt-policy-suffix";
        if (document2.currentScript && document2.currentScript.hasAttribute(ATTR_NAME)) {
          suffix = document2.currentScript.getAttribute(ATTR_NAME);
        }
        var policyName = "dompurify" + (suffix ? "#" + suffix : "");
        try {
          return trustedTypes.createPolicy(policyName, {
            createHTML: function createHTML(html$$1) {
              return html$$1;
            }
          });
        } catch (_) {
          console.warn("TrustedTypes policy " + policyName + " could not be created.");
          return null;
        }
      };
      function createDOMPurify() {
        var window2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getGlobal();
        var DOMPurify2 = function DOMPurify3(root) {
          return createDOMPurify(root);
        };
        DOMPurify2.version = "2.3.6";
        DOMPurify2.removed = [];
        if (!window2 || !window2.document || window2.document.nodeType !== 9) {
          DOMPurify2.isSupported = false;
          return DOMPurify2;
        }
        var originalDocument = window2.document;
        var document2 = window2.document;
        var DocumentFragment = window2.DocumentFragment, HTMLTemplateElement = window2.HTMLTemplateElement, Node = window2.Node, Element = window2.Element, NodeFilter = window2.NodeFilter, _window$NamedNodeMap = window2.NamedNodeMap, NamedNodeMap = _window$NamedNodeMap === void 0 ? window2.NamedNodeMap || window2.MozNamedAttrMap : _window$NamedNodeMap, HTMLFormElement = window2.HTMLFormElement, DOMParser = window2.DOMParser, trustedTypes = window2.trustedTypes;
        var ElementPrototype = Element.prototype;
        var cloneNode = lookupGetter(ElementPrototype, "cloneNode");
        var getNextSibling = lookupGetter(ElementPrototype, "nextSibling");
        var getChildNodes = lookupGetter(ElementPrototype, "childNodes");
        var getParentNode = lookupGetter(ElementPrototype, "parentNode");
        if (typeof HTMLTemplateElement === "function") {
          var template = document2.createElement("template");
          if (template.content && template.content.ownerDocument) {
            document2 = template.content.ownerDocument;
          }
        }
        var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
        var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML("") : "";
        var _document = document2, implementation = _document.implementation, createNodeIterator = _document.createNodeIterator, createDocumentFragment = _document.createDocumentFragment, getElementsByTagName = _document.getElementsByTagName;
        var importNode = originalDocument.importNode;
        var documentMode = {};
        try {
          documentMode = clone(document2).documentMode ? document2.documentMode : {};
        } catch (_) {
        }
        var hooks = {};
        DOMPurify2.isSupported = typeof getParentNode === "function" && implementation && typeof implementation.createHTMLDocument !== "undefined" && documentMode !== 9;
        var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR, ERB_EXPR$$1 = ERB_EXPR, DATA_ATTR$$1 = DATA_ATTR, ARIA_ATTR$$1 = ARIA_ATTR, IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA, ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;
        var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;
        var ALLOWED_TAGS = null;
        var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));
        var ALLOWED_ATTR = null;
        var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));
        var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
          tagNameCheck: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: null
          },
          attributeNameCheck: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: null
          },
          allowCustomizedBuiltInElements: {
            writable: true,
            configurable: false,
            enumerable: true,
            value: false
          }
        }));
        var FORBID_TAGS = null;
        var FORBID_ATTR = null;
        var ALLOW_ARIA_ATTR = true;
        var ALLOW_DATA_ATTR = true;
        var ALLOW_UNKNOWN_PROTOCOLS = false;
        var SAFE_FOR_TEMPLATES = false;
        var WHOLE_DOCUMENT = false;
        var SET_CONFIG = false;
        var FORCE_BODY = false;
        var RETURN_DOM = false;
        var RETURN_DOM_FRAGMENT = false;
        var RETURN_TRUSTED_TYPE = false;
        var SANITIZE_DOM = true;
        var KEEP_CONTENT = true;
        var IN_PLACE = false;
        var USE_PROFILES = {};
        var FORBID_CONTENTS = null;
        var DEFAULT_FORBID_CONTENTS = addToSet({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
        var DATA_URI_TAGS = null;
        var DEFAULT_DATA_URI_TAGS = addToSet({}, ["audio", "video", "img", "source", "image", "track"]);
        var URI_SAFE_ATTRIBUTES = null;
        var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]);
        var MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var NAMESPACE = HTML_NAMESPACE;
        var IS_EMPTY_INPUT = false;
        var PARSER_MEDIA_TYPE = void 0;
        var SUPPORTED_PARSER_MEDIA_TYPES = ["application/xhtml+xml", "text/html"];
        var DEFAULT_PARSER_MEDIA_TYPE = "text/html";
        var transformCaseFunc = void 0;
        var CONFIG = null;
        var formElement = document2.createElement("form");
        var isRegexOrFunction = function isRegexOrFunction2(testValue) {
          return testValue instanceof RegExp || testValue instanceof Function;
        };
        var _parseConfig = function _parseConfig2(cfg) {
          if (CONFIG && CONFIG === cfg) {
            return;
          }
          if (!cfg || (typeof cfg === "undefined" ? "undefined" : _typeof(cfg)) !== "object") {
            cfg = {};
          }
          cfg = clone(cfg);
          ALLOWED_TAGS = "ALLOWED_TAGS" in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
          ALLOWED_ATTR = "ALLOWED_ATTR" in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
          URI_SAFE_ATTRIBUTES = "ADD_URI_SAFE_ATTR" in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
          DATA_URI_TAGS = "ADD_DATA_URI_TAGS" in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
          FORBID_CONTENTS = "FORBID_CONTENTS" in cfg ? addToSet({}, cfg.FORBID_CONTENTS) : DEFAULT_FORBID_CONTENTS;
          FORBID_TAGS = "FORBID_TAGS" in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
          FORBID_ATTR = "FORBID_ATTR" in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
          USE_PROFILES = "USE_PROFILES" in cfg ? cfg.USE_PROFILES : false;
          ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false;
          ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false;
          ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false;
          SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false;
          WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false;
          RETURN_DOM = cfg.RETURN_DOM || false;
          RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false;
          RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false;
          FORCE_BODY = cfg.FORCE_BODY || false;
          SANITIZE_DOM = cfg.SANITIZE_DOM !== false;
          KEEP_CONTENT = cfg.KEEP_CONTENT !== false;
          IN_PLACE = cfg.IN_PLACE || false;
          IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;
          NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
          if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
            CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
          }
          if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
            CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
          }
          if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === "boolean") {
            CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
          }
          PARSER_MEDIA_TYPE = SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;
          transformCaseFunc = PARSER_MEDIA_TYPE === "application/xhtml+xml" ? function(x) {
            return x;
          } : stringToLowerCase;
          if (SAFE_FOR_TEMPLATES) {
            ALLOW_DATA_ATTR = false;
          }
          if (RETURN_DOM_FRAGMENT) {
            RETURN_DOM = true;
          }
          if (USE_PROFILES) {
            ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));
            ALLOWED_ATTR = [];
            if (USE_PROFILES.html === true) {
              addToSet(ALLOWED_TAGS, html);
              addToSet(ALLOWED_ATTR, html$1);
            }
            if (USE_PROFILES.svg === true) {
              addToSet(ALLOWED_TAGS, svg);
              addToSet(ALLOWED_ATTR, svg$1);
              addToSet(ALLOWED_ATTR, xml);
            }
            if (USE_PROFILES.svgFilters === true) {
              addToSet(ALLOWED_TAGS, svgFilters);
              addToSet(ALLOWED_ATTR, svg$1);
              addToSet(ALLOWED_ATTR, xml);
            }
            if (USE_PROFILES.mathMl === true) {
              addToSet(ALLOWED_TAGS, mathMl);
              addToSet(ALLOWED_ATTR, mathMl$1);
              addToSet(ALLOWED_ATTR, xml);
            }
          }
          if (cfg.ADD_TAGS) {
            if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
              ALLOWED_TAGS = clone(ALLOWED_TAGS);
            }
            addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
          }
          if (cfg.ADD_ATTR) {
            if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
              ALLOWED_ATTR = clone(ALLOWED_ATTR);
            }
            addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
          }
          if (cfg.ADD_URI_SAFE_ATTR) {
            addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
          }
          if (cfg.FORBID_CONTENTS) {
            if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
              FORBID_CONTENTS = clone(FORBID_CONTENTS);
            }
            addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS);
          }
          if (KEEP_CONTENT) {
            ALLOWED_TAGS["#text"] = true;
          }
          if (WHOLE_DOCUMENT) {
            addToSet(ALLOWED_TAGS, ["html", "head", "body"]);
          }
          if (ALLOWED_TAGS.table) {
            addToSet(ALLOWED_TAGS, ["tbody"]);
            delete FORBID_TAGS.tbody;
          }
          if (freeze) {
            freeze(cfg);
          }
          CONFIG = cfg;
        };
        var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ["mi", "mo", "mn", "ms", "mtext"]);
        var HTML_INTEGRATION_POINTS = addToSet({}, ["foreignobject", "desc", "title", "annotation-xml"]);
        var ALL_SVG_TAGS = addToSet({}, svg);
        addToSet(ALL_SVG_TAGS, svgFilters);
        addToSet(ALL_SVG_TAGS, svgDisallowed);
        var ALL_MATHML_TAGS = addToSet({}, mathMl);
        addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
        var _checkValidNamespace = function _checkValidNamespace2(element) {
          var parent = getParentNode(element);
          if (!parent || !parent.tagName) {
            parent = {
              namespaceURI: HTML_NAMESPACE,
              tagName: "template"
            };
          }
          var tagName = stringToLowerCase(element.tagName);
          var parentTagName = stringToLowerCase(parent.tagName);
          if (element.namespaceURI === SVG_NAMESPACE) {
            if (parent.namespaceURI === HTML_NAMESPACE) {
              return tagName === "svg";
            }
            if (parent.namespaceURI === MATHML_NAMESPACE) {
              return tagName === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
            }
            return Boolean(ALL_SVG_TAGS[tagName]);
          }
          if (element.namespaceURI === MATHML_NAMESPACE) {
            if (parent.namespaceURI === HTML_NAMESPACE) {
              return tagName === "math";
            }
            if (parent.namespaceURI === SVG_NAMESPACE) {
              return tagName === "math" && HTML_INTEGRATION_POINTS[parentTagName];
            }
            return Boolean(ALL_MATHML_TAGS[tagName]);
          }
          if (element.namespaceURI === HTML_NAMESPACE) {
            if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
              return false;
            }
            if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
              return false;
            }
            var commonSvgAndHTMLElements = addToSet({}, ["title", "style", "font", "a", "script"]);
            return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);
          }
          return false;
        };
        var _forceRemove = function _forceRemove2(node) {
          arrayPush(DOMPurify2.removed, { element: node });
          try {
            node.parentNode.removeChild(node);
          } catch (_) {
            try {
              node.outerHTML = emptyHTML;
            } catch (_2) {
              node.remove();
            }
          }
        };
        var _removeAttribute = function _removeAttribute2(name, node) {
          try {
            arrayPush(DOMPurify2.removed, {
              attribute: node.getAttributeNode(name),
              from: node
            });
          } catch (_) {
            arrayPush(DOMPurify2.removed, {
              attribute: null,
              from: node
            });
          }
          node.removeAttribute(name);
          if (name === "is" && !ALLOWED_ATTR[name]) {
            if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
              try {
                _forceRemove(node);
              } catch (_) {
              }
            } else {
              try {
                node.setAttribute(name, "");
              } catch (_) {
              }
            }
          }
        };
        var _initDocument = function _initDocument2(dirty) {
          var doc = void 0;
          var leadingWhitespace = void 0;
          if (FORCE_BODY) {
            dirty = "<remove></remove>" + dirty;
          } else {
            var matches = stringMatch(dirty, /^[\r\n\t ]+/);
            leadingWhitespace = matches && matches[0];
          }
          if (PARSER_MEDIA_TYPE === "application/xhtml+xml") {
            dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + "</body></html>";
          }
          var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
          if (NAMESPACE === HTML_NAMESPACE) {
            try {
              doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
            } catch (_) {
            }
          }
          if (!doc || !doc.documentElement) {
            doc = implementation.createDocument(NAMESPACE, "template", null);
            try {
              doc.documentElement.innerHTML = IS_EMPTY_INPUT ? "" : dirtyPayload;
            } catch (_) {
            }
          }
          var body = doc.body || doc.documentElement;
          if (dirty && leadingWhitespace) {
            body.insertBefore(document2.createTextNode(leadingWhitespace), body.childNodes[0] || null);
          }
          if (NAMESPACE === HTML_NAMESPACE) {
            return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
          }
          return WHOLE_DOCUMENT ? doc.documentElement : body;
        };
        var _createIterator = function _createIterator2(root) {
          return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);
        };
        var _isClobbered = function _isClobbered2(elm) {
          return elm instanceof HTMLFormElement && (typeof elm.nodeName !== "string" || typeof elm.textContent !== "string" || typeof elm.removeChild !== "function" || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== "function" || typeof elm.setAttribute !== "function" || typeof elm.namespaceURI !== "string" || typeof elm.insertBefore !== "function");
        };
        var _isNode = function _isNode2(object) {
          return (typeof Node === "undefined" ? "undefined" : _typeof(Node)) === "object" ? object instanceof Node : object && (typeof object === "undefined" ? "undefined" : _typeof(object)) === "object" && typeof object.nodeType === "number" && typeof object.nodeName === "string";
        };
        var _executeHook = function _executeHook2(entryPoint, currentNode, data) {
          if (!hooks[entryPoint]) {
            return;
          }
          arrayForEach(hooks[entryPoint], function(hook) {
            hook.call(DOMPurify2, currentNode, data, CONFIG);
          });
        };
        var _sanitizeElements = function _sanitizeElements2(currentNode) {
          var content = void 0;
          _executeHook("beforeSanitizeElements", currentNode, null);
          if (_isClobbered(currentNode)) {
            _forceRemove(currentNode);
            return true;
          }
          if (stringMatch(currentNode.nodeName, /[\u0080-\uFFFF]/)) {
            _forceRemove(currentNode);
            return true;
          }
          var tagName = transformCaseFunc(currentNode.nodeName);
          _executeHook("uponSanitizeElement", currentNode, {
            tagName,
            allowedTags: ALLOWED_TAGS
          });
          if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
            _forceRemove(currentNode);
            return true;
          }
          if (tagName === "select" && regExpTest(/<template/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);
            return true;
          }
          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
            if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
              if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName))
                return false;
              if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName))
                return false;
            }
            if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
              var parentNode = getParentNode(currentNode) || currentNode.parentNode;
              var childNodes = getChildNodes(currentNode) || currentNode.childNodes;
              if (childNodes && parentNode) {
                var childCount = childNodes.length;
                for (var i = childCount - 1; i >= 0; --i) {
                  parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
                }
              }
            }
            _forceRemove(currentNode);
            return true;
          }
          if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
            _forceRemove(currentNode);
            return true;
          }
          if ((tagName === "noscript" || tagName === "noembed") && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
            _forceRemove(currentNode);
            return true;
          }
          if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
            content = currentNode.textContent;
            content = stringReplace(content, MUSTACHE_EXPR$$1, " ");
            content = stringReplace(content, ERB_EXPR$$1, " ");
            if (currentNode.textContent !== content) {
              arrayPush(DOMPurify2.removed, { element: currentNode.cloneNode() });
              currentNode.textContent = content;
            }
          }
          _executeHook("afterSanitizeElements", currentNode, null);
          return false;
        };
        var _isValidAttribute = function _isValidAttribute2(lcTag, lcName, value) {
          if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value in document2 || value in formElement)) {
            return false;
          }
          if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$$1, lcName))
            ;
          else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName))
            ;
          else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
            if (_basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || lcName === "is" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value)))
              ;
            else {
              return false;
            }
          } else if (URI_SAFE_ATTRIBUTES[lcName])
            ;
          else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, "")))
            ;
          else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && stringIndexOf(value, "data:") === 0 && DATA_URI_TAGS[lcTag])
            ;
          else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, "")))
            ;
          else if (!value)
            ;
          else {
            return false;
          }
          return true;
        };
        var _basicCustomElementTest = function _basicCustomElementTest2(tagName) {
          return tagName.indexOf("-") > 0;
        };
        var _sanitizeAttributes = function _sanitizeAttributes2(currentNode) {
          var attr = void 0;
          var value = void 0;
          var lcName = void 0;
          var l = void 0;
          _executeHook("beforeSanitizeAttributes", currentNode, null);
          var attributes = currentNode.attributes;
          if (!attributes) {
            return;
          }
          var hookEvent = {
            attrName: "",
            attrValue: "",
            keepAttr: true,
            allowedAttributes: ALLOWED_ATTR
          };
          l = attributes.length;
          while (l--) {
            attr = attributes[l];
            var _attr = attr, name = _attr.name, namespaceURI = _attr.namespaceURI;
            value = stringTrim(attr.value);
            lcName = transformCaseFunc(name);
            hookEvent.attrName = lcName;
            hookEvent.attrValue = value;
            hookEvent.keepAttr = true;
            hookEvent.forceKeepAttr = void 0;
            _executeHook("uponSanitizeAttribute", currentNode, hookEvent);
            value = hookEvent.attrValue;
            if (hookEvent.forceKeepAttr) {
              continue;
            }
            _removeAttribute(name, currentNode);
            if (!hookEvent.keepAttr) {
              continue;
            }
            if (regExpTest(/\/>/i, value)) {
              _removeAttribute(name, currentNode);
              continue;
            }
            if (SAFE_FOR_TEMPLATES) {
              value = stringReplace(value, MUSTACHE_EXPR$$1, " ");
              value = stringReplace(value, ERB_EXPR$$1, " ");
            }
            var lcTag = transformCaseFunc(currentNode.nodeName);
            if (!_isValidAttribute(lcTag, lcName, value)) {
              continue;
            }
            try {
              if (namespaceURI) {
                currentNode.setAttributeNS(namespaceURI, name, value);
              } else {
                currentNode.setAttribute(name, value);
              }
              arrayPop(DOMPurify2.removed);
            } catch (_) {
            }
          }
          _executeHook("afterSanitizeAttributes", currentNode, null);
        };
        var _sanitizeShadowDOM = function _sanitizeShadowDOM2(fragment) {
          var shadowNode = void 0;
          var shadowIterator = _createIterator(fragment);
          _executeHook("beforeSanitizeShadowDOM", fragment, null);
          while (shadowNode = shadowIterator.nextNode()) {
            _executeHook("uponSanitizeShadowNode", shadowNode, null);
            if (_sanitizeElements(shadowNode)) {
              continue;
            }
            if (shadowNode.content instanceof DocumentFragment) {
              _sanitizeShadowDOM2(shadowNode.content);
            }
            _sanitizeAttributes(shadowNode);
          }
          _executeHook("afterSanitizeShadowDOM", fragment, null);
        };
        DOMPurify2.sanitize = function(dirty, cfg) {
          var body = void 0;
          var importedNode = void 0;
          var currentNode = void 0;
          var oldNode = void 0;
          var returnNode = void 0;
          IS_EMPTY_INPUT = !dirty;
          if (IS_EMPTY_INPUT) {
            dirty = "<!-->";
          }
          if (typeof dirty !== "string" && !_isNode(dirty)) {
            if (typeof dirty.toString !== "function") {
              throw typeErrorCreate("toString is not a function");
            } else {
              dirty = dirty.toString();
              if (typeof dirty !== "string") {
                throw typeErrorCreate("dirty is not a string, aborting");
              }
            }
          }
          if (!DOMPurify2.isSupported) {
            if (_typeof(window2.toStaticHTML) === "object" || typeof window2.toStaticHTML === "function") {
              if (typeof dirty === "string") {
                return window2.toStaticHTML(dirty);
              }
              if (_isNode(dirty)) {
                return window2.toStaticHTML(dirty.outerHTML);
              }
            }
            return dirty;
          }
          if (!SET_CONFIG) {
            _parseConfig(cfg);
          }
          DOMPurify2.removed = [];
          if (typeof dirty === "string") {
            IN_PLACE = false;
          }
          if (IN_PLACE) {
            if (dirty.nodeName) {
              var tagName = transformCaseFunc(dirty.nodeName);
              if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
                throw typeErrorCreate("root node is forbidden and cannot be sanitized in-place");
              }
            }
          } else if (dirty instanceof Node) {
            body = _initDocument("<!---->");
            importedNode = body.ownerDocument.importNode(dirty, true);
            if (importedNode.nodeType === 1 && importedNode.nodeName === "BODY") {
              body = importedNode;
            } else if (importedNode.nodeName === "HTML") {
              body = importedNode;
            } else {
              body.appendChild(importedNode);
            }
          } else {
            if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && dirty.indexOf("<") === -1) {
              return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
            }
            body = _initDocument(dirty);
            if (!body) {
              return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : "";
            }
          }
          if (body && FORCE_BODY) {
            _forceRemove(body.firstChild);
          }
          var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
          while (currentNode = nodeIterator.nextNode()) {
            if (currentNode.nodeType === 3 && currentNode === oldNode) {
              continue;
            }
            if (_sanitizeElements(currentNode)) {
              continue;
            }
            if (currentNode.content instanceof DocumentFragment) {
              _sanitizeShadowDOM(currentNode.content);
            }
            _sanitizeAttributes(currentNode);
            oldNode = currentNode;
          }
          oldNode = null;
          if (IN_PLACE) {
            return dirty;
          }
          if (RETURN_DOM) {
            if (RETURN_DOM_FRAGMENT) {
              returnNode = createDocumentFragment.call(body.ownerDocument);
              while (body.firstChild) {
                returnNode.appendChild(body.firstChild);
              }
            } else {
              returnNode = body;
            }
            if (ALLOWED_ATTR.shadowroot) {
              returnNode = importNode.call(originalDocument, returnNode, true);
            }
            return returnNode;
          }
          var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
          if (WHOLE_DOCUMENT && ALLOWED_TAGS["!doctype"] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
            serializedHTML = "<!DOCTYPE " + body.ownerDocument.doctype.name + ">\n" + serializedHTML;
          }
          if (SAFE_FOR_TEMPLATES) {
            serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, " ");
            serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, " ");
          }
          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
        };
        DOMPurify2.setConfig = function(cfg) {
          _parseConfig(cfg);
          SET_CONFIG = true;
        };
        DOMPurify2.clearConfig = function() {
          CONFIG = null;
          SET_CONFIG = false;
        };
        DOMPurify2.isValidAttribute = function(tag, attr, value) {
          if (!CONFIG) {
            _parseConfig({});
          }
          var lcTag = transformCaseFunc(tag);
          var lcName = transformCaseFunc(attr);
          return _isValidAttribute(lcTag, lcName, value);
        };
        DOMPurify2.addHook = function(entryPoint, hookFunction) {
          if (typeof hookFunction !== "function") {
            return;
          }
          hooks[entryPoint] = hooks[entryPoint] || [];
          arrayPush(hooks[entryPoint], hookFunction);
        };
        DOMPurify2.removeHook = function(entryPoint) {
          if (hooks[entryPoint]) {
            arrayPop(hooks[entryPoint]);
          }
        };
        DOMPurify2.removeHooks = function(entryPoint) {
          if (hooks[entryPoint]) {
            hooks[entryPoint] = [];
          }
        };
        DOMPurify2.removeAllHooks = function() {
          hooks = {};
        };
        return DOMPurify2;
      }
      var purify = createDOMPurify();
      return purify;
    });
  }
});

// src/main.ts
__export(exports, {
  default: () => VariablesPlugin
});
var import_obsidian = __toModule(require("obsidian"));

// src/utils.ts
function getVaultAbsolutePath(app) {
  return app.vault.adapter.basePath;
}

// src/settings.ts
var DEFAULT_SETTINGS = {
  filter: "",
  variables: [{
    vaultPath: "*",
    name: "$var",
    value: "swapped"
  }],
  showApplicableVars: false,
  applicableVarIndexes: [0],
  debugMode: false
};

// src/main.ts
var DOMPurify = __toModule(require_purify());
var VariablesPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new VariablesSettingTab(this.app, this));
      this.addCommand({
        id: "plugin-vars-manage-variables",
        name: "Manage variables",
        callback: () => {
          this.app.setting.open();
          this.app.setting.openTabById("obsidian-variables");
        }
      });
      this.registerMarkdownPostProcessor((element, context) => {
        for (let i = 0; i < this.settings.applicableVarIndexes.length; i++) {
          const variable = this.settings.variables[this.settings.applicableVarIndexes[i]];
          var cleanedValue = DOMPurify.sanitize(variable.value);
          element.innerHTML = element.innerHTML.replaceAll(variable.name, cleanedValue);
        }
      });
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var VariablesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.debouncedRefresh = (0, import_obsidian.debounce)(() => {
      this.display();
      document.getElementById("plugin-vars-filter-input").focus();
    }, 700, true);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    let pinIcon = this.plugin.settings.showApplicableVars ? "check-in-circle" : "check-small";
    new import_obsidian.Setting(containerEl).setClass("plugin-vars-header").setName("Variables").addText((text) => text.setPlaceholder("Filter by variable name").setValue(this.plugin.settings.filter).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.filter = value;
      yield this.plugin.saveSettings();
      this.debouncedRefresh();
    })).inputEl.id = "plugin-vars-filter-input").addButton((btn) => btn.setTooltip("Open documentation on GitHub").setIcon("help").onClick(() => {
      window.open("https://github.com/jffaust/obsidian-variables/", "_blank");
    })).addButton((btn) => btn.setTooltip("Copy current vault path").setIcon("vault").onClick(() => {
      navigator.clipboard.writeText(getVaultAbsolutePath(this.app));
    })).addButton((btn) => btn.setTooltip("Toggle between showing all variables or only the ones that apply to the current vault").setIcon(pinIcon).onClick(() => {
      this.plugin.settings.showApplicableVars = !this.plugin.settings.showApplicableVars;
      this.display();
    })).addButton((btn) => btn.setTooltip("Add a new variable").setIcon("import-glyph").onClick(() => {
      this.plugin.settings.variables.push({
        vaultPath: "",
        name: "",
        value: ""
      });
      this.display();
    }));
    for (let i = 0; i < this.plugin.settings.variables.length; i++) {
      const variable = this.plugin.settings.variables[i];
      if (this.plugin.settings.filter && !variable.name.toLowerCase().includes(this.plugin.settings.filter.toLowerCase())) {
        continue;
      }
      if (this.plugin.settings.showApplicableVars && !this.plugin.settings.applicableVarIndexes.contains(i)) {
        continue;
      }
      new import_obsidian.Setting(containerEl).setClass("plugin-vars-list").setName(`Variable`).addText((text) => text.setPlaceholder("vault path").setValue(this.plugin.settings.variables[i].vaultPath).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.variables[i].vaultPath = value;
        this.updateApplicableVars();
        yield this.plugin.saveSettings();
      }))).addText((text) => text.setPlaceholder("name").setValue(this.plugin.settings.variables[i].name).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.variables[i].name = value;
        this.updateApplicableVars();
        yield this.plugin.saveSettings();
      }))).addText((text) => text.setPlaceholder("value").setValue(this.plugin.settings.variables[i].value).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.variables[i].value = value;
        yield this.plugin.saveSettings();
      }))).addExtraButton((btn) => btn.setIcon("cross-in-box").setTooltip("Delete this variable").onClick(() => {
        this.plugin.settings.variables.splice(i, 1);
        this.updateApplicableVars();
        this.display();
      }));
    }
  }
  updateApplicableVars() {
    let newIndexesMap = {};
    for (let i = 0; i < this.plugin.settings.variables.length; i++) {
      let v = this.plugin.settings.variables[i];
      if (v.name && v.vaultPath) {
        if (newIndexesMap[v.name] == void 0) {
          if (v.vaultPath == "*" || v.vaultPath == getVaultAbsolutePath(this.app)) {
            newIndexesMap[v.name] = i;
          }
        } else {
          let currentVar = this.plugin.settings.variables[newIndexesMap[v.name]];
          if (currentVar.vaultPath == "*" && v.vaultPath == getVaultAbsolutePath(this.app)) {
            newIndexesMap[v.name] = i;
          }
        }
      }
    }
    this.plugin.settings.applicableVarIndexes = Object.values(newIndexesMap);
    let debugMode = false;
    for (let i = 0; i < this.plugin.settings.applicableVarIndexes.length; i++) {
      const varIndex = this.plugin.settings.applicableVarIndexes[i];
      const variable = this.plugin.settings.variables[varIndex];
      if (variable.name == "$DEBUG" && variable.value == "true") {
        debugMode = true;
      }
    }
    this.plugin.settings.debugMode = debugMode;
  }
};
/*! @license DOMPurify 2.3.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.6/LICENSE */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2RvbXB1cmlmeS9zcmMvdXRpbHMuanMiLCAibm9kZV9tb2R1bGVzL2RvbXB1cmlmeS9zcmMvdGFncy5qcyIsICJub2RlX21vZHVsZXMvZG9tcHVyaWZ5L3NyYy9hdHRycy5qcyIsICJub2RlX21vZHVsZXMvZG9tcHVyaWZ5L3NyYy9yZWdleHAuanMiLCAibm9kZV9tb2R1bGVzL2RvbXB1cmlmeS9zcmMvcHVyaWZ5LmpzIiwgInNyYy9tYWluLnRzIiwgInNyYy91dGlscy50cyIsICJzcmMvc2V0dGluZ3MudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IHtcbiAgaGFzT3duUHJvcGVydHksXG4gIHNldFByb3RvdHlwZU9mLFxuICBpc0Zyb3plbixcbiAgZ2V0UHJvdG90eXBlT2YsXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbn0gPSBPYmplY3Q7XG5cbmxldCB7IGZyZWV6ZSwgc2VhbCwgY3JlYXRlIH0gPSBPYmplY3Q7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgaW1wb3J0L25vLW11dGFibGUtZXhwb3J0c1xubGV0IHsgYXBwbHksIGNvbnN0cnVjdCB9ID0gdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIFJlZmxlY3Q7XG5cbmlmICghYXBwbHkpIHtcbiAgYXBwbHkgPSBmdW5jdGlvbiAoZnVuLCB0aGlzVmFsdWUsIGFyZ3MpIHtcbiAgICByZXR1cm4gZnVuLmFwcGx5KHRoaXNWYWx1ZSwgYXJncyk7XG4gIH07XG59XG5cbmlmICghZnJlZXplKSB7XG4gIGZyZWV6ZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG5cbmlmICghc2VhbCkge1xuICBzZWFsID0gZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cblxuaWYgKCFjb25zdHJ1Y3QpIHtcbiAgY29uc3RydWN0ID0gZnVuY3Rpb24gKEZ1bmMsIGFyZ3MpIHtcbiAgICByZXR1cm4gbmV3IEZ1bmMoLi4uYXJncyk7XG4gIH07XG59XG5cbmNvbnN0IGFycmF5Rm9yRWFjaCA9IHVuYXBwbHkoQXJyYXkucHJvdG90eXBlLmZvckVhY2gpO1xuY29uc3QgYXJyYXlJbmRleE9mID0gdW5hcHBseShBcnJheS5wcm90b3R5cGUuaW5kZXhPZik7XG5jb25zdCBhcnJheVBvcCA9IHVuYXBwbHkoQXJyYXkucHJvdG90eXBlLnBvcCk7XG5jb25zdCBhcnJheVB1c2ggPSB1bmFwcGx5KEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbmNvbnN0IGFycmF5U2xpY2UgPSB1bmFwcGx5KEFycmF5LnByb3RvdHlwZS5zbGljZSk7XG5cbmNvbnN0IHN0cmluZ1RvTG93ZXJDYXNlID0gdW5hcHBseShTdHJpbmcucHJvdG90eXBlLnRvTG93ZXJDYXNlKTtcbmNvbnN0IHN0cmluZ01hdGNoID0gdW5hcHBseShTdHJpbmcucHJvdG90eXBlLm1hdGNoKTtcbmNvbnN0IHN0cmluZ1JlcGxhY2UgPSB1bmFwcGx5KFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG5jb25zdCBzdHJpbmdJbmRleE9mID0gdW5hcHBseShTdHJpbmcucHJvdG90eXBlLmluZGV4T2YpO1xuY29uc3Qgc3RyaW5nVHJpbSA9IHVuYXBwbHkoU3RyaW5nLnByb3RvdHlwZS50cmltKTtcblxuY29uc3QgcmVnRXhwVGVzdCA9IHVuYXBwbHkoUmVnRXhwLnByb3RvdHlwZS50ZXN0KTtcblxuY29uc3QgdHlwZUVycm9yQ3JlYXRlID0gdW5jb25zdHJ1Y3QoVHlwZUVycm9yKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVuYXBwbHkoZnVuYykge1xuICByZXR1cm4gKHRoaXNBcmcsIC4uLmFyZ3MpID0+IGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5jb25zdHJ1Y3QoZnVuYykge1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IGNvbnN0cnVjdChmdW5jLCBhcmdzKTtcbn1cblxuLyogQWRkIHByb3BlcnRpZXMgdG8gYSBsb29rdXAgdGFibGUgKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRUb1NldChzZXQsIGFycmF5KSB7XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgIC8vIE1ha2UgJ2luJyBhbmQgdHJ1dGh5IGNoZWNrcyBsaWtlIEJvb2xlYW4oc2V0LmNvbnN0cnVjdG9yKVxuICAgIC8vIGluZGVwZW5kZW50IG9mIGFueSBwcm9wZXJ0aWVzIGRlZmluZWQgb24gT2JqZWN0LnByb3RvdHlwZS5cbiAgICAvLyBQcmV2ZW50IHByb3RvdHlwZSBzZXR0ZXJzIGZyb20gaW50ZXJjZXB0aW5nIHNldCBhcyBhIHRoaXMgdmFsdWUuXG4gICAgc2V0UHJvdG90eXBlT2Yoc2V0LCBudWxsKTtcbiAgfVxuXG4gIGxldCBsID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobC0tKSB7XG4gICAgbGV0IGVsZW1lbnQgPSBhcnJheVtsXTtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBsY0VsZW1lbnQgPSBzdHJpbmdUb0xvd2VyQ2FzZShlbGVtZW50KTtcbiAgICAgIGlmIChsY0VsZW1lbnQgIT09IGVsZW1lbnQpIHtcbiAgICAgICAgLy8gQ29uZmlnIHByZXNldHMgKGUuZy4gdGFncy5qcywgYXR0cnMuanMpIGFyZSBpbW11dGFibGUuXG4gICAgICAgIGlmICghaXNGcm96ZW4oYXJyYXkpKSB7XG4gICAgICAgICAgYXJyYXlbbF0gPSBsY0VsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50ID0gbGNFbGVtZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldFtlbGVtZW50XSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gc2V0O1xufVxuXG4vKiBTaGFsbG93IGNsb25lIGFuIG9iamVjdCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKG9iamVjdCkge1xuICBjb25zdCBuZXdPYmplY3QgPSBjcmVhdGUobnVsbCk7XG5cbiAgbGV0IHByb3BlcnR5O1xuICBmb3IgKHByb3BlcnR5IGluIG9iamVjdCkge1xuICAgIGlmIChhcHBseShoYXNPd25Qcm9wZXJ0eSwgb2JqZWN0LCBbcHJvcGVydHldKSkge1xuICAgICAgbmV3T2JqZWN0W3Byb3BlcnR5XSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld09iamVjdDtcbn1cblxuLyogSUUxMCBkb2Vzbid0IHN1cHBvcnQgX19sb29rdXBHZXR0ZXJfXyBzbyBsZXRzJ1xuICogc2ltdWxhdGUgaXQuIEl0IGFsc28gYXV0b21hdGljYWxseSBjaGVja3NcbiAqIGlmIHRoZSBwcm9wIGlzIGZ1bmN0aW9uIG9yIGdldHRlciBhbmQgYmVoYXZlc1xuICogYWNjb3JkaW5nbHkuICovXG5mdW5jdGlvbiBsb29rdXBHZXR0ZXIob2JqZWN0LCBwcm9wKSB7XG4gIHdoaWxlIChvYmplY3QgIT09IG51bGwpIHtcbiAgICBjb25zdCBkZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcCk7XG4gICAgaWYgKGRlc2MpIHtcbiAgICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICByZXR1cm4gdW5hcHBseShkZXNjLmdldCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGVzYy52YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdW5hcHBseShkZXNjLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvYmplY3QgPSBnZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmFsbGJhY2tWYWx1ZShlbGVtZW50KSB7XG4gICAgY29uc29sZS53YXJuKCdmYWxsYmFjayB2YWx1ZSBmb3InLCBlbGVtZW50KTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBmYWxsYmFja1ZhbHVlO1xufVxuXG5leHBvcnQge1xuICAvLyBBcnJheVxuICBhcnJheUZvckVhY2gsXG4gIGFycmF5SW5kZXhPZixcbiAgYXJyYXlQb3AsXG4gIGFycmF5UHVzaCxcbiAgYXJyYXlTbGljZSxcbiAgLy8gT2JqZWN0XG4gIGZyZWV6ZSxcbiAgZ2V0UHJvdG90eXBlT2YsXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgaGFzT3duUHJvcGVydHksXG4gIGlzRnJvemVuLFxuICBzZXRQcm90b3R5cGVPZixcbiAgc2VhbCxcbiAgLy8gUmVnRXhwXG4gIHJlZ0V4cFRlc3QsXG4gIC8vIFN0cmluZ1xuICBzdHJpbmdJbmRleE9mLFxuICBzdHJpbmdNYXRjaCxcbiAgc3RyaW5nUmVwbGFjZSxcbiAgc3RyaW5nVG9Mb3dlckNhc2UsXG4gIHN0cmluZ1RyaW0sXG4gIC8vIEVycm9yc1xuICB0eXBlRXJyb3JDcmVhdGUsXG4gIC8vIE90aGVyXG4gIGxvb2t1cEdldHRlcixcbn07XG4iLCAiaW1wb3J0IHsgZnJlZXplIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbmV4cG9ydCBjb25zdCBodG1sID0gZnJlZXplKFtcbiAgJ2EnLFxuICAnYWJicicsXG4gICdhY3JvbnltJyxcbiAgJ2FkZHJlc3MnLFxuICAnYXJlYScsXG4gICdhcnRpY2xlJyxcbiAgJ2FzaWRlJyxcbiAgJ2F1ZGlvJyxcbiAgJ2InLFxuICAnYmRpJyxcbiAgJ2JkbycsXG4gICdiaWcnLFxuICAnYmxpbmsnLFxuICAnYmxvY2txdW90ZScsXG4gICdib2R5JyxcbiAgJ2JyJyxcbiAgJ2J1dHRvbicsXG4gICdjYW52YXMnLFxuICAnY2FwdGlvbicsXG4gICdjZW50ZXInLFxuICAnY2l0ZScsXG4gICdjb2RlJyxcbiAgJ2NvbCcsXG4gICdjb2xncm91cCcsXG4gICdjb250ZW50JyxcbiAgJ2RhdGEnLFxuICAnZGF0YWxpc3QnLFxuICAnZGQnLFxuICAnZGVjb3JhdG9yJyxcbiAgJ2RlbCcsXG4gICdkZXRhaWxzJyxcbiAgJ2RmbicsXG4gICdkaWFsb2cnLFxuICAnZGlyJyxcbiAgJ2RpdicsXG4gICdkbCcsXG4gICdkdCcsXG4gICdlbGVtZW50JyxcbiAgJ2VtJyxcbiAgJ2ZpZWxkc2V0JyxcbiAgJ2ZpZ2NhcHRpb24nLFxuICAnZmlndXJlJyxcbiAgJ2ZvbnQnLFxuICAnZm9vdGVyJyxcbiAgJ2Zvcm0nLFxuICAnaDEnLFxuICAnaDInLFxuICAnaDMnLFxuICAnaDQnLFxuICAnaDUnLFxuICAnaDYnLFxuICAnaGVhZCcsXG4gICdoZWFkZXInLFxuICAnaGdyb3VwJyxcbiAgJ2hyJyxcbiAgJ2h0bWwnLFxuICAnaScsXG4gICdpbWcnLFxuICAnaW5wdXQnLFxuICAnaW5zJyxcbiAgJ2tiZCcsXG4gICdsYWJlbCcsXG4gICdsZWdlbmQnLFxuICAnbGknLFxuICAnbWFpbicsXG4gICdtYXAnLFxuICAnbWFyaycsXG4gICdtYXJxdWVlJyxcbiAgJ21lbnUnLFxuICAnbWVudWl0ZW0nLFxuICAnbWV0ZXInLFxuICAnbmF2JyxcbiAgJ25vYnInLFxuICAnb2wnLFxuICAnb3B0Z3JvdXAnLFxuICAnb3B0aW9uJyxcbiAgJ291dHB1dCcsXG4gICdwJyxcbiAgJ3BpY3R1cmUnLFxuICAncHJlJyxcbiAgJ3Byb2dyZXNzJyxcbiAgJ3EnLFxuICAncnAnLFxuICAncnQnLFxuICAncnVieScsXG4gICdzJyxcbiAgJ3NhbXAnLFxuICAnc2VjdGlvbicsXG4gICdzZWxlY3QnLFxuICAnc2hhZG93JyxcbiAgJ3NtYWxsJyxcbiAgJ3NvdXJjZScsXG4gICdzcGFjZXInLFxuICAnc3BhbicsXG4gICdzdHJpa2UnLFxuICAnc3Ryb25nJyxcbiAgJ3N0eWxlJyxcbiAgJ3N1YicsXG4gICdzdW1tYXJ5JyxcbiAgJ3N1cCcsXG4gICd0YWJsZScsXG4gICd0Ym9keScsXG4gICd0ZCcsXG4gICd0ZW1wbGF0ZScsXG4gICd0ZXh0YXJlYScsXG4gICd0Zm9vdCcsXG4gICd0aCcsXG4gICd0aGVhZCcsXG4gICd0aW1lJyxcbiAgJ3RyJyxcbiAgJ3RyYWNrJyxcbiAgJ3R0JyxcbiAgJ3UnLFxuICAndWwnLFxuICAndmFyJyxcbiAgJ3ZpZGVvJyxcbiAgJ3dicicsXG5dKTtcblxuLy8gU1ZHXG5leHBvcnQgY29uc3Qgc3ZnID0gZnJlZXplKFtcbiAgJ3N2ZycsXG4gICdhJyxcbiAgJ2FsdGdseXBoJyxcbiAgJ2FsdGdseXBoZGVmJyxcbiAgJ2FsdGdseXBoaXRlbScsXG4gICdhbmltYXRlY29sb3InLFxuICAnYW5pbWF0ZW1vdGlvbicsXG4gICdhbmltYXRldHJhbnNmb3JtJyxcbiAgJ2NpcmNsZScsXG4gICdjbGlwcGF0aCcsXG4gICdkZWZzJyxcbiAgJ2Rlc2MnLFxuICAnZWxsaXBzZScsXG4gICdmaWx0ZXInLFxuICAnZm9udCcsXG4gICdnJyxcbiAgJ2dseXBoJyxcbiAgJ2dseXBocmVmJyxcbiAgJ2hrZXJuJyxcbiAgJ2ltYWdlJyxcbiAgJ2xpbmUnLFxuICAnbGluZWFyZ3JhZGllbnQnLFxuICAnbWFya2VyJyxcbiAgJ21hc2snLFxuICAnbWV0YWRhdGEnLFxuICAnbXBhdGgnLFxuICAncGF0aCcsXG4gICdwYXR0ZXJuJyxcbiAgJ3BvbHlnb24nLFxuICAncG9seWxpbmUnLFxuICAncmFkaWFsZ3JhZGllbnQnLFxuICAncmVjdCcsXG4gICdzdG9wJyxcbiAgJ3N0eWxlJyxcbiAgJ3N3aXRjaCcsXG4gICdzeW1ib2wnLFxuICAndGV4dCcsXG4gICd0ZXh0cGF0aCcsXG4gICd0aXRsZScsXG4gICd0cmVmJyxcbiAgJ3RzcGFuJyxcbiAgJ3ZpZXcnLFxuICAndmtlcm4nLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBzdmdGaWx0ZXJzID0gZnJlZXplKFtcbiAgJ2ZlQmxlbmQnLFxuICAnZmVDb2xvck1hdHJpeCcsXG4gICdmZUNvbXBvbmVudFRyYW5zZmVyJyxcbiAgJ2ZlQ29tcG9zaXRlJyxcbiAgJ2ZlQ29udm9sdmVNYXRyaXgnLFxuICAnZmVEaWZmdXNlTGlnaHRpbmcnLFxuICAnZmVEaXNwbGFjZW1lbnRNYXAnLFxuICAnZmVEaXN0YW50TGlnaHQnLFxuICAnZmVGbG9vZCcsXG4gICdmZUZ1bmNBJyxcbiAgJ2ZlRnVuY0InLFxuICAnZmVGdW5jRycsXG4gICdmZUZ1bmNSJyxcbiAgJ2ZlR2F1c3NpYW5CbHVyJyxcbiAgJ2ZlSW1hZ2UnLFxuICAnZmVNZXJnZScsXG4gICdmZU1lcmdlTm9kZScsXG4gICdmZU1vcnBob2xvZ3knLFxuICAnZmVPZmZzZXQnLFxuICAnZmVQb2ludExpZ2h0JyxcbiAgJ2ZlU3BlY3VsYXJMaWdodGluZycsXG4gICdmZVNwb3RMaWdodCcsXG4gICdmZVRpbGUnLFxuICAnZmVUdXJidWxlbmNlJyxcbl0pO1xuXG4vLyBMaXN0IG9mIFNWRyBlbGVtZW50cyB0aGF0IGFyZSBkaXNhbGxvd2VkIGJ5IGRlZmF1bHQuXG4vLyBXZSBzdGlsbCBuZWVkIHRvIGtub3cgdGhlbSBzbyB0aGF0IHdlIGNhbiBkbyBuYW1lc3BhY2Vcbi8vIGNoZWNrcyBwcm9wZXJseSBpbiBjYXNlIG9uZSB3YW50cyB0byBhZGQgdGhlbSB0b1xuLy8gYWxsb3ctbGlzdC5cbmV4cG9ydCBjb25zdCBzdmdEaXNhbGxvd2VkID0gZnJlZXplKFtcbiAgJ2FuaW1hdGUnLFxuICAnY29sb3ItcHJvZmlsZScsXG4gICdjdXJzb3InLFxuICAnZGlzY2FyZCcsXG4gICdmZWRyb3BzaGFkb3cnLFxuICAnZm9udC1mYWNlJyxcbiAgJ2ZvbnQtZmFjZS1mb3JtYXQnLFxuICAnZm9udC1mYWNlLW5hbWUnLFxuICAnZm9udC1mYWNlLXNyYycsXG4gICdmb250LWZhY2UtdXJpJyxcbiAgJ2ZvcmVpZ25vYmplY3QnLFxuICAnaGF0Y2gnLFxuICAnaGF0Y2hwYXRoJyxcbiAgJ21lc2gnLFxuICAnbWVzaGdyYWRpZW50JyxcbiAgJ21lc2hwYXRjaCcsXG4gICdtZXNocm93JyxcbiAgJ21pc3NpbmctZ2x5cGgnLFxuICAnc2NyaXB0JyxcbiAgJ3NldCcsXG4gICdzb2xpZGNvbG9yJyxcbiAgJ3Vua25vd24nLFxuICAndXNlJyxcbl0pO1xuXG5leHBvcnQgY29uc3QgbWF0aE1sID0gZnJlZXplKFtcbiAgJ21hdGgnLFxuICAnbWVuY2xvc2UnLFxuICAnbWVycm9yJyxcbiAgJ21mZW5jZWQnLFxuICAnbWZyYWMnLFxuICAnbWdseXBoJyxcbiAgJ21pJyxcbiAgJ21sYWJlbGVkdHInLFxuICAnbW11bHRpc2NyaXB0cycsXG4gICdtbicsXG4gICdtbycsXG4gICdtb3ZlcicsXG4gICdtcGFkZGVkJyxcbiAgJ21waGFudG9tJyxcbiAgJ21yb290JyxcbiAgJ21yb3cnLFxuICAnbXMnLFxuICAnbXNwYWNlJyxcbiAgJ21zcXJ0JyxcbiAgJ21zdHlsZScsXG4gICdtc3ViJyxcbiAgJ21zdXAnLFxuICAnbXN1YnN1cCcsXG4gICdtdGFibGUnLFxuICAnbXRkJyxcbiAgJ210ZXh0JyxcbiAgJ210cicsXG4gICdtdW5kZXInLFxuICAnbXVuZGVyb3ZlcicsXG5dKTtcblxuLy8gU2ltaWxhcmx5IHRvIFNWRywgd2Ugd2FudCB0byBrbm93IGFsbCBNYXRoTUwgZWxlbWVudHMsXG4vLyBldmVuIHRob3NlIHRoYXQgd2UgZGlzYWxsb3cgYnkgZGVmYXVsdC5cbmV4cG9ydCBjb25zdCBtYXRoTWxEaXNhbGxvd2VkID0gZnJlZXplKFtcbiAgJ21hY3Rpb24nLFxuICAnbWFsaWduZ3JvdXAnLFxuICAnbWFsaWdubWFyaycsXG4gICdtbG9uZ2RpdicsXG4gICdtc2NhcnJpZXMnLFxuICAnbXNjYXJyeScsXG4gICdtc2dyb3VwJyxcbiAgJ21zdGFjaycsXG4gICdtc2xpbmUnLFxuICAnbXNyb3cnLFxuICAnc2VtYW50aWNzJyxcbiAgJ2Fubm90YXRpb24nLFxuICAnYW5ub3RhdGlvbi14bWwnLFxuICAnbXByZXNjcmlwdHMnLFxuICAnbm9uZScsXG5dKTtcblxuZXhwb3J0IGNvbnN0IHRleHQgPSBmcmVlemUoWycjdGV4dCddKTtcbiIsICJpbXBvcnQgeyBmcmVlemUgfSBmcm9tICcuL3V0aWxzLmpzJztcblxuZXhwb3J0IGNvbnN0IGh0bWwgPSBmcmVlemUoW1xuICAnYWNjZXB0JyxcbiAgJ2FjdGlvbicsXG4gICdhbGlnbicsXG4gICdhbHQnLFxuICAnYXV0b2NhcGl0YWxpemUnLFxuICAnYXV0b2NvbXBsZXRlJyxcbiAgJ2F1dG9waWN0dXJlaW5waWN0dXJlJyxcbiAgJ2F1dG9wbGF5JyxcbiAgJ2JhY2tncm91bmQnLFxuICAnYmdjb2xvcicsXG4gICdib3JkZXInLFxuICAnY2FwdHVyZScsXG4gICdjZWxscGFkZGluZycsXG4gICdjZWxsc3BhY2luZycsXG4gICdjaGVja2VkJyxcbiAgJ2NpdGUnLFxuICAnY2xhc3MnLFxuICAnY2xlYXInLFxuICAnY29sb3InLFxuICAnY29scycsXG4gICdjb2xzcGFuJyxcbiAgJ2NvbnRyb2xzJyxcbiAgJ2NvbnRyb2xzbGlzdCcsXG4gICdjb29yZHMnLFxuICAnY3Jvc3NvcmlnaW4nLFxuICAnZGF0ZXRpbWUnLFxuICAnZGVjb2RpbmcnLFxuICAnZGVmYXVsdCcsXG4gICdkaXInLFxuICAnZGlzYWJsZWQnLFxuICAnZGlzYWJsZXBpY3R1cmVpbnBpY3R1cmUnLFxuICAnZGlzYWJsZXJlbW90ZXBsYXliYWNrJyxcbiAgJ2Rvd25sb2FkJyxcbiAgJ2RyYWdnYWJsZScsXG4gICdlbmN0eXBlJyxcbiAgJ2VudGVya2V5aGludCcsXG4gICdmYWNlJyxcbiAgJ2ZvcicsXG4gICdoZWFkZXJzJyxcbiAgJ2hlaWdodCcsXG4gICdoaWRkZW4nLFxuICAnaGlnaCcsXG4gICdocmVmJyxcbiAgJ2hyZWZsYW5nJyxcbiAgJ2lkJyxcbiAgJ2lucHV0bW9kZScsXG4gICdpbnRlZ3JpdHknLFxuICAnaXNtYXAnLFxuICAna2luZCcsXG4gICdsYWJlbCcsXG4gICdsYW5nJyxcbiAgJ2xpc3QnLFxuICAnbG9hZGluZycsXG4gICdsb29wJyxcbiAgJ2xvdycsXG4gICdtYXgnLFxuICAnbWF4bGVuZ3RoJyxcbiAgJ21lZGlhJyxcbiAgJ21ldGhvZCcsXG4gICdtaW4nLFxuICAnbWlubGVuZ3RoJyxcbiAgJ211bHRpcGxlJyxcbiAgJ211dGVkJyxcbiAgJ25hbWUnLFxuICAnbm9uY2UnLFxuICAnbm9zaGFkZScsXG4gICdub3ZhbGlkYXRlJyxcbiAgJ25vd3JhcCcsXG4gICdvcGVuJyxcbiAgJ29wdGltdW0nLFxuICAncGF0dGVybicsXG4gICdwbGFjZWhvbGRlcicsXG4gICdwbGF5c2lubGluZScsXG4gICdwb3N0ZXInLFxuICAncHJlbG9hZCcsXG4gICdwdWJkYXRlJyxcbiAgJ3JhZGlvZ3JvdXAnLFxuICAncmVhZG9ubHknLFxuICAncmVsJyxcbiAgJ3JlcXVpcmVkJyxcbiAgJ3JldicsXG4gICdyZXZlcnNlZCcsXG4gICdyb2xlJyxcbiAgJ3Jvd3MnLFxuICAncm93c3BhbicsXG4gICdzcGVsbGNoZWNrJyxcbiAgJ3Njb3BlJyxcbiAgJ3NlbGVjdGVkJyxcbiAgJ3NoYXBlJyxcbiAgJ3NpemUnLFxuICAnc2l6ZXMnLFxuICAnc3BhbicsXG4gICdzcmNsYW5nJyxcbiAgJ3N0YXJ0JyxcbiAgJ3NyYycsXG4gICdzcmNzZXQnLFxuICAnc3RlcCcsXG4gICdzdHlsZScsXG4gICdzdW1tYXJ5JyxcbiAgJ3RhYmluZGV4JyxcbiAgJ3RpdGxlJyxcbiAgJ3RyYW5zbGF0ZScsXG4gICd0eXBlJyxcbiAgJ3VzZW1hcCcsXG4gICd2YWxpZ24nLFxuICAndmFsdWUnLFxuICAnd2lkdGgnLFxuICAneG1sbnMnLFxuICAnc2xvdCcsXG5dKTtcblxuZXhwb3J0IGNvbnN0IHN2ZyA9IGZyZWV6ZShbXG4gICdhY2NlbnQtaGVpZ2h0JyxcbiAgJ2FjY3VtdWxhdGUnLFxuICAnYWRkaXRpdmUnLFxuICAnYWxpZ25tZW50LWJhc2VsaW5lJyxcbiAgJ2FzY2VudCcsXG4gICdhdHRyaWJ1dGVuYW1lJyxcbiAgJ2F0dHJpYnV0ZXR5cGUnLFxuICAnYXppbXV0aCcsXG4gICdiYXNlZnJlcXVlbmN5JyxcbiAgJ2Jhc2VsaW5lLXNoaWZ0JyxcbiAgJ2JlZ2luJyxcbiAgJ2JpYXMnLFxuICAnYnknLFxuICAnY2xhc3MnLFxuICAnY2xpcCcsXG4gICdjbGlwcGF0aHVuaXRzJyxcbiAgJ2NsaXAtcGF0aCcsXG4gICdjbGlwLXJ1bGUnLFxuICAnY29sb3InLFxuICAnY29sb3ItaW50ZXJwb2xhdGlvbicsXG4gICdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLFxuICAnY29sb3ItcHJvZmlsZScsXG4gICdjb2xvci1yZW5kZXJpbmcnLFxuICAnY3gnLFxuICAnY3knLFxuICAnZCcsXG4gICdkeCcsXG4gICdkeScsXG4gICdkaWZmdXNlY29uc3RhbnQnLFxuICAnZGlyZWN0aW9uJyxcbiAgJ2Rpc3BsYXknLFxuICAnZGl2aXNvcicsXG4gICdkdXInLFxuICAnZWRnZW1vZGUnLFxuICAnZWxldmF0aW9uJyxcbiAgJ2VuZCcsXG4gICdmaWxsJyxcbiAgJ2ZpbGwtb3BhY2l0eScsXG4gICdmaWxsLXJ1bGUnLFxuICAnZmlsdGVyJyxcbiAgJ2ZpbHRlcnVuaXRzJyxcbiAgJ2Zsb29kLWNvbG9yJyxcbiAgJ2Zsb29kLW9wYWNpdHknLFxuICAnZm9udC1mYW1pbHknLFxuICAnZm9udC1zaXplJyxcbiAgJ2ZvbnQtc2l6ZS1hZGp1c3QnLFxuICAnZm9udC1zdHJldGNoJyxcbiAgJ2ZvbnQtc3R5bGUnLFxuICAnZm9udC12YXJpYW50JyxcbiAgJ2ZvbnQtd2VpZ2h0JyxcbiAgJ2Z4JyxcbiAgJ2Z5JyxcbiAgJ2cxJyxcbiAgJ2cyJyxcbiAgJ2dseXBoLW5hbWUnLFxuICAnZ2x5cGhyZWYnLFxuICAnZ3JhZGllbnR1bml0cycsXG4gICdncmFkaWVudHRyYW5zZm9ybScsXG4gICdoZWlnaHQnLFxuICAnaHJlZicsXG4gICdpZCcsXG4gICdpbWFnZS1yZW5kZXJpbmcnLFxuICAnaW4nLFxuICAnaW4yJyxcbiAgJ2snLFxuICAnazEnLFxuICAnazInLFxuICAnazMnLFxuICAnazQnLFxuICAna2VybmluZycsXG4gICdrZXlwb2ludHMnLFxuICAna2V5c3BsaW5lcycsXG4gICdrZXl0aW1lcycsXG4gICdsYW5nJyxcbiAgJ2xlbmd0aGFkanVzdCcsXG4gICdsZXR0ZXItc3BhY2luZycsXG4gICdrZXJuZWxtYXRyaXgnLFxuICAna2VybmVsdW5pdGxlbmd0aCcsXG4gICdsaWdodGluZy1jb2xvcicsXG4gICdsb2NhbCcsXG4gICdtYXJrZXItZW5kJyxcbiAgJ21hcmtlci1taWQnLFxuICAnbWFya2VyLXN0YXJ0JyxcbiAgJ21hcmtlcmhlaWdodCcsXG4gICdtYXJrZXJ1bml0cycsXG4gICdtYXJrZXJ3aWR0aCcsXG4gICdtYXNrY29udGVudHVuaXRzJyxcbiAgJ21hc2t1bml0cycsXG4gICdtYXgnLFxuICAnbWFzaycsXG4gICdtZWRpYScsXG4gICdtZXRob2QnLFxuICAnbW9kZScsXG4gICdtaW4nLFxuICAnbmFtZScsXG4gICdudW1vY3RhdmVzJyxcbiAgJ29mZnNldCcsXG4gICdvcGVyYXRvcicsXG4gICdvcGFjaXR5JyxcbiAgJ29yZGVyJyxcbiAgJ29yaWVudCcsXG4gICdvcmllbnRhdGlvbicsXG4gICdvcmlnaW4nLFxuICAnb3ZlcmZsb3cnLFxuICAncGFpbnQtb3JkZXInLFxuICAncGF0aCcsXG4gICdwYXRobGVuZ3RoJyxcbiAgJ3BhdHRlcm5jb250ZW50dW5pdHMnLFxuICAncGF0dGVybnRyYW5zZm9ybScsXG4gICdwYXR0ZXJudW5pdHMnLFxuICAncG9pbnRzJyxcbiAgJ3ByZXNlcnZlYWxwaGEnLFxuICAncHJlc2VydmVhc3BlY3RyYXRpbycsXG4gICdwcmltaXRpdmV1bml0cycsXG4gICdyJyxcbiAgJ3J4JyxcbiAgJ3J5JyxcbiAgJ3JhZGl1cycsXG4gICdyZWZ4JyxcbiAgJ3JlZnknLFxuICAncmVwZWF0Y291bnQnLFxuICAncmVwZWF0ZHVyJyxcbiAgJ3Jlc3RhcnQnLFxuICAncmVzdWx0JyxcbiAgJ3JvdGF0ZScsXG4gICdzY2FsZScsXG4gICdzZWVkJyxcbiAgJ3NoYXBlLXJlbmRlcmluZycsXG4gICdzcGVjdWxhcmNvbnN0YW50JyxcbiAgJ3NwZWN1bGFyZXhwb25lbnQnLFxuICAnc3ByZWFkbWV0aG9kJyxcbiAgJ3N0YXJ0b2Zmc2V0JyxcbiAgJ3N0ZGRldmlhdGlvbicsXG4gICdzdGl0Y2h0aWxlcycsXG4gICdzdG9wLWNvbG9yJyxcbiAgJ3N0b3Atb3BhY2l0eScsXG4gICdzdHJva2UtZGFzaGFycmF5JyxcbiAgJ3N0cm9rZS1kYXNob2Zmc2V0JyxcbiAgJ3N0cm9rZS1saW5lY2FwJyxcbiAgJ3N0cm9rZS1saW5lam9pbicsXG4gICdzdHJva2UtbWl0ZXJsaW1pdCcsXG4gICdzdHJva2Utb3BhY2l0eScsXG4gICdzdHJva2UnLFxuICAnc3Ryb2tlLXdpZHRoJyxcbiAgJ3N0eWxlJyxcbiAgJ3N1cmZhY2VzY2FsZScsXG4gICdzeXN0ZW1sYW5ndWFnZScsXG4gICd0YWJpbmRleCcsXG4gICd0YXJnZXR4JyxcbiAgJ3RhcmdldHknLFxuICAndHJhbnNmb3JtJyxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4nLFxuICAndGV4dC1hbmNob3InLFxuICAndGV4dC1kZWNvcmF0aW9uJyxcbiAgJ3RleHQtcmVuZGVyaW5nJyxcbiAgJ3RleHRsZW5ndGgnLFxuICAndHlwZScsXG4gICd1MScsXG4gICd1MicsXG4gICd1bmljb2RlJyxcbiAgJ3ZhbHVlcycsXG4gICd2aWV3Ym94JyxcbiAgJ3Zpc2liaWxpdHknLFxuICAndmVyc2lvbicsXG4gICd2ZXJ0LWFkdi15JyxcbiAgJ3ZlcnQtb3JpZ2luLXgnLFxuICAndmVydC1vcmlnaW4teScsXG4gICd3aWR0aCcsXG4gICd3b3JkLXNwYWNpbmcnLFxuICAnd3JhcCcsXG4gICd3cml0aW5nLW1vZGUnLFxuICAneGNoYW5uZWxzZWxlY3RvcicsXG4gICd5Y2hhbm5lbHNlbGVjdG9yJyxcbiAgJ3gnLFxuICAneDEnLFxuICAneDInLFxuICAneG1sbnMnLFxuICAneScsXG4gICd5MScsXG4gICd5MicsXG4gICd6JyxcbiAgJ3pvb21hbmRwYW4nLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBtYXRoTWwgPSBmcmVlemUoW1xuICAnYWNjZW50JyxcbiAgJ2FjY2VudHVuZGVyJyxcbiAgJ2FsaWduJyxcbiAgJ2JldmVsbGVkJyxcbiAgJ2Nsb3NlJyxcbiAgJ2NvbHVtbnNhbGlnbicsXG4gICdjb2x1bW5saW5lcycsXG4gICdjb2x1bW5zcGFuJyxcbiAgJ2Rlbm9tYWxpZ24nLFxuICAnZGVwdGgnLFxuICAnZGlyJyxcbiAgJ2Rpc3BsYXknLFxuICAnZGlzcGxheXN0eWxlJyxcbiAgJ2VuY29kaW5nJyxcbiAgJ2ZlbmNlJyxcbiAgJ2ZyYW1lJyxcbiAgJ2hlaWdodCcsXG4gICdocmVmJyxcbiAgJ2lkJyxcbiAgJ2xhcmdlb3AnLFxuICAnbGVuZ3RoJyxcbiAgJ2xpbmV0aGlja25lc3MnLFxuICAnbHNwYWNlJyxcbiAgJ2xxdW90ZScsXG4gICdtYXRoYmFja2dyb3VuZCcsXG4gICdtYXRoY29sb3InLFxuICAnbWF0aHNpemUnLFxuICAnbWF0aHZhcmlhbnQnLFxuICAnbWF4c2l6ZScsXG4gICdtaW5zaXplJyxcbiAgJ21vdmFibGVsaW1pdHMnLFxuICAnbm90YXRpb24nLFxuICAnbnVtYWxpZ24nLFxuICAnb3BlbicsXG4gICdyb3dhbGlnbicsXG4gICdyb3dsaW5lcycsXG4gICdyb3dzcGFjaW5nJyxcbiAgJ3Jvd3NwYW4nLFxuICAncnNwYWNlJyxcbiAgJ3JxdW90ZScsXG4gICdzY3JpcHRsZXZlbCcsXG4gICdzY3JpcHRtaW5zaXplJyxcbiAgJ3NjcmlwdHNpemVtdWx0aXBsaWVyJyxcbiAgJ3NlbGVjdGlvbicsXG4gICdzZXBhcmF0b3InLFxuICAnc2VwYXJhdG9ycycsXG4gICdzdHJldGNoeScsXG4gICdzdWJzY3JpcHRzaGlmdCcsXG4gICdzdXBzY3JpcHRzaGlmdCcsXG4gICdzeW1tZXRyaWMnLFxuICAndm9mZnNldCcsXG4gICd3aWR0aCcsXG4gICd4bWxucycsXG5dKTtcblxuZXhwb3J0IGNvbnN0IHhtbCA9IGZyZWV6ZShbXG4gICd4bGluazpocmVmJyxcbiAgJ3htbDppZCcsXG4gICd4bGluazp0aXRsZScsXG4gICd4bWw6c3BhY2UnLFxuICAneG1sbnM6eGxpbmsnLFxuXSk7XG4iLCAiaW1wb3J0IHsgc2VhbCB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9iZXR0ZXItcmVnZXhcbmV4cG9ydCBjb25zdCBNVVNUQUNIRV9FWFBSID0gc2VhbCgvXFx7XFx7W1xcc1xcU10qfFtcXHNcXFNdKlxcfVxcfS9nbSk7IC8vIFNwZWNpZnkgdGVtcGxhdGUgZGV0ZWN0aW9uIHJlZ2V4IGZvciBTQUZFX0ZPUl9URU1QTEFURVMgbW9kZVxuZXhwb3J0IGNvbnN0IEVSQl9FWFBSID0gc2VhbCgvPCVbXFxzXFxTXSp8W1xcc1xcU10qJT4vZ20pO1xuZXhwb3J0IGNvbnN0IERBVEFfQVRUUiA9IHNlYWwoL15kYXRhLVtcXC1cXHcuXFx1MDBCNy1cXHVGRkZGXS8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5leHBvcnQgY29uc3QgQVJJQV9BVFRSID0gc2VhbCgvXmFyaWEtW1xcLVxcd10rJC8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5leHBvcnQgY29uc3QgSVNfQUxMT1dFRF9VUkkgPSBzZWFsKFxuICAvXig/Oig/Oig/OmZ8aHQpdHBzP3xtYWlsdG98dGVsfGNhbGx0b3xjaWR8eG1wcCk6fFteYS16XXxbYS16Ky5cXC1dKyg/OlteYS16Ky5cXC06XXwkKSkvaSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4pO1xuZXhwb3J0IGNvbnN0IElTX1NDUklQVF9PUl9EQVRBID0gc2VhbCgvXig/OlxcdytzY3JpcHR8ZGF0YSk6L2kpO1xuZXhwb3J0IGNvbnN0IEFUVFJfV0hJVEVTUEFDRSA9IHNlYWwoXG4gIC9bXFx1MDAwMC1cXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUxODBFXFx1MjAwMC1cXHUyMDI5XFx1MjA1RlxcdTMwMDBdL2cgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb250cm9sLXJlZ2V4XG4pO1xuZXhwb3J0IGNvbnN0IERPQ1RZUEVfTkFNRSA9IHNlYWwoL15odG1sJC9pKTtcbiIsICJpbXBvcnQgKiBhcyBUQUdTIGZyb20gJy4vdGFncy5qcyc7XG5pbXBvcnQgKiBhcyBBVFRSUyBmcm9tICcuL2F0dHJzLmpzJztcbmltcG9ydCAqIGFzIEVYUFJFU1NJT05TIGZyb20gJy4vcmVnZXhwLmpzJztcbmltcG9ydCB7XG4gIGFkZFRvU2V0LFxuICBjbG9uZSxcbiAgZnJlZXplLFxuICBhcnJheUZvckVhY2gsXG4gIGFycmF5UG9wLFxuICBhcnJheVB1c2gsXG4gIHN0cmluZ01hdGNoLFxuICBzdHJpbmdSZXBsYWNlLFxuICBzdHJpbmdUb0xvd2VyQ2FzZSxcbiAgc3RyaW5nSW5kZXhPZixcbiAgc3RyaW5nVHJpbSxcbiAgcmVnRXhwVGVzdCxcbiAgdHlwZUVycm9yQ3JlYXRlLFxuICBsb29rdXBHZXR0ZXIsXG59IGZyb20gJy4vdXRpbHMuanMnO1xuXG5jb25zdCBnZXRHbG9iYWwgPSAoKSA9PiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogd2luZG93KTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbm8tb3AgcG9saWN5IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAqIERvbid0IGV4cG9ydCB0aGlzIGZ1bmN0aW9uIG91dHNpZGUgdGhpcyBtb2R1bGUhXG4gKiBAcGFyYW0gez9UcnVzdGVkVHlwZVBvbGljeUZhY3Rvcnl9IHRydXN0ZWRUeXBlcyBUaGUgcG9saWN5IGZhY3RvcnkuXG4gKiBAcGFyYW0ge0RvY3VtZW50fSBkb2N1bWVudCBUaGUgZG9jdW1lbnQgb2JqZWN0ICh0byBkZXRlcm1pbmUgcG9saWN5IG5hbWUgc3VmZml4KVxuICogQHJldHVybiB7P1RydXN0ZWRUeXBlUG9saWN5fSBUaGUgcG9saWN5IGNyZWF0ZWQgKG9yIG51bGwsIGlmIFRydXN0ZWQgVHlwZXNcbiAqIGFyZSBub3Qgc3VwcG9ydGVkKS5cbiAqL1xuY29uc3QgX2NyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSA9IGZ1bmN0aW9uICh0cnVzdGVkVHlwZXMsIGRvY3VtZW50KSB7XG4gIGlmIChcbiAgICB0eXBlb2YgdHJ1c3RlZFR5cGVzICE9PSAnb2JqZWN0JyB8fFxuICAgIHR5cGVvZiB0cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5ICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsb3cgdGhlIGNhbGxlcnMgdG8gY29udHJvbCB0aGUgdW5pcXVlIHBvbGljeSBuYW1lXG4gIC8vIGJ5IGFkZGluZyBhIGRhdGEtdHQtcG9saWN5LXN1ZmZpeCB0byB0aGUgc2NyaXB0IGVsZW1lbnQgd2l0aCB0aGUgRE9NUHVyaWZ5LlxuICAvLyBQb2xpY3kgY3JlYXRpb24gd2l0aCBkdXBsaWNhdGUgbmFtZXMgdGhyb3dzIGluIFRydXN0ZWQgVHlwZXMuXG4gIGxldCBzdWZmaXggPSBudWxsO1xuICBjb25zdCBBVFRSX05BTUUgPSAnZGF0YS10dC1wb2xpY3ktc3VmZml4JztcbiAgaWYgKFxuICAgIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiZcbiAgICBkb2N1bWVudC5jdXJyZW50U2NyaXB0Lmhhc0F0dHJpYnV0ZShBVFRSX05BTUUpXG4gICkge1xuICAgIHN1ZmZpeCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSk7XG4gIH1cblxuICBjb25zdCBwb2xpY3lOYW1lID0gJ2RvbXB1cmlmeScgKyAoc3VmZml4ID8gJyMnICsgc3VmZml4IDogJycpO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIHRydXN0ZWRUeXBlcy5jcmVhdGVQb2xpY3kocG9saWN5TmFtZSwge1xuICAgICAgY3JlYXRlSFRNTChodG1sKSB7XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge1xuICAgIC8vIFBvbGljeSBjcmVhdGlvbiBmYWlsZWQgKG1vc3QgbGlrZWx5IGFub3RoZXIgRE9NUHVyaWZ5IHNjcmlwdCBoYXNcbiAgICAvLyBhbHJlYWR5IHJ1bikuIFNraXAgY3JlYXRpbmcgdGhlIHBvbGljeSwgYXMgdGhpcyB3aWxsIG9ubHkgY2F1c2UgZXJyb3JzXG4gICAgLy8gaWYgVFQgYXJlIGVuZm9yY2VkLlxuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdUcnVzdGVkVHlwZXMgcG9saWN5ICcgKyBwb2xpY3lOYW1lICsgJyBjb3VsZCBub3QgYmUgY3JlYXRlZC4nXG4gICAgKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlRE9NUHVyaWZ5KHdpbmRvdyA9IGdldEdsb2JhbCgpKSB7XG4gIGNvbnN0IERPTVB1cmlmeSA9IChyb290KSA9PiBjcmVhdGVET01QdXJpZnkocm9vdCk7XG5cbiAgLyoqXG4gICAqIFZlcnNpb24gbGFiZWwsIGV4cG9zZWQgZm9yIGVhc2llciBjaGVja3NcbiAgICogaWYgRE9NUHVyaWZ5IGlzIHVwIHRvIGRhdGUgb3Igbm90XG4gICAqL1xuICBET01QdXJpZnkudmVyc2lvbiA9IFZFUlNJT047XG5cbiAgLyoqXG4gICAqIEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgRE9NUHVyaWZ5IHJlbW92ZWQgZHVyaW5nIHNhbml0YXRpb24uXG4gICAqIEVtcHR5IGlmIG5vdGhpbmcgd2FzIHJlbW92ZWQuXG4gICAqL1xuICBET01QdXJpZnkucmVtb3ZlZCA9IFtdO1xuXG4gIGlmICghd2luZG93IHx8ICF3aW5kb3cuZG9jdW1lbnQgfHwgd2luZG93LmRvY3VtZW50Lm5vZGVUeXBlICE9PSA5KSB7XG4gICAgLy8gTm90IHJ1bm5pbmcgaW4gYSBicm93c2VyLCBwcm92aWRlIGEgZmFjdG9yeSBmdW5jdGlvblxuICAgIC8vIHNvIHRoYXQgeW91IGNhbiBwYXNzIHlvdXIgb3duIFdpbmRvd1xuICAgIERPTVB1cmlmeS5pc1N1cHBvcnRlZCA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIERPTVB1cmlmeTtcbiAgfVxuXG4gIGNvbnN0IG9yaWdpbmFsRG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbiAgbGV0IHsgZG9jdW1lbnQgfSA9IHdpbmRvdztcbiAgY29uc3Qge1xuICAgIERvY3VtZW50RnJhZ21lbnQsXG4gICAgSFRNTFRlbXBsYXRlRWxlbWVudCxcbiAgICBOb2RlLFxuICAgIEVsZW1lbnQsXG4gICAgTm9kZUZpbHRlcixcbiAgICBOYW1lZE5vZGVNYXAgPSB3aW5kb3cuTmFtZWROb2RlTWFwIHx8IHdpbmRvdy5Nb3pOYW1lZEF0dHJNYXAsXG4gICAgSFRNTEZvcm1FbGVtZW50LFxuICAgIERPTVBhcnNlcixcbiAgICB0cnVzdGVkVHlwZXMsXG4gIH0gPSB3aW5kb3c7XG5cbiAgY29uc3QgRWxlbWVudFByb3RvdHlwZSA9IEVsZW1lbnQucHJvdG90eXBlO1xuXG4gIGNvbnN0IGNsb25lTm9kZSA9IGxvb2t1cEdldHRlcihFbGVtZW50UHJvdG90eXBlLCAnY2xvbmVOb2RlJyk7XG4gIGNvbnN0IGdldE5leHRTaWJsaW5nID0gbG9va3VwR2V0dGVyKEVsZW1lbnRQcm90b3R5cGUsICduZXh0U2libGluZycpO1xuICBjb25zdCBnZXRDaGlsZE5vZGVzID0gbG9va3VwR2V0dGVyKEVsZW1lbnRQcm90b3R5cGUsICdjaGlsZE5vZGVzJyk7XG4gIGNvbnN0IGdldFBhcmVudE5vZGUgPSBsb29rdXBHZXR0ZXIoRWxlbWVudFByb3RvdHlwZSwgJ3BhcmVudE5vZGUnKTtcblxuICAvLyBBcyBwZXIgaXNzdWUgIzQ3LCB0aGUgd2ViLWNvbXBvbmVudHMgcmVnaXN0cnkgaXMgaW5oZXJpdGVkIGJ5IGFcbiAgLy8gbmV3IGRvY3VtZW50IGNyZWF0ZWQgdmlhIGNyZWF0ZUhUTUxEb2N1bWVudC4gQXMgcGVyIHRoZSBzcGVjXG4gIC8vIChodHRwOi8vdzNjLmdpdGh1Yi5pby93ZWJjb21wb25lbnRzL3NwZWMvY3VzdG9tLyNjcmVhdGluZy1hbmQtcGFzc2luZy1yZWdpc3RyaWVzKVxuICAvLyBhIG5ldyBlbXB0eSByZWdpc3RyeSBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSB0ZW1wbGF0ZSBjb250ZW50cyBvd25lclxuICAvLyBkb2N1bWVudCwgc28gd2UgdXNlIHRoYXQgYXMgb3VyIHBhcmVudCBkb2N1bWVudCB0byBlbnN1cmUgbm90aGluZ1xuICAvLyBpcyBpbmhlcml0ZWQuXG4gIGlmICh0eXBlb2YgSFRNTFRlbXBsYXRlRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICBpZiAodGVtcGxhdGUuY29udGVudCAmJiB0ZW1wbGF0ZS5jb250ZW50Lm93bmVyRG9jdW1lbnQpIHtcbiAgICAgIGRvY3VtZW50ID0gdGVtcGxhdGUuY29udGVudC5vd25lckRvY3VtZW50O1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHRydXN0ZWRUeXBlc1BvbGljeSA9IF9jcmVhdGVUcnVzdGVkVHlwZXNQb2xpY3koXG4gICAgdHJ1c3RlZFR5cGVzLFxuICAgIG9yaWdpbmFsRG9jdW1lbnRcbiAgKTtcbiAgY29uc3QgZW1wdHlIVE1MID0gdHJ1c3RlZFR5cGVzUG9saWN5ID8gdHJ1c3RlZFR5cGVzUG9saWN5LmNyZWF0ZUhUTUwoJycpIDogJyc7XG5cbiAgY29uc3Qge1xuICAgIGltcGxlbWVudGF0aW9uLFxuICAgIGNyZWF0ZU5vZGVJdGVyYXRvcixcbiAgICBjcmVhdGVEb2N1bWVudEZyYWdtZW50LFxuICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lLFxuICB9ID0gZG9jdW1lbnQ7XG4gIGNvbnN0IHsgaW1wb3J0Tm9kZSB9ID0gb3JpZ2luYWxEb2N1bWVudDtcblxuICBsZXQgZG9jdW1lbnRNb2RlID0ge307XG4gIHRyeSB7XG4gICAgZG9jdW1lbnRNb2RlID0gY2xvbmUoZG9jdW1lbnQpLmRvY3VtZW50TW9kZSA/IGRvY3VtZW50LmRvY3VtZW50TW9kZSA6IHt9O1xuICB9IGNhdGNoIChfKSB7fVxuXG4gIGxldCBob29rcyA9IHt9O1xuXG4gIC8qKlxuICAgKiBFeHBvc2Ugd2hldGhlciB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgcnVubmluZyB0aGUgZnVsbCBET01QdXJpZnkuXG4gICAqL1xuICBET01QdXJpZnkuaXNTdXBwb3J0ZWQgPVxuICAgIHR5cGVvZiBnZXRQYXJlbnROb2RlID09PSAnZnVuY3Rpb24nICYmXG4gICAgaW1wbGVtZW50YXRpb24gJiZcbiAgICB0eXBlb2YgaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIGRvY3VtZW50TW9kZSAhPT0gOTtcblxuICBjb25zdCB7XG4gICAgTVVTVEFDSEVfRVhQUixcbiAgICBFUkJfRVhQUixcbiAgICBEQVRBX0FUVFIsXG4gICAgQVJJQV9BVFRSLFxuICAgIElTX1NDUklQVF9PUl9EQVRBLFxuICAgIEFUVFJfV0hJVEVTUEFDRSxcbiAgfSA9IEVYUFJFU1NJT05TO1xuXG4gIGxldCB7IElTX0FMTE9XRURfVVJJIH0gPSBFWFBSRVNTSU9OUztcblxuICAvKipcbiAgICogV2UgY29uc2lkZXIgdGhlIGVsZW1lbnRzIGFuZCBhdHRyaWJ1dGVzIGJlbG93IHRvIGJlIHNhZmUuIElkZWFsbHlcbiAgICogZG9uJ3QgYWRkIGFueSBuZXcgb25lcyBidXQgZmVlbCBmcmVlIHRvIHJlbW92ZSB1bndhbnRlZCBvbmVzLlxuICAgKi9cblxuICAvKiBhbGxvd2VkIGVsZW1lbnQgbmFtZXMgKi9cbiAgbGV0IEFMTE9XRURfVEFHUyA9IG51bGw7XG4gIGNvbnN0IERFRkFVTFRfQUxMT1dFRF9UQUdTID0gYWRkVG9TZXQoe30sIFtcbiAgICAuLi5UQUdTLmh0bWwsXG4gICAgLi4uVEFHUy5zdmcsXG4gICAgLi4uVEFHUy5zdmdGaWx0ZXJzLFxuICAgIC4uLlRBR1MubWF0aE1sLFxuICAgIC4uLlRBR1MudGV4dCxcbiAgXSk7XG5cbiAgLyogQWxsb3dlZCBhdHRyaWJ1dGUgbmFtZXMgKi9cbiAgbGV0IEFMTE9XRURfQVRUUiA9IG51bGw7XG4gIGNvbnN0IERFRkFVTFRfQUxMT1dFRF9BVFRSID0gYWRkVG9TZXQoe30sIFtcbiAgICAuLi5BVFRSUy5odG1sLFxuICAgIC4uLkFUVFJTLnN2ZyxcbiAgICAuLi5BVFRSUy5tYXRoTWwsXG4gICAgLi4uQVRUUlMueG1sLFxuICBdKTtcblxuICAvKlxuICAgKiBDb25maWd1cmUgaG93IERPTVBVcmlmeSBzaG91bGQgaGFuZGxlIGN1c3RvbSBlbGVtZW50cyBhbmQgdGhlaXIgYXR0cmlidXRlcyBhcyB3ZWxsIGFzIGN1c3RvbWl6ZWQgYnVpbHQtaW4gZWxlbWVudHMuXG4gICAqIEBwcm9wZXJ0eSB7UmVnRXhwfEZ1bmN0aW9ufG51bGx9IHRhZ05hbWVDaGVjayBvbmUgb2YgW251bGwsIHJlZ2V4UGF0dGVybiwgcHJlZGljYXRlXS4gRGVmYXVsdDogYG51bGxgIChkaXNhbGxvdyBhbnkgY3VzdG9tIGVsZW1lbnRzKVxuICAgKiBAcHJvcGVydHkge1JlZ0V4cHxGdW5jdGlvbnxudWxsfSBhdHRyaWJ1dGVOYW1lQ2hlY2sgb25lIG9mIFtudWxsLCByZWdleFBhdHRlcm4sIHByZWRpY2F0ZV0uIERlZmF1bHQ6IGBudWxsYCAoZGlzYWxsb3cgYW55IGF0dHJpYnV0ZXMgbm90IG9uIHRoZSBhbGxvdyBsaXN0KVxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IGFsbG93Q3VzdG9taXplZEJ1aWx0SW5FbGVtZW50cyBhbGxvdyBjdXN0b20gZWxlbWVudHMgZGVyaXZlZCBmcm9tIGJ1aWx0LWlucyBpZiB0aGV5IHBhc3MgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrLiBEZWZhdWx0OiBgZmFsc2VgLlxuICAgKi9cbiAgY29uc3QgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcgPSBPYmplY3Quc2VhbChcbiAgICBPYmplY3QuY3JlYXRlKG51bGwsIHtcbiAgICAgIHRhZ05hbWVDaGVjazoge1xuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlTmFtZUNoZWNrOiB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIH0sXG4gICAgICBhbGxvd0N1c3RvbWl6ZWRCdWlsdEluRWxlbWVudHM6IHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSlcbiAgKTtcblxuICAvKiBFeHBsaWNpdGx5IGZvcmJpZGRlbiB0YWdzIChvdmVycmlkZXMgQUxMT1dFRF9UQUdTL0FERF9UQUdTKSAqL1xuICBsZXQgRk9SQklEX1RBR1MgPSBudWxsO1xuXG4gIC8qIEV4cGxpY2l0bHkgZm9yYmlkZGVuIGF0dHJpYnV0ZXMgKG92ZXJyaWRlcyBBTExPV0VEX0FUVFIvQUREX0FUVFIpICovXG4gIGxldCBGT1JCSURfQVRUUiA9IG51bGw7XG5cbiAgLyogRGVjaWRlIGlmIEFSSUEgYXR0cmlidXRlcyBhcmUgb2theSAqL1xuICBsZXQgQUxMT1dfQVJJQV9BVFRSID0gdHJ1ZTtcblxuICAvKiBEZWNpZGUgaWYgY3VzdG9tIGRhdGEgYXR0cmlidXRlcyBhcmUgb2theSAqL1xuICBsZXQgQUxMT1dfREFUQV9BVFRSID0gdHJ1ZTtcblxuICAvKiBEZWNpZGUgaWYgdW5rbm93biBwcm90b2NvbHMgYXJlIG9rYXkgKi9cbiAgbGV0IEFMTE9XX1VOS05PV05fUFJPVE9DT0xTID0gZmFsc2U7XG5cbiAgLyogT3V0cHV0IHNob3VsZCBiZSBzYWZlIGZvciBjb21tb24gdGVtcGxhdGUgZW5naW5lcy5cbiAgICogVGhpcyBtZWFucywgRE9NUHVyaWZ5IHJlbW92ZXMgZGF0YSBhdHRyaWJ1dGVzLCBtdXN0YWNoZXMgYW5kIEVSQlxuICAgKi9cbiAgbGV0IFNBRkVfRk9SX1RFTVBMQVRFUyA9IGZhbHNlO1xuXG4gIC8qIERlY2lkZSBpZiBkb2N1bWVudCB3aXRoIDxodG1sPi4uLiBzaG91bGQgYmUgcmV0dXJuZWQgKi9cbiAgbGV0IFdIT0xFX0RPQ1VNRU5UID0gZmFsc2U7XG5cbiAgLyogVHJhY2sgd2hldGhlciBjb25maWcgaXMgYWxyZWFkeSBzZXQgb24gdGhpcyBpbnN0YW5jZSBvZiBET01QdXJpZnkuICovXG4gIGxldCBTRVRfQ09ORklHID0gZmFsc2U7XG5cbiAgLyogRGVjaWRlIGlmIGFsbCBlbGVtZW50cyAoZS5nLiBzdHlsZSwgc2NyaXB0KSBtdXN0IGJlIGNoaWxkcmVuIG9mXG4gICAqIGRvY3VtZW50LmJvZHkuIEJ5IGRlZmF1bHQsIGJyb3dzZXJzIG1pZ2h0IG1vdmUgdGhlbSB0byBkb2N1bWVudC5oZWFkICovXG4gIGxldCBGT1JDRV9CT0RZID0gZmFsc2U7XG5cbiAgLyogRGVjaWRlIGlmIGEgRE9NIGBIVE1MQm9keUVsZW1lbnRgIHNob3VsZCBiZSByZXR1cm5lZCwgaW5zdGVhZCBvZiBhIGh0bWxcbiAgICogc3RyaW5nIChvciBhIFRydXN0ZWRIVE1MIG9iamVjdCBpZiBUcnVzdGVkIFR5cGVzIGFyZSBzdXBwb3J0ZWQpLlxuICAgKiBJZiBgV0hPTEVfRE9DVU1FTlRgIGlzIGVuYWJsZWQgYSBgSFRNTEh0bWxFbGVtZW50YCB3aWxsIGJlIHJldHVybmVkIGluc3RlYWRcbiAgICovXG4gIGxldCBSRVRVUk5fRE9NID0gZmFsc2U7XG5cbiAgLyogRGVjaWRlIGlmIGEgRE9NIGBEb2N1bWVudEZyYWdtZW50YCBzaG91bGQgYmUgcmV0dXJuZWQsIGluc3RlYWQgb2YgYSBodG1sXG4gICAqIHN0cmluZyAgKG9yIGEgVHJ1c3RlZEhUTUwgb2JqZWN0IGlmIFRydXN0ZWQgVHlwZXMgYXJlIHN1cHBvcnRlZCkgKi9cbiAgbGV0IFJFVFVSTl9ET01fRlJBR01FTlQgPSBmYWxzZTtcblxuICAvKiBUcnkgdG8gcmV0dXJuIGEgVHJ1c3RlZCBUeXBlIG9iamVjdCBpbnN0ZWFkIG9mIGEgc3RyaW5nLCByZXR1cm4gYSBzdHJpbmcgaW5cbiAgICogY2FzZSBUcnVzdGVkIFR5cGVzIGFyZSBub3Qgc3VwcG9ydGVkICAqL1xuICBsZXQgUkVUVVJOX1RSVVNURURfVFlQRSA9IGZhbHNlO1xuXG4gIC8qIE91dHB1dCBzaG91bGQgYmUgZnJlZSBmcm9tIERPTSBjbG9iYmVyaW5nIGF0dGFja3M/ICovXG4gIGxldCBTQU5JVElaRV9ET00gPSB0cnVlO1xuXG4gIC8qIEtlZXAgZWxlbWVudCBjb250ZW50IHdoZW4gcmVtb3ZpbmcgZWxlbWVudD8gKi9cbiAgbGV0IEtFRVBfQ09OVEVOVCA9IHRydWU7XG5cbiAgLyogSWYgYSBgTm9kZWAgaXMgcGFzc2VkIHRvIHNhbml0aXplKCksIHRoZW4gcGVyZm9ybXMgc2FuaXRpemF0aW9uIGluLXBsYWNlIGluc3RlYWRcbiAgICogb2YgaW1wb3J0aW5nIGl0IGludG8gYSBuZXcgRG9jdW1lbnQgYW5kIHJldHVybmluZyBhIHNhbml0aXplZCBjb3B5ICovXG4gIGxldCBJTl9QTEFDRSA9IGZhbHNlO1xuXG4gIC8qIEFsbG93IHVzYWdlIG9mIHByb2ZpbGVzIGxpa2UgaHRtbCwgc3ZnIGFuZCBtYXRoTWwgKi9cbiAgbGV0IFVTRV9QUk9GSUxFUyA9IHt9O1xuXG4gIC8qIFRhZ3MgdG8gaWdub3JlIGNvbnRlbnQgb2Ygd2hlbiBLRUVQX0NPTlRFTlQgaXMgdHJ1ZSAqL1xuICBsZXQgRk9SQklEX0NPTlRFTlRTID0gbnVsbDtcbiAgY29uc3QgREVGQVVMVF9GT1JCSURfQ09OVEVOVFMgPSBhZGRUb1NldCh7fSwgW1xuICAgICdhbm5vdGF0aW9uLXhtbCcsXG4gICAgJ2F1ZGlvJyxcbiAgICAnY29sZ3JvdXAnLFxuICAgICdkZXNjJyxcbiAgICAnZm9yZWlnbm9iamVjdCcsXG4gICAgJ2hlYWQnLFxuICAgICdpZnJhbWUnLFxuICAgICdtYXRoJyxcbiAgICAnbWknLFxuICAgICdtbicsXG4gICAgJ21vJyxcbiAgICAnbXMnLFxuICAgICdtdGV4dCcsXG4gICAgJ25vZW1iZWQnLFxuICAgICdub2ZyYW1lcycsXG4gICAgJ25vc2NyaXB0JyxcbiAgICAncGxhaW50ZXh0JyxcbiAgICAnc2NyaXB0JyxcbiAgICAnc3R5bGUnLFxuICAgICdzdmcnLFxuICAgICd0ZW1wbGF0ZScsXG4gICAgJ3RoZWFkJyxcbiAgICAndGl0bGUnLFxuICAgICd2aWRlbycsXG4gICAgJ3htcCcsXG4gIF0pO1xuXG4gIC8qIFRhZ3MgdGhhdCBhcmUgc2FmZSBmb3IgZGF0YTogVVJJcyAqL1xuICBsZXQgREFUQV9VUklfVEFHUyA9IG51bGw7XG4gIGNvbnN0IERFRkFVTFRfREFUQV9VUklfVEFHUyA9IGFkZFRvU2V0KHt9LCBbXG4gICAgJ2F1ZGlvJyxcbiAgICAndmlkZW8nLFxuICAgICdpbWcnLFxuICAgICdzb3VyY2UnLFxuICAgICdpbWFnZScsXG4gICAgJ3RyYWNrJyxcbiAgXSk7XG5cbiAgLyogQXR0cmlidXRlcyBzYWZlIGZvciB2YWx1ZXMgbGlrZSBcImphdmFzY3JpcHQ6XCIgKi9cbiAgbGV0IFVSSV9TQUZFX0FUVFJJQlVURVMgPSBudWxsO1xuICBjb25zdCBERUZBVUxUX1VSSV9TQUZFX0FUVFJJQlVURVMgPSBhZGRUb1NldCh7fSwgW1xuICAgICdhbHQnLFxuICAgICdjbGFzcycsXG4gICAgJ2ZvcicsXG4gICAgJ2lkJyxcbiAgICAnbGFiZWwnLFxuICAgICduYW1lJyxcbiAgICAncGF0dGVybicsXG4gICAgJ3BsYWNlaG9sZGVyJyxcbiAgICAncm9sZScsXG4gICAgJ3N1bW1hcnknLFxuICAgICd0aXRsZScsXG4gICAgJ3ZhbHVlJyxcbiAgICAnc3R5bGUnLFxuICAgICd4bWxucycsXG4gIF0pO1xuXG4gIGNvbnN0IE1BVEhNTF9OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCc7XG4gIGNvbnN0IFNWR19OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuICBjb25zdCBIVE1MX05BTUVTUEFDRSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJztcbiAgLyogRG9jdW1lbnQgbmFtZXNwYWNlICovXG4gIGxldCBOQU1FU1BBQ0UgPSBIVE1MX05BTUVTUEFDRTtcbiAgbGV0IElTX0VNUFRZX0lOUFVUID0gZmFsc2U7XG5cbiAgLyogUGFyc2luZyBvZiBzdHJpY3QgWEhUTUwgZG9jdW1lbnRzICovXG4gIGxldCBQQVJTRVJfTUVESUFfVFlQRTtcbiAgY29uc3QgU1VQUE9SVEVEX1BBUlNFUl9NRURJQV9UWVBFUyA9IFsnYXBwbGljYXRpb24veGh0bWwreG1sJywgJ3RleHQvaHRtbCddO1xuICBjb25zdCBERUZBVUxUX1BBUlNFUl9NRURJQV9UWVBFID0gJ3RleHQvaHRtbCc7XG4gIGxldCB0cmFuc2Zvcm1DYXNlRnVuYztcblxuICAvKiBLZWVwIGEgcmVmZXJlbmNlIHRvIGNvbmZpZyB0byBwYXNzIHRvIGhvb2tzICovXG4gIGxldCBDT05GSUcgPSBudWxsO1xuXG4gIC8qIElkZWFsbHksIGRvIG5vdCB0b3VjaCBhbnl0aGluZyBiZWxvdyB0aGlzIGxpbmUgKi9cbiAgLyogX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyAqL1xuXG4gIGNvbnN0IGZvcm1FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuXG4gIGNvbnN0IGlzUmVnZXhPckZ1bmN0aW9uID0gZnVuY3Rpb24gKHRlc3RWYWx1ZSkge1xuICAgIHJldHVybiB0ZXN0VmFsdWUgaW5zdGFuY2VvZiBSZWdFeHAgfHwgdGVzdFZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb247XG4gIH07XG5cbiAgLyoqXG4gICAqIF9wYXJzZUNvbmZpZ1xuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGNmZyBvcHRpb25hbCBjb25maWcgbGl0ZXJhbFxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgY29uc3QgX3BhcnNlQ29uZmlnID0gZnVuY3Rpb24gKGNmZykge1xuICAgIGlmIChDT05GSUcgJiYgQ09ORklHID09PSBjZmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKiBTaGllbGQgY29uZmlndXJhdGlvbiBvYmplY3QgZnJvbSB0YW1wZXJpbmcgKi9cbiAgICBpZiAoIWNmZyB8fCB0eXBlb2YgY2ZnICE9PSAnb2JqZWN0Jykge1xuICAgICAgY2ZnID0ge307XG4gICAgfVxuXG4gICAgLyogU2hpZWxkIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZyb20gcHJvdG90eXBlIHBvbGx1dGlvbiAqL1xuICAgIGNmZyA9IGNsb25lKGNmZyk7XG5cbiAgICAvKiBTZXQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzICovXG4gICAgQUxMT1dFRF9UQUdTID1cbiAgICAgICdBTExPV0VEX1RBR1MnIGluIGNmZ1xuICAgICAgICA/IGFkZFRvU2V0KHt9LCBjZmcuQUxMT1dFRF9UQUdTKVxuICAgICAgICA6IERFRkFVTFRfQUxMT1dFRF9UQUdTO1xuICAgIEFMTE9XRURfQVRUUiA9XG4gICAgICAnQUxMT1dFRF9BVFRSJyBpbiBjZmdcbiAgICAgICAgPyBhZGRUb1NldCh7fSwgY2ZnLkFMTE9XRURfQVRUUilcbiAgICAgICAgOiBERUZBVUxUX0FMTE9XRURfQVRUUjtcbiAgICBVUklfU0FGRV9BVFRSSUJVVEVTID1cbiAgICAgICdBRERfVVJJX1NBRkVfQVRUUicgaW4gY2ZnXG4gICAgICAgID8gYWRkVG9TZXQoY2xvbmUoREVGQVVMVF9VUklfU0FGRV9BVFRSSUJVVEVTKSwgY2ZnLkFERF9VUklfU0FGRV9BVFRSKVxuICAgICAgICA6IERFRkFVTFRfVVJJX1NBRkVfQVRUUklCVVRFUztcbiAgICBEQVRBX1VSSV9UQUdTID1cbiAgICAgICdBRERfREFUQV9VUklfVEFHUycgaW4gY2ZnXG4gICAgICAgID8gYWRkVG9TZXQoY2xvbmUoREVGQVVMVF9EQVRBX1VSSV9UQUdTKSwgY2ZnLkFERF9EQVRBX1VSSV9UQUdTKVxuICAgICAgICA6IERFRkFVTFRfREFUQV9VUklfVEFHUztcbiAgICBGT1JCSURfQ09OVEVOVFMgPVxuICAgICAgJ0ZPUkJJRF9DT05URU5UUycgaW4gY2ZnXG4gICAgICAgID8gYWRkVG9TZXQoe30sIGNmZy5GT1JCSURfQ09OVEVOVFMpXG4gICAgICAgIDogREVGQVVMVF9GT1JCSURfQ09OVEVOVFM7XG4gICAgRk9SQklEX1RBR1MgPSAnRk9SQklEX1RBR1MnIGluIGNmZyA/IGFkZFRvU2V0KHt9LCBjZmcuRk9SQklEX1RBR1MpIDoge307XG4gICAgRk9SQklEX0FUVFIgPSAnRk9SQklEX0FUVFInIGluIGNmZyA/IGFkZFRvU2V0KHt9LCBjZmcuRk9SQklEX0FUVFIpIDoge307XG4gICAgVVNFX1BST0ZJTEVTID0gJ1VTRV9QUk9GSUxFUycgaW4gY2ZnID8gY2ZnLlVTRV9QUk9GSUxFUyA6IGZhbHNlO1xuICAgIEFMTE9XX0FSSUFfQVRUUiA9IGNmZy5BTExPV19BUklBX0FUVFIgIT09IGZhbHNlOyAvLyBEZWZhdWx0IHRydWVcbiAgICBBTExPV19EQVRBX0FUVFIgPSBjZmcuQUxMT1dfREFUQV9BVFRSICE9PSBmYWxzZTsgLy8gRGVmYXVsdCB0cnVlXG4gICAgQUxMT1dfVU5LTk9XTl9QUk9UT0NPTFMgPSBjZmcuQUxMT1dfVU5LTk9XTl9QUk9UT0NPTFMgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBTQUZFX0ZPUl9URU1QTEFURVMgPSBjZmcuU0FGRV9GT1JfVEVNUExBVEVTIHx8IGZhbHNlOyAvLyBEZWZhdWx0IGZhbHNlXG4gICAgV0hPTEVfRE9DVU1FTlQgPSBjZmcuV0hPTEVfRE9DVU1FTlQgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBSRVRVUk5fRE9NID0gY2ZnLlJFVFVSTl9ET00gfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBSRVRVUk5fRE9NX0ZSQUdNRU5UID0gY2ZnLlJFVFVSTl9ET01fRlJBR01FTlQgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBSRVRVUk5fVFJVU1RFRF9UWVBFID0gY2ZnLlJFVFVSTl9UUlVTVEVEX1RZUEUgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBGT1JDRV9CT0RZID0gY2ZnLkZPUkNFX0JPRFkgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBTQU5JVElaRV9ET00gPSBjZmcuU0FOSVRJWkVfRE9NICE9PSBmYWxzZTsgLy8gRGVmYXVsdCB0cnVlXG4gICAgS0VFUF9DT05URU5UID0gY2ZnLktFRVBfQ09OVEVOVCAhPT0gZmFsc2U7IC8vIERlZmF1bHQgdHJ1ZVxuICAgIElOX1BMQUNFID0gY2ZnLklOX1BMQUNFIHx8IGZhbHNlOyAvLyBEZWZhdWx0IGZhbHNlXG4gICAgSVNfQUxMT1dFRF9VUkkgPSBjZmcuQUxMT1dFRF9VUklfUkVHRVhQIHx8IElTX0FMTE9XRURfVVJJO1xuICAgIE5BTUVTUEFDRSA9IGNmZy5OQU1FU1BBQ0UgfHwgSFRNTF9OQU1FU1BBQ0U7XG4gICAgaWYgKFxuICAgICAgY2ZnLkNVU1RPTV9FTEVNRU5UX0hBTkRMSU5HICYmXG4gICAgICBpc1JlZ2V4T3JGdW5jdGlvbihjZmcuQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrKVxuICAgICkge1xuICAgICAgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrID1cbiAgICAgICAgY2ZnLkNVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVjaztcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBjZmcuQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcgJiZcbiAgICAgIGlzUmVnZXhPckZ1bmN0aW9uKGNmZy5DVVNUT01fRUxFTUVOVF9IQU5ETElORy5hdHRyaWJ1dGVOYW1lQ2hlY2spXG4gICAgKSB7XG4gICAgICBDVVNUT01fRUxFTUVOVF9IQU5ETElORy5hdHRyaWJ1dGVOYW1lQ2hlY2sgPVxuICAgICAgICBjZmcuQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcuYXR0cmlidXRlTmFtZUNoZWNrO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNmZy5DVVNUT01fRUxFTUVOVF9IQU5ETElORyAmJlxuICAgICAgdHlwZW9mIGNmZy5DVVNUT01fRUxFTUVOVF9IQU5ETElORy5hbGxvd0N1c3RvbWl6ZWRCdWlsdEluRWxlbWVudHMgPT09XG4gICAgICAgICdib29sZWFuJ1xuICAgICkge1xuICAgICAgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcuYWxsb3dDdXN0b21pemVkQnVpbHRJbkVsZW1lbnRzID1cbiAgICAgICAgY2ZnLkNVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmFsbG93Q3VzdG9taXplZEJ1aWx0SW5FbGVtZW50cztcbiAgICB9XG5cbiAgICBQQVJTRVJfTUVESUFfVFlQRSA9XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItaW5jbHVkZXNcbiAgICAgIFNVUFBPUlRFRF9QQVJTRVJfTUVESUFfVFlQRVMuaW5kZXhPZihjZmcuUEFSU0VSX01FRElBX1RZUEUpID09PSAtMVxuICAgICAgICA/IChQQVJTRVJfTUVESUFfVFlQRSA9IERFRkFVTFRfUEFSU0VSX01FRElBX1RZUEUpXG4gICAgICAgIDogKFBBUlNFUl9NRURJQV9UWVBFID0gY2ZnLlBBUlNFUl9NRURJQV9UWVBFKTtcblxuICAgIC8vIEhUTUwgdGFncyBhbmQgYXR0cmlidXRlcyBhcmUgbm90IGNhc2Utc2Vuc2l0aXZlLCBjb252ZXJ0aW5nIHRvIGxvd2VyY2FzZS4gS2VlcGluZyBYSFRNTCBhcyBpcy5cbiAgICB0cmFuc2Zvcm1DYXNlRnVuYyA9XG4gICAgICBQQVJTRVJfTUVESUFfVFlQRSA9PT0gJ2FwcGxpY2F0aW9uL3hodG1sK3htbCdcbiAgICAgICAgPyAoeCkgPT4geFxuICAgICAgICA6IHN0cmluZ1RvTG93ZXJDYXNlO1xuXG4gICAgaWYgKFNBRkVfRk9SX1RFTVBMQVRFUykge1xuICAgICAgQUxMT1dfREFUQV9BVFRSID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKFJFVFVSTl9ET01fRlJBR01FTlQpIHtcbiAgICAgIFJFVFVSTl9ET00gPSB0cnVlO1xuICAgIH1cblxuICAgIC8qIFBhcnNlIHByb2ZpbGUgaW5mbyAqL1xuICAgIGlmIChVU0VfUFJPRklMRVMpIHtcbiAgICAgIEFMTE9XRURfVEFHUyA9IGFkZFRvU2V0KHt9LCBbLi4uVEFHUy50ZXh0XSk7XG4gICAgICBBTExPV0VEX0FUVFIgPSBbXTtcbiAgICAgIGlmIChVU0VfUFJPRklMRVMuaHRtbCA9PT0gdHJ1ZSkge1xuICAgICAgICBhZGRUb1NldChBTExPV0VEX1RBR1MsIFRBR1MuaHRtbCk7XG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfQVRUUiwgQVRUUlMuaHRtbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChVU0VfUFJPRklMRVMuc3ZnID09PSB0cnVlKSB7XG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfVEFHUywgVEFHUy5zdmcpO1xuICAgICAgICBhZGRUb1NldChBTExPV0VEX0FUVFIsIEFUVFJTLnN2Zyk7XG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfQVRUUiwgQVRUUlMueG1sKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFVTRV9QUk9GSUxFUy5zdmdGaWx0ZXJzID09PSB0cnVlKSB7XG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfVEFHUywgVEFHUy5zdmdGaWx0ZXJzKTtcbiAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9BVFRSLCBBVFRSUy5zdmcpO1xuICAgICAgICBhZGRUb1NldChBTExPV0VEX0FUVFIsIEFUVFJTLnhtbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChVU0VfUFJPRklMRVMubWF0aE1sID09PSB0cnVlKSB7XG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfVEFHUywgVEFHUy5tYXRoTWwpO1xuICAgICAgICBhZGRUb1NldChBTExPV0VEX0FUVFIsIEFUVFJTLm1hdGhNbCk7XG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfQVRUUiwgQVRUUlMueG1sKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBNZXJnZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgKi9cbiAgICBpZiAoY2ZnLkFERF9UQUdTKSB7XG4gICAgICBpZiAoQUxMT1dFRF9UQUdTID09PSBERUZBVUxUX0FMTE9XRURfVEFHUykge1xuICAgICAgICBBTExPV0VEX1RBR1MgPSBjbG9uZShBTExPV0VEX1RBR1MpO1xuICAgICAgfVxuXG4gICAgICBhZGRUb1NldChBTExPV0VEX1RBR1MsIGNmZy5BRERfVEFHUyk7XG4gICAgfVxuXG4gICAgaWYgKGNmZy5BRERfQVRUUikge1xuICAgICAgaWYgKEFMTE9XRURfQVRUUiA9PT0gREVGQVVMVF9BTExPV0VEX0FUVFIpIHtcbiAgICAgICAgQUxMT1dFRF9BVFRSID0gY2xvbmUoQUxMT1dFRF9BVFRSKTtcbiAgICAgIH1cblxuICAgICAgYWRkVG9TZXQoQUxMT1dFRF9BVFRSLCBjZmcuQUREX0FUVFIpO1xuICAgIH1cblxuICAgIGlmIChjZmcuQUREX1VSSV9TQUZFX0FUVFIpIHtcbiAgICAgIGFkZFRvU2V0KFVSSV9TQUZFX0FUVFJJQlVURVMsIGNmZy5BRERfVVJJX1NBRkVfQVRUUik7XG4gICAgfVxuXG4gICAgaWYgKGNmZy5GT1JCSURfQ09OVEVOVFMpIHtcbiAgICAgIGlmIChGT1JCSURfQ09OVEVOVFMgPT09IERFRkFVTFRfRk9SQklEX0NPTlRFTlRTKSB7XG4gICAgICAgIEZPUkJJRF9DT05URU5UUyA9IGNsb25lKEZPUkJJRF9DT05URU5UUyk7XG4gICAgICB9XG5cbiAgICAgIGFkZFRvU2V0KEZPUkJJRF9DT05URU5UUywgY2ZnLkZPUkJJRF9DT05URU5UUyk7XG4gICAgfVxuXG4gICAgLyogQWRkICN0ZXh0IGluIGNhc2UgS0VFUF9DT05URU5UIGlzIHNldCB0byB0cnVlICovXG4gICAgaWYgKEtFRVBfQ09OVEVOVCkge1xuICAgICAgQUxMT1dFRF9UQUdTWycjdGV4dCddID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKiBBZGQgaHRtbCwgaGVhZCBhbmQgYm9keSB0byBBTExPV0VEX1RBR1MgaW4gY2FzZSBXSE9MRV9ET0NVTUVOVCBpcyB0cnVlICovXG4gICAgaWYgKFdIT0xFX0RPQ1VNRU5UKSB7XG4gICAgICBhZGRUb1NldChBTExPV0VEX1RBR1MsIFsnaHRtbCcsICdoZWFkJywgJ2JvZHknXSk7XG4gICAgfVxuXG4gICAgLyogQWRkIHRib2R5IHRvIEFMTE9XRURfVEFHUyBpbiBjYXNlIHRhYmxlcyBhcmUgcGVybWl0dGVkLCBzZWUgIzI4NiwgIzM2NSAqL1xuICAgIGlmIChBTExPV0VEX1RBR1MudGFibGUpIHtcbiAgICAgIGFkZFRvU2V0KEFMTE9XRURfVEFHUywgWyd0Ym9keSddKTtcbiAgICAgIGRlbGV0ZSBGT1JCSURfVEFHUy50Ym9keTtcbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50IGZ1cnRoZXIgbWFuaXB1bGF0aW9uIG9mIGNvbmZpZ3VyYXRpb24uXG4gICAgLy8gTm90IGF2YWlsYWJsZSBpbiBJRTgsIFNhZmFyaSA1LCBldGMuXG4gICAgaWYgKGZyZWV6ZSkge1xuICAgICAgZnJlZXplKGNmZyk7XG4gICAgfVxuXG4gICAgQ09ORklHID0gY2ZnO1xuICB9O1xuXG4gIGNvbnN0IE1BVEhNTF9URVhUX0lOVEVHUkFUSU9OX1BPSU5UUyA9IGFkZFRvU2V0KHt9LCBbXG4gICAgJ21pJyxcbiAgICAnbW8nLFxuICAgICdtbicsXG4gICAgJ21zJyxcbiAgICAnbXRleHQnLFxuICBdKTtcblxuICBjb25zdCBIVE1MX0lOVEVHUkFUSU9OX1BPSU5UUyA9IGFkZFRvU2V0KHt9LCBbXG4gICAgJ2ZvcmVpZ25vYmplY3QnLFxuICAgICdkZXNjJyxcbiAgICAndGl0bGUnLFxuICAgICdhbm5vdGF0aW9uLXhtbCcsXG4gIF0pO1xuXG4gIC8qIEtlZXAgdHJhY2sgb2YgYWxsIHBvc3NpYmxlIFNWRyBhbmQgTWF0aE1MIHRhZ3NcbiAgICogc28gdGhhdCB3ZSBjYW4gcGVyZm9ybSB0aGUgbmFtZXNwYWNlIGNoZWNrc1xuICAgKiBjb3JyZWN0bHkuICovXG4gIGNvbnN0IEFMTF9TVkdfVEFHUyA9IGFkZFRvU2V0KHt9LCBUQUdTLnN2Zyk7XG4gIGFkZFRvU2V0KEFMTF9TVkdfVEFHUywgVEFHUy5zdmdGaWx0ZXJzKTtcbiAgYWRkVG9TZXQoQUxMX1NWR19UQUdTLCBUQUdTLnN2Z0Rpc2FsbG93ZWQpO1xuXG4gIGNvbnN0IEFMTF9NQVRITUxfVEFHUyA9IGFkZFRvU2V0KHt9LCBUQUdTLm1hdGhNbCk7XG4gIGFkZFRvU2V0KEFMTF9NQVRITUxfVEFHUywgVEFHUy5tYXRoTWxEaXNhbGxvd2VkKTtcblxuICAvKipcbiAgICpcbiAgICpcbiAgICogQHBhcmFtICB7RWxlbWVudH0gZWxlbWVudCBhIERPTSBlbGVtZW50IHdob3NlIG5hbWVzcGFjZSBpcyBiZWluZyBjaGVja2VkXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm4gZmFsc2UgaWYgdGhlIGVsZW1lbnQgaGFzIGFcbiAgICogIG5hbWVzcGFjZSB0aGF0IGEgc3BlYy1jb21wbGlhbnQgcGFyc2VyIHdvdWxkIG5ldmVyXG4gICAqICByZXR1cm4uIFJldHVybiB0cnVlIG90aGVyd2lzZS5cbiAgICovXG4gIGNvbnN0IF9jaGVja1ZhbGlkTmFtZXNwYWNlID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICBsZXQgcGFyZW50ID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcblxuICAgIC8vIEluIEpTRE9NLCBpZiB3ZSdyZSBpbnNpZGUgc2hhZG93IERPTSwgdGhlbiBwYXJlbnROb2RlXG4gICAgLy8gY2FuIGJlIG51bGwuIFdlIGp1c3Qgc2ltdWxhdGUgcGFyZW50IGluIHRoaXMgY2FzZS5cbiAgICBpZiAoIXBhcmVudCB8fCAhcGFyZW50LnRhZ05hbWUpIHtcbiAgICAgIHBhcmVudCA9IHtcbiAgICAgICAgbmFtZXNwYWNlVVJJOiBIVE1MX05BTUVTUEFDRSxcbiAgICAgICAgdGFnTmFtZTogJ3RlbXBsYXRlJyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgdGFnTmFtZSA9IHN0cmluZ1RvTG93ZXJDYXNlKGVsZW1lbnQudGFnTmFtZSk7XG4gICAgY29uc3QgcGFyZW50VGFnTmFtZSA9IHN0cmluZ1RvTG93ZXJDYXNlKHBhcmVudC50YWdOYW1lKTtcblxuICAgIGlmIChlbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0gU1ZHX05BTUVTUEFDRSkge1xuICAgICAgLy8gVGhlIG9ubHkgd2F5IHRvIHN3aXRjaCBmcm9tIEhUTUwgbmFtZXNwYWNlIHRvIFNWR1xuICAgICAgLy8gaXMgdmlhIDxzdmc+LiBJZiBpdCBoYXBwZW5zIHZpYSBhbnkgb3RoZXIgdGFnLCB0aGVuXG4gICAgICAvLyBpdCBzaG91bGQgYmUga2lsbGVkLlxuICAgICAgaWYgKHBhcmVudC5uYW1lc3BhY2VVUkkgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgICAgIHJldHVybiB0YWdOYW1lID09PSAnc3ZnJztcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIG9ubHkgd2F5IHRvIHN3aXRjaCBmcm9tIE1hdGhNTCB0byBTVkcgaXMgdmlhXG4gICAgICAvLyBzdmcgaWYgcGFyZW50IGlzIGVpdGhlciA8YW5ub3RhdGlvbi14bWw+IG9yIE1hdGhNTFxuICAgICAgLy8gdGV4dCBpbnRlZ3JhdGlvbiBwb2ludHMuXG4gICAgICBpZiAocGFyZW50Lm5hbWVzcGFjZVVSSSA9PT0gTUFUSE1MX05BTUVTUEFDRSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHRhZ05hbWUgPT09ICdzdmcnICYmXG4gICAgICAgICAgKHBhcmVudFRhZ05hbWUgPT09ICdhbm5vdGF0aW9uLXhtbCcgfHxcbiAgICAgICAgICAgIE1BVEhNTF9URVhUX0lOVEVHUkFUSU9OX1BPSU5UU1twYXJlbnRUYWdOYW1lXSlcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2Ugb25seSBhbGxvdyBlbGVtZW50cyB0aGF0IGFyZSBkZWZpbmVkIGluIFNWR1xuICAgICAgLy8gc3BlYy4gQWxsIG90aGVycyBhcmUgZGlzYWxsb3dlZCBpbiBTVkcgbmFtZXNwYWNlLlxuICAgICAgcmV0dXJuIEJvb2xlYW4oQUxMX1NWR19UQUdTW3RhZ05hbWVdKTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IE1BVEhNTF9OQU1FU1BBQ0UpIHtcbiAgICAgIC8vIFRoZSBvbmx5IHdheSB0byBzd2l0Y2ggZnJvbSBIVE1MIG5hbWVzcGFjZSB0byBNYXRoTUxcbiAgICAgIC8vIGlzIHZpYSA8bWF0aD4uIElmIGl0IGhhcHBlbnMgdmlhIGFueSBvdGhlciB0YWcsIHRoZW5cbiAgICAgIC8vIGl0IHNob3VsZCBiZSBraWxsZWQuXG4gICAgICBpZiAocGFyZW50Lm5hbWVzcGFjZVVSSSA9PT0gSFRNTF9OQU1FU1BBQ0UpIHtcbiAgICAgICAgcmV0dXJuIHRhZ05hbWUgPT09ICdtYXRoJztcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIG9ubHkgd2F5IHRvIHN3aXRjaCBmcm9tIFNWRyB0byBNYXRoTUwgaXMgdmlhXG4gICAgICAvLyA8bWF0aD4gYW5kIEhUTUwgaW50ZWdyYXRpb24gcG9pbnRzXG4gICAgICBpZiAocGFyZW50Lm5hbWVzcGFjZVVSSSA9PT0gU1ZHX05BTUVTUEFDRSkge1xuICAgICAgICByZXR1cm4gdGFnTmFtZSA9PT0gJ21hdGgnICYmIEhUTUxfSU5URUdSQVRJT05fUE9JTlRTW3BhcmVudFRhZ05hbWVdO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBvbmx5IGFsbG93IGVsZW1lbnRzIHRoYXQgYXJlIGRlZmluZWQgaW4gTWF0aE1MXG4gICAgICAvLyBzcGVjLiBBbGwgb3RoZXJzIGFyZSBkaXNhbGxvd2VkIGluIE1hdGhNTCBuYW1lc3BhY2UuXG4gICAgICByZXR1cm4gQm9vbGVhbihBTExfTUFUSE1MX1RBR1NbdGFnTmFtZV0pO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0gSFRNTF9OQU1FU1BBQ0UpIHtcbiAgICAgIC8vIFRoZSBvbmx5IHdheSB0byBzd2l0Y2ggZnJvbSBTVkcgdG8gSFRNTCBpcyB2aWFcbiAgICAgIC8vIEhUTUwgaW50ZWdyYXRpb24gcG9pbnRzLCBhbmQgZnJvbSBNYXRoTUwgdG8gSFRNTFxuICAgICAgLy8gaXMgdmlhIE1hdGhNTCB0ZXh0IGludGVncmF0aW9uIHBvaW50c1xuICAgICAgaWYgKFxuICAgICAgICBwYXJlbnQubmFtZXNwYWNlVVJJID09PSBTVkdfTkFNRVNQQUNFICYmXG4gICAgICAgICFIVE1MX0lOVEVHUkFUSU9OX1BPSU5UU1twYXJlbnRUYWdOYW1lXVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBwYXJlbnQubmFtZXNwYWNlVVJJID09PSBNQVRITUxfTkFNRVNQQUNFICYmXG4gICAgICAgICFNQVRITUxfVEVYVF9JTlRFR1JBVElPTl9QT0lOVFNbcGFyZW50VGFnTmFtZV1cbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIENlcnRhaW4gZWxlbWVudHMgYXJlIGFsbG93ZWQgaW4gYm90aCBTVkcgYW5kIEhUTUxcbiAgICAgIC8vIG5hbWVzcGFjZS4gV2UgbmVlZCB0byBzcGVjaWZ5IHRoZW0gZXhwbGljaXRseVxuICAgICAgLy8gc28gdGhhdCB0aGV5IGRvbid0IGdldCBlcnJvbm91c2x5IGRlbGV0ZWQgZnJvbVxuICAgICAgLy8gSFRNTCBuYW1lc3BhY2UuXG4gICAgICBjb25zdCBjb21tb25TdmdBbmRIVE1MRWxlbWVudHMgPSBhZGRUb1NldCh7fSwgW1xuICAgICAgICAndGl0bGUnLFxuICAgICAgICAnc3R5bGUnLFxuICAgICAgICAnZm9udCcsXG4gICAgICAgICdhJyxcbiAgICAgICAgJ3NjcmlwdCcsXG4gICAgICBdKTtcblxuICAgICAgLy8gV2UgZGlzYWxsb3cgdGFncyB0aGF0IGFyZSBzcGVjaWZpYyBmb3IgTWF0aE1MXG4gICAgICAvLyBvciBTVkcgYW5kIHNob3VsZCBuZXZlciBhcHBlYXIgaW4gSFRNTCBuYW1lc3BhY2VcbiAgICAgIHJldHVybiAoXG4gICAgICAgICFBTExfTUFUSE1MX1RBR1NbdGFnTmFtZV0gJiZcbiAgICAgICAgKGNvbW1vblN2Z0FuZEhUTUxFbGVtZW50c1t0YWdOYW1lXSB8fCAhQUxMX1NWR19UQUdTW3RhZ05hbWVdKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgY29kZSBzaG91bGQgbmV2ZXIgcmVhY2ggdGhpcyBwbGFjZSAodGhpcyBtZWFuc1xuICAgIC8vIHRoYXQgdGhlIGVsZW1lbnQgc29tZWhvdyBnb3QgbmFtZXNwYWNlIHRoYXQgaXMgbm90XG4gICAgLy8gSFRNTCwgU1ZHIG9yIE1hdGhNTCkuIFJldHVybiBmYWxzZSBqdXN0IGluIGNhc2UuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBfZm9yY2VSZW1vdmVcbiAgICpcbiAgICogQHBhcmFtICB7Tm9kZX0gbm9kZSBhIERPTSBub2RlXG4gICAqL1xuICBjb25zdCBfZm9yY2VSZW1vdmUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGFycmF5UHVzaChET01QdXJpZnkucmVtb3ZlZCwgeyBlbGVtZW50OiBub2RlIH0pO1xuICAgIHRyeSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItZG9tLW5vZGUtcmVtb3ZlXG4gICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbm9kZS5vdXRlckhUTUwgPSBlbXB0eUhUTUw7XG4gICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBfcmVtb3ZlQXR0cmlidXRlXG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSBhbiBBdHRyaWJ1dGUgbmFtZVxuICAgKiBAcGFyYW0gIHtOb2RlfSBub2RlIGEgRE9NIG5vZGVcbiAgICovXG4gIGNvbnN0IF9yZW1vdmVBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobmFtZSwgbm9kZSkge1xuICAgIHRyeSB7XG4gICAgICBhcnJheVB1c2goRE9NUHVyaWZ5LnJlbW92ZWQsIHtcbiAgICAgICAgYXR0cmlidXRlOiBub2RlLmdldEF0dHJpYnV0ZU5vZGUobmFtZSksXG4gICAgICAgIGZyb206IG5vZGUsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICBhcnJheVB1c2goRE9NUHVyaWZ5LnJlbW92ZWQsIHtcbiAgICAgICAgYXR0cmlidXRlOiBudWxsLFxuICAgICAgICBmcm9tOiBub2RlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG5cbiAgICAvLyBXZSB2b2lkIGF0dHJpYnV0ZSB2YWx1ZXMgZm9yIHVucmVtb3ZhYmxlIFwiaXNcIlwiIGF0dHJpYnV0ZXNcbiAgICBpZiAobmFtZSA9PT0gJ2lzJyAmJiAhQUxMT1dFRF9BVFRSW25hbWVdKSB7XG4gICAgICBpZiAoUkVUVVJOX0RPTSB8fCBSRVRVUk5fRE9NX0ZSQUdNRU5UKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgX2ZvcmNlUmVtb3ZlKG5vZGUpO1xuICAgICAgICB9IGNhdGNoIChfKSB7fVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHt9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBfaW5pdERvY3VtZW50XG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZ30gZGlydHkgYSBzdHJpbmcgb2YgZGlydHkgbWFya3VwXG4gICAqIEByZXR1cm4ge0RvY3VtZW50fSBhIERPTSwgZmlsbGVkIHdpdGggdGhlIGRpcnR5IG1hcmt1cFxuICAgKi9cbiAgY29uc3QgX2luaXREb2N1bWVudCA9IGZ1bmN0aW9uIChkaXJ0eSkge1xuICAgIC8qIENyZWF0ZSBhIEhUTUwgZG9jdW1lbnQgKi9cbiAgICBsZXQgZG9jO1xuICAgIGxldCBsZWFkaW5nV2hpdGVzcGFjZTtcblxuICAgIGlmIChGT1JDRV9CT0RZKSB7XG4gICAgICBkaXJ0eSA9ICc8cmVtb3ZlPjwvcmVtb3ZlPicgKyBkaXJ0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogSWYgRk9SQ0VfQk9EWSBpc24ndCB1c2VkLCBsZWFkaW5nIHdoaXRlc3BhY2UgbmVlZHMgdG8gYmUgcHJlc2VydmVkIG1hbnVhbGx5ICovXG4gICAgICBjb25zdCBtYXRjaGVzID0gc3RyaW5nTWF0Y2goZGlydHksIC9eW1xcclxcblxcdCBdKy8pO1xuICAgICAgbGVhZGluZ1doaXRlc3BhY2UgPSBtYXRjaGVzICYmIG1hdGNoZXNbMF07XG4gICAgfVxuXG4gICAgaWYgKFBBUlNFUl9NRURJQV9UWVBFID09PSAnYXBwbGljYXRpb24veGh0bWwreG1sJykge1xuICAgICAgLy8gUm9vdCBvZiBYSFRNTCBkb2MgbXVzdCBjb250YWluIHhtbG5zIGRlY2xhcmF0aW9uIChzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3hodG1sMS9ub3JtYXRpdmUuaHRtbCNzdHJpY3QpXG4gICAgICBkaXJ0eSA9XG4gICAgICAgICc8aHRtbCB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48aGVhZD48L2hlYWQ+PGJvZHk+JyArXG4gICAgICAgIGRpcnR5ICtcbiAgICAgICAgJzwvYm9keT48L2h0bWw+JztcbiAgICB9XG5cbiAgICBjb25zdCBkaXJ0eVBheWxvYWQgPSB0cnVzdGVkVHlwZXNQb2xpY3lcbiAgICAgID8gdHJ1c3RlZFR5cGVzUG9saWN5LmNyZWF0ZUhUTUwoZGlydHkpXG4gICAgICA6IGRpcnR5O1xuICAgIC8qXG4gICAgICogVXNlIHRoZSBET01QYXJzZXIgQVBJIGJ5IGRlZmF1bHQsIGZhbGxiYWNrIGxhdGVyIGlmIG5lZWRzIGJlXG4gICAgICogRE9NUGFyc2VyIG5vdCB3b3JrIGZvciBzdmcgd2hlbiBoYXMgbXVsdGlwbGUgcm9vdCBlbGVtZW50LlxuICAgICAqL1xuICAgIGlmIChOQU1FU1BBQ0UgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGRpcnR5UGF5bG9hZCwgUEFSU0VSX01FRElBX1RZUEUpO1xuICAgICAgfSBjYXRjaCAoXykge31cbiAgICB9XG5cbiAgICAvKiBVc2UgY3JlYXRlSFRNTERvY3VtZW50IGluIGNhc2UgRE9NUGFyc2VyIGlzIG5vdCBhdmFpbGFibGUgKi9cbiAgICBpZiAoIWRvYyB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgZG9jID0gaW1wbGVtZW50YXRpb24uY3JlYXRlRG9jdW1lbnQoTkFNRVNQQUNFLCAndGVtcGxhdGUnLCBudWxsKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRvYy5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gSVNfRU1QVFlfSU5QVVQgPyAnJyA6IGRpcnR5UGF5bG9hZDtcbiAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgLy8gU3ludGF4IGVycm9yIGlmIGRpcnR5UGF5bG9hZCBpcyBpbnZhbGlkIHhtbFxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGJvZHkgPSBkb2MuYm9keSB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgaWYgKGRpcnR5ICYmIGxlYWRpbmdXaGl0ZXNwYWNlKSB7XG4gICAgICBib2R5Lmluc2VydEJlZm9yZShcbiAgICAgICAgZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGVhZGluZ1doaXRlc3BhY2UpLFxuICAgICAgICBib2R5LmNoaWxkTm9kZXNbMF0gfHwgbnVsbFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKiBXb3JrIG9uIHdob2xlIGRvY3VtZW50IG9yIGp1c3QgaXRzIGJvZHkgKi9cbiAgICBpZiAoTkFNRVNQQUNFID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgICAgcmV0dXJuIGdldEVsZW1lbnRzQnlUYWdOYW1lLmNhbGwoXG4gICAgICAgIGRvYyxcbiAgICAgICAgV0hPTEVfRE9DVU1FTlQgPyAnaHRtbCcgOiAnYm9keSdcbiAgICAgIClbMF07XG4gICAgfVxuXG4gICAgcmV0dXJuIFdIT0xFX0RPQ1VNRU5UID8gZG9jLmRvY3VtZW50RWxlbWVudCA6IGJvZHk7XG4gIH07XG5cbiAgLyoqXG4gICAqIF9jcmVhdGVJdGVyYXRvclxuICAgKlxuICAgKiBAcGFyYW0gIHtEb2N1bWVudH0gcm9vdCBkb2N1bWVudC9mcmFnbWVudCB0byBjcmVhdGUgaXRlcmF0b3IgZm9yXG4gICAqIEByZXR1cm4ge0l0ZXJhdG9yfSBpdGVyYXRvciBpbnN0YW5jZVxuICAgKi9cbiAgY29uc3QgX2NyZWF0ZUl0ZXJhdG9yID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICByZXR1cm4gY3JlYXRlTm9kZUl0ZXJhdG9yLmNhbGwoXG4gICAgICByb290Lm93bmVyRG9jdW1lbnQgfHwgcm9vdCxcbiAgICAgIHJvb3QsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQgfCBOb2RlRmlsdGVyLlNIT1dfQ09NTUVOVCB8IE5vZGVGaWx0ZXIuU0hPV19URVhULFxuICAgICAgbnVsbCxcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogX2lzQ2xvYmJlcmVkXG4gICAqXG4gICAqIEBwYXJhbSAge05vZGV9IGVsbSBlbGVtZW50IHRvIGNoZWNrIGZvciBjbG9iYmVyaW5nIGF0dGFja3NcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBjbG9iYmVyZWQsIGZhbHNlIGlmIHNhZmVcbiAgICovXG4gIGNvbnN0IF9pc0Nsb2JiZXJlZCA9IGZ1bmN0aW9uIChlbG0pIHtcbiAgICByZXR1cm4gKFxuICAgICAgZWxtIGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50ICYmXG4gICAgICAodHlwZW9mIGVsbS5ub2RlTmFtZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgdHlwZW9mIGVsbS50ZXh0Q29udGVudCAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgdHlwZW9mIGVsbS5yZW1vdmVDaGlsZCAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAhKGVsbS5hdHRyaWJ1dGVzIGluc3RhbmNlb2YgTmFtZWROb2RlTWFwKSB8fFxuICAgICAgICB0eXBlb2YgZWxtLnJlbW92ZUF0dHJpYnV0ZSAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICB0eXBlb2YgZWxtLnNldEF0dHJpYnV0ZSAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICB0eXBlb2YgZWxtLm5hbWVzcGFjZVVSSSAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgdHlwZW9mIGVsbS5pbnNlcnRCZWZvcmUgIT09ICdmdW5jdGlvbicpXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogX2lzTm9kZVxuICAgKlxuICAgKiBAcGFyYW0gIHtOb2RlfSBvYmogb2JqZWN0IHRvIGNoZWNrIHdoZXRoZXIgaXQncyBhIERPTSBub2RlXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaXMgb2JqZWN0IGlzIGEgRE9NIG5vZGVcbiAgICovXG4gIGNvbnN0IF9pc05vZGUgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBOb2RlID09PSAnb2JqZWN0J1xuICAgICAgPyBvYmplY3QgaW5zdGFuY2VvZiBOb2RlXG4gICAgICA6IG9iamVjdCAmJlxuICAgICAgICAgIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgICB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJztcbiAgfTtcblxuICAvKipcbiAgICogX2V4ZWN1dGVIb29rXG4gICAqIEV4ZWN1dGUgdXNlciBjb25maWd1cmFibGUgaG9va3NcbiAgICpcbiAgICogQHBhcmFtICB7U3RyaW5nfSBlbnRyeVBvaW50ICBOYW1lIG9mIHRoZSBob29rJ3MgZW50cnkgcG9pbnRcbiAgICogQHBhcmFtICB7Tm9kZX0gY3VycmVudE5vZGUgbm9kZSB0byB3b3JrIG9uIHdpdGggdGhlIGhvb2tcbiAgICogQHBhcmFtICB7T2JqZWN0fSBkYXRhIGFkZGl0aW9uYWwgaG9vayBwYXJhbWV0ZXJzXG4gICAqL1xuICBjb25zdCBfZXhlY3V0ZUhvb2sgPSBmdW5jdGlvbiAoZW50cnlQb2ludCwgY3VycmVudE5vZGUsIGRhdGEpIHtcbiAgICBpZiAoIWhvb2tzW2VudHJ5UG9pbnRdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXJyYXlGb3JFYWNoKGhvb2tzW2VudHJ5UG9pbnRdLCAoaG9vaykgPT4ge1xuICAgICAgaG9vay5jYWxsKERPTVB1cmlmeSwgY3VycmVudE5vZGUsIGRhdGEsIENPTkZJRyk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIF9zYW5pdGl6ZUVsZW1lbnRzXG4gICAqXG4gICAqIEBwcm90ZWN0IG5vZGVOYW1lXG4gICAqIEBwcm90ZWN0IHRleHRDb250ZW50XG4gICAqIEBwcm90ZWN0IHJlbW92ZUNoaWxkXG4gICAqXG4gICAqIEBwYXJhbSAgIHtOb2RlfSBjdXJyZW50Tm9kZSB0byBjaGVjayBmb3IgcGVybWlzc2lvbiB0byBleGlzdFxuICAgKiBAcmV0dXJuICB7Qm9vbGVhbn0gdHJ1ZSBpZiBub2RlIHdhcyBraWxsZWQsIGZhbHNlIGlmIGxlZnQgYWxpdmVcbiAgICovXG4gIGNvbnN0IF9zYW5pdGl6ZUVsZW1lbnRzID0gZnVuY3Rpb24gKGN1cnJlbnROb2RlKSB7XG4gICAgbGV0IGNvbnRlbnQ7XG5cbiAgICAvKiBFeGVjdXRlIGEgaG9vayBpZiBwcmVzZW50ICovXG4gICAgX2V4ZWN1dGVIb29rKCdiZWZvcmVTYW5pdGl6ZUVsZW1lbnRzJywgY3VycmVudE5vZGUsIG51bGwpO1xuXG4gICAgLyogQ2hlY2sgaWYgZWxlbWVudCBpcyBjbG9iYmVyZWQgb3IgY2FuIGNsb2JiZXIgKi9cbiAgICBpZiAoX2lzQ2xvYmJlcmVkKGN1cnJlbnROb2RlKSkge1xuICAgICAgX2ZvcmNlUmVtb3ZlKGN1cnJlbnROb2RlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qIENoZWNrIGlmIHRhZ25hbWUgY29udGFpbnMgVW5pY29kZSAqL1xuICAgIGlmIChzdHJpbmdNYXRjaChjdXJyZW50Tm9kZS5ub2RlTmFtZSwgL1tcXHUwMDgwLVxcdUZGRkZdLykpIHtcbiAgICAgIF9mb3JjZVJlbW92ZShjdXJyZW50Tm9kZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKiBOb3cgbGV0J3MgY2hlY2sgdGhlIGVsZW1lbnQncyB0eXBlIGFuZCBuYW1lICovXG4gICAgY29uc3QgdGFnTmFtZSA9IHRyYW5zZm9ybUNhc2VGdW5jKGN1cnJlbnROb2RlLm5vZGVOYW1lKTtcblxuICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICBfZXhlY3V0ZUhvb2soJ3Vwb25TYW5pdGl6ZUVsZW1lbnQnLCBjdXJyZW50Tm9kZSwge1xuICAgICAgdGFnTmFtZSxcbiAgICAgIGFsbG93ZWRUYWdzOiBBTExPV0VEX1RBR1MsXG4gICAgfSk7XG5cbiAgICAvKiBEZXRlY3QgbVhTUyBhdHRlbXB0cyBhYnVzaW5nIG5hbWVzcGFjZSBjb25mdXNpb24gKi9cbiAgICBpZiAoXG4gICAgICAhX2lzTm9kZShjdXJyZW50Tm9kZS5maXJzdEVsZW1lbnRDaGlsZCkgJiZcbiAgICAgICghX2lzTm9kZShjdXJyZW50Tm9kZS5jb250ZW50KSB8fFxuICAgICAgICAhX2lzTm9kZShjdXJyZW50Tm9kZS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkKSkgJiZcbiAgICAgIHJlZ0V4cFRlc3QoLzxbL1xcd10vZywgY3VycmVudE5vZGUuaW5uZXJIVE1MKSAmJlxuICAgICAgcmVnRXhwVGVzdCgvPFsvXFx3XS9nLCBjdXJyZW50Tm9kZS50ZXh0Q29udGVudClcbiAgICApIHtcbiAgICAgIF9mb3JjZVJlbW92ZShjdXJyZW50Tm9kZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKiBNaXRpZ2F0ZSBhIHByb2JsZW0gd2l0aCB0ZW1wbGF0ZXMgaW5zaWRlIHNlbGVjdCAqL1xuICAgIGlmIChcbiAgICAgIHRhZ05hbWUgPT09ICdzZWxlY3QnICYmXG4gICAgICByZWdFeHBUZXN0KC88dGVtcGxhdGUvaSwgY3VycmVudE5vZGUuaW5uZXJIVE1MKVxuICAgICkge1xuICAgICAgX2ZvcmNlUmVtb3ZlKGN1cnJlbnROb2RlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qIFJlbW92ZSBlbGVtZW50IGlmIGFueXRoaW5nIGZvcmJpZHMgaXRzIHByZXNlbmNlICovXG4gICAgaWYgKCFBTExPV0VEX1RBR1NbdGFnTmFtZV0gfHwgRk9SQklEX1RBR1NbdGFnTmFtZV0pIHtcbiAgICAgIC8qIENoZWNrIGlmIHdlIGhhdmUgYSBjdXN0b20gZWxlbWVudCB0byBoYW5kbGUgKi9cbiAgICAgIGlmICghRk9SQklEX1RBR1NbdGFnTmFtZV0gJiYgX2Jhc2ljQ3VzdG9tRWxlbWVudFRlc3QodGFnTmFtZSkpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVjayBpbnN0YW5jZW9mIFJlZ0V4cCAmJlxuICAgICAgICAgIHJlZ0V4cFRlc3QoQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrLCB0YWdOYW1lKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrIGluc3RhbmNlb2YgRnVuY3Rpb24gJiZcbiAgICAgICAgICBDVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2sodGFnTmFtZSlcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLyogS2VlcCBjb250ZW50IGV4Y2VwdCBmb3IgYmFkLWxpc3RlZCBlbGVtZW50cyAqL1xuICAgICAgaWYgKEtFRVBfQ09OVEVOVCAmJiAhRk9SQklEX0NPTlRFTlRTW3RhZ05hbWVdKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGN1cnJlbnROb2RlKSB8fCBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBjb25zdCBjaGlsZE5vZGVzID0gZ2V0Q2hpbGROb2RlcyhjdXJyZW50Tm9kZSkgfHwgY3VycmVudE5vZGUuY2hpbGROb2RlcztcblxuICAgICAgICBpZiAoY2hpbGROb2RlcyAmJiBwYXJlbnROb2RlKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRDb3VudCA9IGNoaWxkTm9kZXMubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IGNoaWxkQ291bnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoXG4gICAgICAgICAgICAgIGNsb25lTm9kZShjaGlsZE5vZGVzW2ldLCB0cnVlKSxcbiAgICAgICAgICAgICAgZ2V0TmV4dFNpYmxpbmcoY3VycmVudE5vZGUpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfZm9yY2VSZW1vdmUoY3VycmVudE5vZGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyogQ2hlY2sgd2hldGhlciBlbGVtZW50IGhhcyBhIHZhbGlkIG5hbWVzcGFjZSAqL1xuICAgIGlmIChjdXJyZW50Tm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgIV9jaGVja1ZhbGlkTmFtZXNwYWNlKGN1cnJlbnROb2RlKSkge1xuICAgICAgX2ZvcmNlUmVtb3ZlKGN1cnJlbnROb2RlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICh0YWdOYW1lID09PSAnbm9zY3JpcHQnIHx8IHRhZ05hbWUgPT09ICdub2VtYmVkJykgJiZcbiAgICAgIHJlZ0V4cFRlc3QoLzxcXC9ubyhzY3JpcHR8ZW1iZWQpL2ksIGN1cnJlbnROb2RlLmlubmVySFRNTClcbiAgICApIHtcbiAgICAgIF9mb3JjZVJlbW92ZShjdXJyZW50Tm9kZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKiBTYW5pdGl6ZSBlbGVtZW50IGNvbnRlbnQgdG8gYmUgdGVtcGxhdGUtc2FmZSAqL1xuICAgIGlmIChTQUZFX0ZPUl9URU1QTEFURVMgJiYgY3VycmVudE5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIC8qIEdldCB0aGUgZWxlbWVudCdzIHRleHQgY29udGVudCAqL1xuICAgICAgY29udGVudCA9IGN1cnJlbnROb2RlLnRleHRDb250ZW50O1xuICAgICAgY29udGVudCA9IHN0cmluZ1JlcGxhY2UoY29udGVudCwgTVVTVEFDSEVfRVhQUiwgJyAnKTtcbiAgICAgIGNvbnRlbnQgPSBzdHJpbmdSZXBsYWNlKGNvbnRlbnQsIEVSQl9FWFBSLCAnICcpO1xuICAgICAgaWYgKGN1cnJlbnROb2RlLnRleHRDb250ZW50ICE9PSBjb250ZW50KSB7XG4gICAgICAgIGFycmF5UHVzaChET01QdXJpZnkucmVtb3ZlZCwgeyBlbGVtZW50OiBjdXJyZW50Tm9kZS5jbG9uZU5vZGUoKSB9KTtcbiAgICAgICAgY3VycmVudE5vZGUudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICBfZXhlY3V0ZUhvb2soJ2FmdGVyU2FuaXRpemVFbGVtZW50cycsIGN1cnJlbnROb2RlLCBudWxsKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogX2lzVmFsaWRBdHRyaWJ1dGVcbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSBsY1RhZyBMb3dlcmNhc2UgdGFnIG5hbWUgb2YgY29udGFpbmluZyBlbGVtZW50LlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGxjTmFtZSBMb3dlcmNhc2UgYXR0cmlidXRlIG5hbWUuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdmFsdWUgQXR0cmlidXRlIHZhbHVlLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyB2YWxpZCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgY29uc3QgX2lzVmFsaWRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobGNUYWcsIGxjTmFtZSwgdmFsdWUpIHtcbiAgICAvKiBNYWtlIHN1cmUgYXR0cmlidXRlIGNhbm5vdCBjbG9iYmVyICovXG4gICAgaWYgKFxuICAgICAgU0FOSVRJWkVfRE9NICYmXG4gICAgICAobGNOYW1lID09PSAnaWQnIHx8IGxjTmFtZSA9PT0gJ25hbWUnKSAmJlxuICAgICAgKHZhbHVlIGluIGRvY3VtZW50IHx8IHZhbHVlIGluIGZvcm1FbGVtZW50KVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qIEFsbG93IHZhbGlkIGRhdGEtKiBhdHRyaWJ1dGVzOiBBdCBsZWFzdCBvbmUgY2hhcmFjdGVyIGFmdGVyIFwiLVwiXG4gICAgICAgIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kb20uaHRtbCNlbWJlZGRpbmctY3VzdG9tLW5vbi12aXNpYmxlLWRhdGEtd2l0aC10aGUtZGF0YS0qLWF0dHJpYnV0ZXMpXG4gICAgICAgIFhNTC1jb21wYXRpYmxlIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3htbC1jb21wYXRpYmxlIGFuZCBodHRwOi8vd3d3LnczLm9yZy9UUi94bWwvI2QwZTgwNClcbiAgICAgICAgV2UgZG9uJ3QgbmVlZCB0byBjaGVjayB0aGUgdmFsdWU7IGl0J3MgYWx3YXlzIFVSSSBzYWZlLiAqL1xuICAgIGlmIChcbiAgICAgIEFMTE9XX0RBVEFfQVRUUiAmJlxuICAgICAgIUZPUkJJRF9BVFRSW2xjTmFtZV0gJiZcbiAgICAgIHJlZ0V4cFRlc3QoREFUQV9BVFRSLCBsY05hbWUpXG4gICAgKSB7XG4gICAgICAvLyBUaGlzIGF0dHJpYnV0ZSBpcyBzYWZlXG4gICAgfSBlbHNlIGlmIChBTExPV19BUklBX0FUVFIgJiYgcmVnRXhwVGVzdChBUklBX0FUVFIsIGxjTmFtZSkpIHtcbiAgICAgIC8vIFRoaXMgYXR0cmlidXRlIGlzIHNhZmVcbiAgICAgIC8qIE90aGVyd2lzZSwgY2hlY2sgdGhlIG5hbWUgaXMgcGVybWl0dGVkICovXG4gICAgfSBlbHNlIGlmICghQUxMT1dFRF9BVFRSW2xjTmFtZV0gfHwgRk9SQklEX0FUVFJbbGNOYW1lXSkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBGaXJzdCBjb25kaXRpb24gZG9lcyBhIHZlcnkgYmFzaWMgY2hlY2sgaWYgYSkgaXQncyBiYXNpY2FsbHkgYSB2YWxpZCBjdXN0b20gZWxlbWVudCB0YWduYW1lIEFORFxuICAgICAgICAvLyBiKSBpZiB0aGUgdGFnTmFtZSBwYXNzZXMgd2hhdGV2ZXIgdGhlIHVzZXIgaGFzIGNvbmZpZ3VyZWQgZm9yIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVja1xuICAgICAgICAvLyBhbmQgYykgaWYgdGhlIGF0dHJpYnV0ZSBuYW1lIHBhc3NlcyB3aGF0ZXZlciB0aGUgdXNlciBoYXMgY29uZmlndXJlZCBmb3IgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcuYXR0cmlidXRlTmFtZUNoZWNrXG4gICAgICAgIChfYmFzaWNDdXN0b21FbGVtZW50VGVzdChsY1RhZykgJiZcbiAgICAgICAgICAoKENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVjayBpbnN0YW5jZW9mIFJlZ0V4cCAmJlxuICAgICAgICAgICAgcmVnRXhwVGVzdChDVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2ssIGxjVGFnKSkgfHxcbiAgICAgICAgICAgIChDVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2sgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJlxuICAgICAgICAgICAgICBDVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2sobGNUYWcpKSkgJiZcbiAgICAgICAgICAoKENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmF0dHJpYnV0ZU5hbWVDaGVjayBpbnN0YW5jZW9mIFJlZ0V4cCAmJlxuICAgICAgICAgICAgcmVnRXhwVGVzdChDVVNUT01fRUxFTUVOVF9IQU5ETElORy5hdHRyaWJ1dGVOYW1lQ2hlY2ssIGxjTmFtZSkpIHx8XG4gICAgICAgICAgICAoQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcuYXR0cmlidXRlTmFtZUNoZWNrIGluc3RhbmNlb2YgRnVuY3Rpb24gJiZcbiAgICAgICAgICAgICAgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcuYXR0cmlidXRlTmFtZUNoZWNrKGxjTmFtZSkpKSkgfHxcbiAgICAgICAgLy8gQWx0ZXJuYXRpdmUsIHNlY29uZCBjb25kaXRpb24gY2hlY2tzIGlmIGl0J3MgYW4gYGlzYC1hdHRyaWJ1dGUsIEFORFxuICAgICAgICAvLyB0aGUgdmFsdWUgcGFzc2VzIHdoYXRldmVyIHRoZSB1c2VyIGhhcyBjb25maWd1cmVkIGZvciBDVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2tcbiAgICAgICAgKGxjTmFtZSA9PT0gJ2lzJyAmJlxuICAgICAgICAgIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmFsbG93Q3VzdG9taXplZEJ1aWx0SW5FbGVtZW50cyAmJlxuICAgICAgICAgICgoQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrIGluc3RhbmNlb2YgUmVnRXhwICYmXG4gICAgICAgICAgICByZWdFeHBUZXN0KENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVjaywgdmFsdWUpKSB8fFxuICAgICAgICAgICAgKENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVjayBpbnN0YW5jZW9mIEZ1bmN0aW9uICYmXG4gICAgICAgICAgICAgIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVjayh2YWx1ZSkpKSlcbiAgICAgICkge1xuICAgICAgICAvLyBJZiB1c2VyIGhhcyBzdXBwbGllZCBhIHJlZ2V4cCBvciBmdW5jdGlvbiBpbiBDVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2ssIHdlIG5lZWQgdG8gYWxzbyBhbGxvdyBkZXJpdmVkIGN1c3RvbSBlbGVtZW50cyB1c2luZyB0aGUgc2FtZSB0YWdOYW1lIHRlc3QuXG4gICAgICAgIC8vIEFkZGl0aW9uYWxseSwgd2UgbmVlZCB0byBhbGxvdyBhdHRyaWJ1dGVzIHBhc3NpbmcgdGhlIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmF0dHJpYnV0ZU5hbWVDaGVjayB1c2VyIGhhcyBjb25maWd1cmVkLCBhcyBjdXN0b20gZWxlbWVudHMgY2FuIGRlZmluZSB0aGVzZSBhdCB0aGVpciBvd24gZGlzY3JldGlvbi5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8qIENoZWNrIHZhbHVlIGlzIHNhZmUuIEZpcnN0LCBpcyBhdHRyIGluZXJ0PyBJZiBzbywgaXMgc2FmZSAqL1xuICAgIH0gZWxzZSBpZiAoVVJJX1NBRkVfQVRUUklCVVRFU1tsY05hbWVdKSB7XG4gICAgICAvLyBUaGlzIGF0dHJpYnV0ZSBpcyBzYWZlXG4gICAgICAvKiBDaGVjayBubyBzY3JpcHQsIGRhdGEgb3IgdW5rbm93biBwb3NzaWJseSB1bnNhZmUgVVJJXG4gICAgICAgIHVubGVzcyB3ZSBrbm93IFVSSSB2YWx1ZXMgYXJlIHNhZmUgZm9yIHRoYXQgYXR0cmlidXRlICovXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHJlZ0V4cFRlc3QoSVNfQUxMT1dFRF9VUkksIHN0cmluZ1JlcGxhY2UodmFsdWUsIEFUVFJfV0hJVEVTUEFDRSwgJycpKVxuICAgICkge1xuICAgICAgLy8gVGhpcyBhdHRyaWJ1dGUgaXMgc2FmZVxuICAgICAgLyogS2VlcCBpbWFnZSBkYXRhIFVSSXMgYWxpdmUgaWYgc3JjL3hsaW5rOmhyZWYgaXMgYWxsb3dlZCAqL1xuICAgICAgLyogRnVydGhlciBwcmV2ZW50IGdhZGdldCBYU1MgZm9yIGR5bmFtaWNhbGx5IGJ1aWx0IHNjcmlwdCB0YWdzICovXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIChsY05hbWUgPT09ICdzcmMnIHx8IGxjTmFtZSA9PT0gJ3hsaW5rOmhyZWYnIHx8IGxjTmFtZSA9PT0gJ2hyZWYnKSAmJlxuICAgICAgbGNUYWcgIT09ICdzY3JpcHQnICYmXG4gICAgICBzdHJpbmdJbmRleE9mKHZhbHVlLCAnZGF0YTonKSA9PT0gMCAmJlxuICAgICAgREFUQV9VUklfVEFHU1tsY1RhZ11cbiAgICApIHtcbiAgICAgIC8vIFRoaXMgYXR0cmlidXRlIGlzIHNhZmVcbiAgICAgIC8qIEFsbG93IHVua25vd24gcHJvdG9jb2xzOiBUaGlzIHByb3ZpZGVzIHN1cHBvcnQgZm9yIGxpbmtzIHRoYXRcbiAgICAgICAgYXJlIGhhbmRsZWQgYnkgcHJvdG9jb2wgaGFuZGxlcnMgd2hpY2ggbWF5IGJlIHVua25vd24gYWhlYWQgb2ZcbiAgICAgICAgdGltZSwgZS5nLiBmYjosIHNwb3RpZnk6ICovXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIEFMTE9XX1VOS05PV05fUFJPVE9DT0xTICYmXG4gICAgICAhcmVnRXhwVGVzdChJU19TQ1JJUFRfT1JfREFUQSwgc3RyaW5nUmVwbGFjZSh2YWx1ZSwgQVRUUl9XSElURVNQQUNFLCAnJykpXG4gICAgKSB7XG4gICAgICAvLyBUaGlzIGF0dHJpYnV0ZSBpcyBzYWZlXG4gICAgICAvKiBDaGVjayBmb3IgYmluYXJ5IGF0dHJpYnV0ZXMgKi9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZWdhdGVkLWNvbmRpdGlvblxuICAgIH0gZWxzZSBpZiAoIXZhbHVlKSB7XG4gICAgICAvLyBCaW5hcnkgYXR0cmlidXRlcyBhcmUgc2FmZSBhdCB0aGlzIHBvaW50XG4gICAgICAvKiBBbnl0aGluZyBlbHNlLCBwcmVzdW1lIHVuc2FmZSwgZG8gbm90IGFkZCBpdCBiYWNrICovXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogX2Jhc2ljQ3VzdG9tRWxlbWVudENoZWNrXG4gICAqIGNoZWNrcyBpZiBhdCBsZWFzdCBvbmUgZGFzaCBpcyBpbmNsdWRlZCBpbiB0YWdOYW1lLCBhbmQgaXQncyBub3QgdGhlIGZpcnN0IGNoYXJcbiAgICogZm9yIG1vcmUgc29waGlzdGljYXRlZCBjaGVja2luZyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy92YWxpZGF0ZS1lbGVtZW50LW5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUgbmFtZSBvZiB0aGUgdGFnIG9mIHRoZSBub2RlIHRvIHNhbml0aXplXG4gICAqL1xuICBjb25zdCBfYmFzaWNDdXN0b21FbGVtZW50VGVzdCA9IGZ1bmN0aW9uICh0YWdOYW1lKSB7XG4gICAgcmV0dXJuIHRhZ05hbWUuaW5kZXhPZignLScpID4gMDtcbiAgfTtcblxuICAvKipcbiAgICogX3Nhbml0aXplQXR0cmlidXRlc1xuICAgKlxuICAgKiBAcHJvdGVjdCBhdHRyaWJ1dGVzXG4gICAqIEBwcm90ZWN0IG5vZGVOYW1lXG4gICAqIEBwcm90ZWN0IHJlbW92ZUF0dHJpYnV0ZVxuICAgKiBAcHJvdGVjdCBzZXRBdHRyaWJ1dGVcbiAgICpcbiAgICogQHBhcmFtICB7Tm9kZX0gY3VycmVudE5vZGUgdG8gc2FuaXRpemVcbiAgICovXG4gIGNvbnN0IF9zYW5pdGl6ZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoY3VycmVudE5vZGUpIHtcbiAgICBsZXQgYXR0cjtcbiAgICBsZXQgdmFsdWU7XG4gICAgbGV0IGxjTmFtZTtcbiAgICBsZXQgbDtcbiAgICAvKiBFeGVjdXRlIGEgaG9vayBpZiBwcmVzZW50ICovXG4gICAgX2V4ZWN1dGVIb29rKCdiZWZvcmVTYW5pdGl6ZUF0dHJpYnV0ZXMnLCBjdXJyZW50Tm9kZSwgbnVsbCk7XG5cbiAgICBjb25zdCB7IGF0dHJpYnV0ZXMgfSA9IGN1cnJlbnROb2RlO1xuXG4gICAgLyogQ2hlY2sgaWYgd2UgaGF2ZSBhdHRyaWJ1dGVzOyBpZiBub3Qgd2UgbWlnaHQgaGF2ZSBhIHRleHQgbm9kZSAqL1xuICAgIGlmICghYXR0cmlidXRlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhvb2tFdmVudCA9IHtcbiAgICAgIGF0dHJOYW1lOiAnJyxcbiAgICAgIGF0dHJWYWx1ZTogJycsXG4gICAgICBrZWVwQXR0cjogdHJ1ZSxcbiAgICAgIGFsbG93ZWRBdHRyaWJ1dGVzOiBBTExPV0VEX0FUVFIsXG4gICAgfTtcbiAgICBsID0gYXR0cmlidXRlcy5sZW5ndGg7XG5cbiAgICAvKiBHbyBiYWNrd2FyZHMgb3ZlciBhbGwgYXR0cmlidXRlczsgc2FmZWx5IHJlbW92ZSBiYWQgb25lcyAqL1xuICAgIHdoaWxlIChsLS0pIHtcbiAgICAgIGF0dHIgPSBhdHRyaWJ1dGVzW2xdO1xuICAgICAgY29uc3QgeyBuYW1lLCBuYW1lc3BhY2VVUkkgfSA9IGF0dHI7XG4gICAgICB2YWx1ZSA9IHN0cmluZ1RyaW0oYXR0ci52YWx1ZSk7XG4gICAgICBsY05hbWUgPSB0cmFuc2Zvcm1DYXNlRnVuYyhuYW1lKTtcblxuICAgICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgICAgaG9va0V2ZW50LmF0dHJOYW1lID0gbGNOYW1lO1xuICAgICAgaG9va0V2ZW50LmF0dHJWYWx1ZSA9IHZhbHVlO1xuICAgICAgaG9va0V2ZW50LmtlZXBBdHRyID0gdHJ1ZTtcbiAgICAgIGhvb2tFdmVudC5mb3JjZUtlZXBBdHRyID0gdW5kZWZpbmVkOyAvLyBBbGxvd3MgZGV2ZWxvcGVycyB0byBzZWUgdGhpcyBpcyBhIHByb3BlcnR5IHRoZXkgY2FuIHNldFxuICAgICAgX2V4ZWN1dGVIb29rKCd1cG9uU2FuaXRpemVBdHRyaWJ1dGUnLCBjdXJyZW50Tm9kZSwgaG9va0V2ZW50KTtcbiAgICAgIHZhbHVlID0gaG9va0V2ZW50LmF0dHJWYWx1ZTtcbiAgICAgIC8qIERpZCB0aGUgaG9va3MgYXBwcm92ZSBvZiB0aGUgYXR0cmlidXRlPyAqL1xuICAgICAgaWYgKGhvb2tFdmVudC5mb3JjZUtlZXBBdHRyKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvKiBSZW1vdmUgYXR0cmlidXRlICovXG4gICAgICBfcmVtb3ZlQXR0cmlidXRlKG5hbWUsIGN1cnJlbnROb2RlKTtcblxuICAgICAgLyogRGlkIHRoZSBob29rcyBhcHByb3ZlIG9mIHRoZSBhdHRyaWJ1dGU/ICovXG4gICAgICBpZiAoIWhvb2tFdmVudC5rZWVwQXR0cikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLyogV29yayBhcm91bmQgYSBzZWN1cml0eSBpc3N1ZSBpbiBqUXVlcnkgMy4wICovXG4gICAgICBpZiAocmVnRXhwVGVzdCgvXFwvPi9pLCB2YWx1ZSkpIHtcbiAgICAgICAgX3JlbW92ZUF0dHJpYnV0ZShuYW1lLCBjdXJyZW50Tm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvKiBTYW5pdGl6ZSBhdHRyaWJ1dGUgY29udGVudCB0byBiZSB0ZW1wbGF0ZS1zYWZlICovXG4gICAgICBpZiAoU0FGRV9GT1JfVEVNUExBVEVTKSB7XG4gICAgICAgIHZhbHVlID0gc3RyaW5nUmVwbGFjZSh2YWx1ZSwgTVVTVEFDSEVfRVhQUiwgJyAnKTtcbiAgICAgICAgdmFsdWUgPSBzdHJpbmdSZXBsYWNlKHZhbHVlLCBFUkJfRVhQUiwgJyAnKTtcbiAgICAgIH1cblxuICAgICAgLyogSXMgYHZhbHVlYCB2YWxpZCBmb3IgdGhpcyBhdHRyaWJ1dGU/ICovXG4gICAgICBjb25zdCBsY1RhZyA9IHRyYW5zZm9ybUNhc2VGdW5jKGN1cnJlbnROb2RlLm5vZGVOYW1lKTtcbiAgICAgIGlmICghX2lzVmFsaWRBdHRyaWJ1dGUobGNUYWcsIGxjTmFtZSwgdmFsdWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvKiBIYW5kbGUgaW52YWxpZCBkYXRhLSogYXR0cmlidXRlIHNldCBieSB0cnktY2F0Y2hpbmcgaXQgKi9cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChuYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICBjdXJyZW50Tm9kZS5zZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkksIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKiBGYWxsYmFjayB0byBzZXRBdHRyaWJ1dGUoKSBmb3IgYnJvd3Nlci11bnJlY29nbml6ZWQgbmFtZXNwYWNlcyBlLmcuIFwieC1zY2hlbWFcIi4gKi9cbiAgICAgICAgICBjdXJyZW50Tm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXJyYXlQb3AoRE9NUHVyaWZ5LnJlbW92ZWQpO1xuICAgICAgfSBjYXRjaCAoXykge31cbiAgICB9XG5cbiAgICAvKiBFeGVjdXRlIGEgaG9vayBpZiBwcmVzZW50ICovXG4gICAgX2V4ZWN1dGVIb29rKCdhZnRlclNhbml0aXplQXR0cmlidXRlcycsIGN1cnJlbnROb2RlLCBudWxsKTtcbiAgfTtcblxuICAvKipcbiAgICogX3Nhbml0aXplU2hhZG93RE9NXG4gICAqXG4gICAqIEBwYXJhbSAge0RvY3VtZW50RnJhZ21lbnR9IGZyYWdtZW50IHRvIGl0ZXJhdGUgb3ZlciByZWN1cnNpdmVseVxuICAgKi9cbiAgY29uc3QgX3Nhbml0aXplU2hhZG93RE9NID0gZnVuY3Rpb24gKGZyYWdtZW50KSB7XG4gICAgbGV0IHNoYWRvd05vZGU7XG4gICAgY29uc3Qgc2hhZG93SXRlcmF0b3IgPSBfY3JlYXRlSXRlcmF0b3IoZnJhZ21lbnQpO1xuXG4gICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgIF9leGVjdXRlSG9vaygnYmVmb3JlU2FuaXRpemVTaGFkb3dET00nLCBmcmFnbWVudCwgbnVsbCk7XG5cbiAgICB3aGlsZSAoKHNoYWRvd05vZGUgPSBzaGFkb3dJdGVyYXRvci5uZXh0Tm9kZSgpKSkge1xuICAgICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgICAgX2V4ZWN1dGVIb29rKCd1cG9uU2FuaXRpemVTaGFkb3dOb2RlJywgc2hhZG93Tm9kZSwgbnVsbCk7XG5cbiAgICAgIC8qIFNhbml0aXplIHRhZ3MgYW5kIGVsZW1lbnRzICovXG4gICAgICBpZiAoX3Nhbml0aXplRWxlbWVudHMoc2hhZG93Tm9kZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8qIERlZXAgc2hhZG93IERPTSBkZXRlY3RlZCAqL1xuICAgICAgaWYgKHNoYWRvd05vZGUuY29udGVudCBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgICAgX3Nhbml0aXplU2hhZG93RE9NKHNoYWRvd05vZGUuY29udGVudCk7XG4gICAgICB9XG5cbiAgICAgIC8qIENoZWNrIGF0dHJpYnV0ZXMsIHNhbml0aXplIGlmIG5lY2Vzc2FyeSAqL1xuICAgICAgX3Nhbml0aXplQXR0cmlidXRlcyhzaGFkb3dOb2RlKTtcbiAgICB9XG5cbiAgICAvKiBFeGVjdXRlIGEgaG9vayBpZiBwcmVzZW50ICovXG4gICAgX2V4ZWN1dGVIb29rKCdhZnRlclNhbml0aXplU2hhZG93RE9NJywgZnJhZ21lbnQsIG51bGwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTYW5pdGl6ZVxuICAgKiBQdWJsaWMgbWV0aG9kIHByb3ZpZGluZyBjb3JlIHNhbml0YXRpb24gZnVuY3Rpb25hbGl0eVxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xOb2RlfSBkaXJ0eSBzdHJpbmcgb3IgRE9NIG5vZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuICBET01QdXJpZnkuc2FuaXRpemUgPSBmdW5jdGlvbiAoZGlydHksIGNmZykge1xuICAgIGxldCBib2R5O1xuICAgIGxldCBpbXBvcnRlZE5vZGU7XG4gICAgbGV0IGN1cnJlbnROb2RlO1xuICAgIGxldCBvbGROb2RlO1xuICAgIGxldCByZXR1cm5Ob2RlO1xuICAgIC8qIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgc3RyaW5nIHRvIHNhbml0aXplLlxuICAgICAgRE8gTk9UIHJldHVybiBlYXJseSwgYXMgdGhpcyB3aWxsIHJldHVybiB0aGUgd3JvbmcgdHlwZSBpZlxuICAgICAgdGhlIHVzZXIgaGFzIHJlcXVlc3RlZCBhIERPTSBvYmplY3QgcmF0aGVyIHRoYW4gYSBzdHJpbmcgKi9cbiAgICBJU19FTVBUWV9JTlBVVCA9ICFkaXJ0eTtcbiAgICBpZiAoSVNfRU1QVFlfSU5QVVQpIHtcbiAgICAgIGRpcnR5ID0gJzwhLS0+JztcbiAgICB9XG5cbiAgICAvKiBTdHJpbmdpZnksIGluIGNhc2UgZGlydHkgaXMgYW4gb2JqZWN0ICovXG4gICAgaWYgKHR5cGVvZiBkaXJ0eSAhPT0gJ3N0cmluZycgJiYgIV9pc05vZGUoZGlydHkpKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVnYXRlZC1jb25kaXRpb25cbiAgICAgIGlmICh0eXBlb2YgZGlydHkudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgdHlwZUVycm9yQ3JlYXRlKCd0b1N0cmluZyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlydHkgPSBkaXJ0eS50b1N0cmluZygpO1xuICAgICAgICBpZiAodHlwZW9mIGRpcnR5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRocm93IHR5cGVFcnJvckNyZWF0ZSgnZGlydHkgaXMgbm90IGEgc3RyaW5nLCBhYm9ydGluZycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogQ2hlY2sgd2UgY2FuIHJ1bi4gT3RoZXJ3aXNlIGZhbGwgYmFjayBvciBpZ25vcmUgKi9cbiAgICBpZiAoIURPTVB1cmlmeS5pc1N1cHBvcnRlZCkge1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2Ygd2luZG93LnRvU3RhdGljSFRNTCA9PT0gJ29iamVjdCcgfHxcbiAgICAgICAgdHlwZW9mIHdpbmRvdy50b1N0YXRpY0hUTUwgPT09ICdmdW5jdGlvbidcbiAgICAgICkge1xuICAgICAgICBpZiAodHlwZW9mIGRpcnR5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiB3aW5kb3cudG9TdGF0aWNIVE1MKGRpcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfaXNOb2RlKGRpcnR5KSkge1xuICAgICAgICAgIHJldHVybiB3aW5kb3cudG9TdGF0aWNIVE1MKGRpcnR5Lm91dGVySFRNTCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRpcnR5O1xuICAgIH1cblxuICAgIC8qIEFzc2lnbiBjb25maWcgdmFycyAqL1xuICAgIGlmICghU0VUX0NPTkZJRykge1xuICAgICAgX3BhcnNlQ29uZmlnKGNmZyk7XG4gICAgfVxuXG4gICAgLyogQ2xlYW4gdXAgcmVtb3ZlZCBlbGVtZW50cyAqL1xuICAgIERPTVB1cmlmeS5yZW1vdmVkID0gW107XG5cbiAgICAvKiBDaGVjayBpZiBkaXJ0eSBpcyBjb3JyZWN0bHkgdHlwZWQgZm9yIElOX1BMQUNFICovXG4gICAgaWYgKHR5cGVvZiBkaXJ0eSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIElOX1BMQUNFID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKElOX1BMQUNFKSB7XG4gICAgICAvKiBEbyBzb21lIGVhcmx5IHByZS1zYW5pdGl6YXRpb24gdG8gYXZvaWQgdW5zYWZlIHJvb3Qgbm9kZXMgKi9cbiAgICAgIGlmIChkaXJ0eS5ub2RlTmFtZSkge1xuICAgICAgICBjb25zdCB0YWdOYW1lID0gdHJhbnNmb3JtQ2FzZUZ1bmMoZGlydHkubm9kZU5hbWUpO1xuICAgICAgICBpZiAoIUFMTE9XRURfVEFHU1t0YWdOYW1lXSB8fCBGT1JCSURfVEFHU1t0YWdOYW1lXSkge1xuICAgICAgICAgIHRocm93IHR5cGVFcnJvckNyZWF0ZShcbiAgICAgICAgICAgICdyb290IG5vZGUgaXMgZm9yYmlkZGVuIGFuZCBjYW5ub3QgYmUgc2FuaXRpemVkIGluLXBsYWNlJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRpcnR5IGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgLyogSWYgZGlydHkgaXMgYSBET00gZWxlbWVudCwgYXBwZW5kIHRvIGFuIGVtcHR5IGRvY3VtZW50IHRvIGF2b2lkXG4gICAgICAgICBlbGVtZW50cyBiZWluZyBzdHJpcHBlZCBieSB0aGUgcGFyc2VyICovXG4gICAgICBib2R5ID0gX2luaXREb2N1bWVudCgnPCEtLS0tPicpO1xuICAgICAgaW1wb3J0ZWROb2RlID0gYm9keS5vd25lckRvY3VtZW50LmltcG9ydE5vZGUoZGlydHksIHRydWUpO1xuICAgICAgaWYgKGltcG9ydGVkTm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBpbXBvcnRlZE5vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICAvKiBOb2RlIGlzIGFscmVhZHkgYSBib2R5LCB1c2UgYXMgaXMgKi9cbiAgICAgICAgYm9keSA9IGltcG9ydGVkTm9kZTtcbiAgICAgIH0gZWxzZSBpZiAoaW1wb3J0ZWROb2RlLm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgICAgYm9keSA9IGltcG9ydGVkTm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3ByZWZlci1kb20tbm9kZS1hcHBlbmRcbiAgICAgICAgYm9keS5hcHBlbmRDaGlsZChpbXBvcnRlZE5vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBFeGl0IGRpcmVjdGx5IGlmIHdlIGhhdmUgbm90aGluZyB0byBkbyAqL1xuICAgICAgaWYgKFxuICAgICAgICAhUkVUVVJOX0RPTSAmJlxuICAgICAgICAhU0FGRV9GT1JfVEVNUExBVEVTICYmXG4gICAgICAgICFXSE9MRV9ET0NVTUVOVCAmJlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItaW5jbHVkZXNcbiAgICAgICAgZGlydHkuaW5kZXhPZignPCcpID09PSAtMVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVzdGVkVHlwZXNQb2xpY3kgJiYgUkVUVVJOX1RSVVNURURfVFlQRVxuICAgICAgICAgID8gdHJ1c3RlZFR5cGVzUG9saWN5LmNyZWF0ZUhUTUwoZGlydHkpXG4gICAgICAgICAgOiBkaXJ0eTtcbiAgICAgIH1cblxuICAgICAgLyogSW5pdGlhbGl6ZSB0aGUgZG9jdW1lbnQgdG8gd29yayBvbiAqL1xuICAgICAgYm9keSA9IF9pbml0RG9jdW1lbnQoZGlydHkpO1xuXG4gICAgICAvKiBDaGVjayB3ZSBoYXZlIGEgRE9NIG5vZGUgZnJvbSB0aGUgZGF0YSAqL1xuICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgIHJldHVybiBSRVRVUk5fRE9NID8gbnVsbCA6IFJFVFVSTl9UUlVTVEVEX1RZUEUgPyBlbXB0eUhUTUwgOiAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBSZW1vdmUgZmlyc3QgZWxlbWVudCBub2RlIChvdXJzKSBpZiBGT1JDRV9CT0RZIGlzIHNldCAqL1xuICAgIGlmIChib2R5ICYmIEZPUkNFX0JPRFkpIHtcbiAgICAgIF9mb3JjZVJlbW92ZShib2R5LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIC8qIEdldCBub2RlIGl0ZXJhdG9yICovXG4gICAgY29uc3Qgbm9kZUl0ZXJhdG9yID0gX2NyZWF0ZUl0ZXJhdG9yKElOX1BMQUNFID8gZGlydHkgOiBib2R5KTtcblxuICAgIC8qIE5vdyBzdGFydCBpdGVyYXRpbmcgb3ZlciB0aGUgY3JlYXRlZCBkb2N1bWVudCAqL1xuICAgIHdoaWxlICgoY3VycmVudE5vZGUgPSBub2RlSXRlcmF0b3IubmV4dE5vZGUoKSkpIHtcbiAgICAgIC8qIEZpeCBJRSdzIHN0cmFuZ2UgYmVoYXZpb3Igd2l0aCBtYW5pcHVsYXRlZCB0ZXh0Tm9kZXMgIzg5ICovXG4gICAgICBpZiAoY3VycmVudE5vZGUubm9kZVR5cGUgPT09IDMgJiYgY3VycmVudE5vZGUgPT09IG9sZE5vZGUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8qIFNhbml0aXplIHRhZ3MgYW5kIGVsZW1lbnRzICovXG4gICAgICBpZiAoX3Nhbml0aXplRWxlbWVudHMoY3VycmVudE5vZGUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvKiBTaGFkb3cgRE9NIGRldGVjdGVkLCBzYW5pdGl6ZSBpdCAqL1xuICAgICAgaWYgKGN1cnJlbnROb2RlLmNvbnRlbnQgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgIF9zYW5pdGl6ZVNoYWRvd0RPTShjdXJyZW50Tm9kZS5jb250ZW50KTtcbiAgICAgIH1cblxuICAgICAgLyogQ2hlY2sgYXR0cmlidXRlcywgc2FuaXRpemUgaWYgbmVjZXNzYXJ5ICovXG4gICAgICBfc2FuaXRpemVBdHRyaWJ1dGVzKGN1cnJlbnROb2RlKTtcblxuICAgICAgb2xkTm9kZSA9IGN1cnJlbnROb2RlO1xuICAgIH1cblxuICAgIG9sZE5vZGUgPSBudWxsO1xuXG4gICAgLyogSWYgd2Ugc2FuaXRpemVkIGBkaXJ0eWAgaW4tcGxhY2UsIHJldHVybiBpdC4gKi9cbiAgICBpZiAoSU5fUExBQ0UpIHtcbiAgICAgIHJldHVybiBkaXJ0eTtcbiAgICB9XG5cbiAgICAvKiBSZXR1cm4gc2FuaXRpemVkIHN0cmluZyBvciBET00gKi9cbiAgICBpZiAoUkVUVVJOX0RPTSkge1xuICAgICAgaWYgKFJFVFVSTl9ET01fRlJBR01FTlQpIHtcbiAgICAgICAgcmV0dXJuTm9kZSA9IGNyZWF0ZURvY3VtZW50RnJhZ21lbnQuY2FsbChib2R5Lm93bmVyRG9jdW1lbnQpO1xuXG4gICAgICAgIHdoaWxlIChib2R5LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItZG9tLW5vZGUtYXBwZW5kXG4gICAgICAgICAgcmV0dXJuTm9kZS5hcHBlbmRDaGlsZChib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm5Ob2RlID0gYm9keTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFMTE9XRURfQVRUUi5zaGFkb3dyb290KSB7XG4gICAgICAgIC8qXG4gICAgICAgICAgQWRvcHROb2RlKCkgaXMgbm90IHVzZWQgYmVjYXVzZSBpbnRlcm5hbCBzdGF0ZSBpcyBub3QgcmVzZXRcbiAgICAgICAgICAoZS5nLiB0aGUgcGFzdCBuYW1lcyBtYXAgb2YgYSBIVE1MRm9ybUVsZW1lbnQpLCB0aGlzIGlzIHNhZmVcbiAgICAgICAgICBpbiB0aGVvcnkgYnV0IHdlIHdvdWxkIHJhdGhlciBub3QgcmlzayBhbm90aGVyIGF0dGFjayB2ZWN0b3IuXG4gICAgICAgICAgVGhlIHN0YXRlIHRoYXQgaXMgY2xvbmVkIGJ5IGltcG9ydE5vZGUoKSBpcyBleHBsaWNpdGx5IGRlZmluZWRcbiAgICAgICAgICBieSB0aGUgc3BlY3MuXG4gICAgICAgICovXG4gICAgICAgIHJldHVybk5vZGUgPSBpbXBvcnROb2RlLmNhbGwob3JpZ2luYWxEb2N1bWVudCwgcmV0dXJuTm9kZSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXR1cm5Ob2RlO1xuICAgIH1cblxuICAgIGxldCBzZXJpYWxpemVkSFRNTCA9IFdIT0xFX0RPQ1VNRU5UID8gYm9keS5vdXRlckhUTUwgOiBib2R5LmlubmVySFRNTDtcblxuICAgIC8qIFNlcmlhbGl6ZSBkb2N0eXBlIGlmIGFsbG93ZWQgKi9cbiAgICBpZiAoXG4gICAgICBXSE9MRV9ET0NVTUVOVCAmJlxuICAgICAgQUxMT1dFRF9UQUdTWychZG9jdHlwZSddICYmXG4gICAgICBib2R5Lm93bmVyRG9jdW1lbnQgJiZcbiAgICAgIGJvZHkub3duZXJEb2N1bWVudC5kb2N0eXBlICYmXG4gICAgICBib2R5Lm93bmVyRG9jdW1lbnQuZG9jdHlwZS5uYW1lICYmXG4gICAgICByZWdFeHBUZXN0KEVYUFJFU1NJT05TLkRPQ1RZUEVfTkFNRSwgYm9keS5vd25lckRvY3VtZW50LmRvY3R5cGUubmFtZSlcbiAgICApIHtcbiAgICAgIHNlcmlhbGl6ZWRIVE1MID1cbiAgICAgICAgJzwhRE9DVFlQRSAnICsgYm9keS5vd25lckRvY3VtZW50LmRvY3R5cGUubmFtZSArICc+XFxuJyArIHNlcmlhbGl6ZWRIVE1MO1xuICAgIH1cblxuICAgIC8qIFNhbml0aXplIGZpbmFsIHN0cmluZyB0ZW1wbGF0ZS1zYWZlICovXG4gICAgaWYgKFNBRkVfRk9SX1RFTVBMQVRFUykge1xuICAgICAgc2VyaWFsaXplZEhUTUwgPSBzdHJpbmdSZXBsYWNlKHNlcmlhbGl6ZWRIVE1MLCBNVVNUQUNIRV9FWFBSLCAnICcpO1xuICAgICAgc2VyaWFsaXplZEhUTUwgPSBzdHJpbmdSZXBsYWNlKHNlcmlhbGl6ZWRIVE1MLCBFUkJfRVhQUiwgJyAnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1c3RlZFR5cGVzUG9saWN5ICYmIFJFVFVSTl9UUlVTVEVEX1RZUEVcbiAgICAgID8gdHJ1c3RlZFR5cGVzUG9saWN5LmNyZWF0ZUhUTUwoc2VyaWFsaXplZEhUTUwpXG4gICAgICA6IHNlcmlhbGl6ZWRIVE1MO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQdWJsaWMgbWV0aG9kIHRvIHNldCB0aGUgY29uZmlndXJhdGlvbiBvbmNlXG4gICAqIHNldENvbmZpZ1xuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAqL1xuICBET01QdXJpZnkuc2V0Q29uZmlnID0gZnVuY3Rpb24gKGNmZykge1xuICAgIF9wYXJzZUNvbmZpZyhjZmcpO1xuICAgIFNFVF9DT05GSUcgPSB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQdWJsaWMgbWV0aG9kIHRvIHJlbW92ZSB0aGUgY29uZmlndXJhdGlvblxuICAgKiBjbGVhckNvbmZpZ1xuICAgKlxuICAgKi9cbiAgRE9NUHVyaWZ5LmNsZWFyQ29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgIENPTkZJRyA9IG51bGw7XG4gICAgU0VUX0NPTkZJRyA9IGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQdWJsaWMgbWV0aG9kIHRvIGNoZWNrIGlmIGFuIGF0dHJpYnV0ZSB2YWx1ZSBpcyB2YWxpZC5cbiAgICogVXNlcyBsYXN0IHNldCBjb25maWcsIGlmIGFueS4gT3RoZXJ3aXNlLCB1c2VzIGNvbmZpZyBkZWZhdWx0cy5cbiAgICogaXNWYWxpZEF0dHJpYnV0ZVxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHRhZyBUYWcgbmFtZSBvZiBjb250YWluaW5nIGVsZW1lbnQuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gYXR0ciBBdHRyaWJ1dGUgbmFtZS5cbiAgICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZSBBdHRyaWJ1dGUgdmFsdWUuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIHZhbGlkLiBPdGhlcndpc2UsIHJldHVybnMgZmFsc2UuXG4gICAqL1xuICBET01QdXJpZnkuaXNWYWxpZEF0dHJpYnV0ZSA9IGZ1bmN0aW9uICh0YWcsIGF0dHIsIHZhbHVlKSB7XG4gICAgLyogSW5pdGlhbGl6ZSBzaGFyZWQgY29uZmlnIHZhcnMgaWYgbmVjZXNzYXJ5LiAqL1xuICAgIGlmICghQ09ORklHKSB7XG4gICAgICBfcGFyc2VDb25maWcoe30pO1xuICAgIH1cblxuICAgIGNvbnN0IGxjVGFnID0gdHJhbnNmb3JtQ2FzZUZ1bmModGFnKTtcbiAgICBjb25zdCBsY05hbWUgPSB0cmFuc2Zvcm1DYXNlRnVuYyhhdHRyKTtcbiAgICByZXR1cm4gX2lzVmFsaWRBdHRyaWJ1dGUobGNUYWcsIGxjTmFtZSwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGRIb29rXG4gICAqIFB1YmxpYyBtZXRob2QgdG8gYWRkIERPTVB1cmlmeSBob29rc1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZW50cnlQb2ludCBlbnRyeSBwb2ludCBmb3IgdGhlIGhvb2sgdG8gYWRkXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhvb2tGdW5jdGlvbiBmdW5jdGlvbiB0byBleGVjdXRlXG4gICAqL1xuICBET01QdXJpZnkuYWRkSG9vayA9IGZ1bmN0aW9uIChlbnRyeVBvaW50LCBob29rRnVuY3Rpb24pIHtcbiAgICBpZiAodHlwZW9mIGhvb2tGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGhvb2tzW2VudHJ5UG9pbnRdID0gaG9va3NbZW50cnlQb2ludF0gfHwgW107XG4gICAgYXJyYXlQdXNoKGhvb2tzW2VudHJ5UG9pbnRdLCBob29rRnVuY3Rpb24pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVIb29rXG4gICAqIFB1YmxpYyBtZXRob2QgdG8gcmVtb3ZlIGEgRE9NUHVyaWZ5IGhvb2sgYXQgYSBnaXZlbiBlbnRyeVBvaW50XG4gICAqIChwb3BzIGl0IGZyb20gdGhlIHN0YWNrIG9mIGhvb2tzIGlmIG1vcmUgYXJlIHByZXNlbnQpXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBlbnRyeVBvaW50IGVudHJ5IHBvaW50IGZvciB0aGUgaG9vayB0byByZW1vdmVcbiAgICovXG4gIERPTVB1cmlmeS5yZW1vdmVIb29rID0gZnVuY3Rpb24gKGVudHJ5UG9pbnQpIHtcbiAgICBpZiAoaG9va3NbZW50cnlQb2ludF0pIHtcbiAgICAgIGFycmF5UG9wKGhvb2tzW2VudHJ5UG9pbnRdKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZUhvb2tzXG4gICAqIFB1YmxpYyBtZXRob2QgdG8gcmVtb3ZlIGFsbCBET01QdXJpZnkgaG9va3MgYXQgYSBnaXZlbiBlbnRyeVBvaW50XG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZ30gZW50cnlQb2ludCBlbnRyeSBwb2ludCBmb3IgdGhlIGhvb2tzIHRvIHJlbW92ZVxuICAgKi9cbiAgRE9NUHVyaWZ5LnJlbW92ZUhvb2tzID0gZnVuY3Rpb24gKGVudHJ5UG9pbnQpIHtcbiAgICBpZiAoaG9va3NbZW50cnlQb2ludF0pIHtcbiAgICAgIGhvb2tzW2VudHJ5UG9pbnRdID0gW107XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVBbGxIb29rc1xuICAgKiBQdWJsaWMgbWV0aG9kIHRvIHJlbW92ZSBhbGwgRE9NUHVyaWZ5IGhvb2tzXG4gICAqXG4gICAqL1xuICBET01QdXJpZnkucmVtb3ZlQWxsSG9va3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgaG9va3MgPSB7fTtcbiAgfTtcblxuICByZXR1cm4gRE9NUHVyaWZ5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVET01QdXJpZnkoKTtcbiIsICJpbXBvcnQgeyBsaXZlUHJldmlld1Bvc3RQcm9jZXNzb3JQbHVnaW4gfSBmcm9tICcuL2xpdmVQcmV2aWV3UG9zdFByb2Nlc3Nvcic7XHJcbmltcG9ydCB7IEFwcCwgZGVib3VuY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgZ2V0VmF1bHRBYnNvbHV0ZVBhdGggfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHsgREVGQVVMVF9TRVRUSU5HUywgVmFyaWFibGVzUGx1Z2luU2V0dGluZ3MgfSBmcm9tICcuL3NldHRpbmdzJztcclxuaW1wb3J0ICogYXMgRE9NUHVyaWZ5IGZyb20gJ2RvbXB1cmlmeSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYXJpYWJsZXNQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBWYXJpYWJsZXNQbHVnaW5TZXR0aW5ncztcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IFZhcmlhYmxlc1NldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcclxuXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ3BsdWdpbi12YXJzLW1hbmFnZS12YXJpYWJsZXMnLFxyXG5cdFx0XHRuYW1lOiAnTWFuYWdlIHZhcmlhYmxlcycsXHJcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XHJcblx0XHRcdFx0Ly9AdHMtZXhwZWN0LWVycm9yLCBub3QgZXhwb3NlZCBpbiBvYnNpZGlhbi5kLnRzXHJcblx0XHRcdFx0dGhpcy5hcHAuc2V0dGluZy5vcGVuKCk7XHJcblx0XHRcdFx0Ly9AdHMtZXhwZWN0LWVycm9yLCBub3QgZXhwb3NlZCBpbiBvYnNpZGlhbi5kLnRzXHJcblx0XHRcdFx0dGhpcy5hcHAuc2V0dGluZy5vcGVuVGFiQnlJZChcIm9ic2lkaWFuLXZhcmlhYmxlc1wiKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duUG9zdFByb2Nlc3NvcigoZWxlbWVudCwgY29udGV4dCkgPT4ge1xyXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2V0dGluZ3MuYXBwbGljYWJsZVZhckluZGV4ZXMubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgdmFyaWFibGUgPSB0aGlzLnNldHRpbmdzLnZhcmlhYmxlc1t0aGlzLnNldHRpbmdzLmFwcGxpY2FibGVWYXJJbmRleGVzW2ldXTtcclxuXHRcdFx0XHQvLyBXZSBuZWVkIHRvIGJlIGFibGUgdG8gZWRpdCBIVE1MIGF0dHJpYnV0ZXMgc28gZWxlbWVudC50ZXh0Q29udGVudCBpcyBub3QgYW4gb3B0aW9uXHJcblx0XHRcdFx0Ly8gRm9yIGV4YW1wbGU6IDx2aWRlbyBzcmM9XCJmaWxlOi8vLyRNRURJQS8yMDIyL1ZJRF8yMDIyMDMyNF8xNDIzMTY1NzEubXA0XCIgY29udHJvbHM+PC92aWRlbz5cclxuXHRcdFx0XHQvLyBiZWNvbWVzOiA8dmlkZW8gc3JjPVwiZmlsZTovLy8vaG9tZS9qZmZhdXN0L2dkcml2ZS9NZWRpYS8yMDIyL1ZJRF8yMDIyMDMyNF8xNDIzMTY1NzEubXA0XCIgY29udHJvbHM+PC92aWRlbz5cclxuXHJcblx0XHRcdFx0Ly8gU2luY2Ugd2UncmUgY2hhbmdpbmcgdGhlIERPTSBkaXJlY3RseSwgd2UgbmVlZCB0byBzYW5pdGl6ZTpcclxuXHRcdFx0XHR2YXIgY2xlYW5lZFZhbHVlID0gRE9NUHVyaWZ5LnNhbml0aXplKHZhcmlhYmxlLnZhbHVlKTtcclxuXHRcdFx0XHRlbGVtZW50LmlubmVySFRNTCA9IGVsZW1lbnQuaW5uZXJIVE1MLnJlcGxhY2VBbGwodmFyaWFibGUubmFtZSwgY2xlYW5lZFZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2pmZmF1c3Qvb2JzaWRpYW4tdmFyaWFibGVzL2lzc3Vlcy80XHJcblx0XHQvL3RoaXMucmVnaXN0ZXJFZGl0b3JFeHRlbnNpb24obGl2ZVByZXZpZXdQb3N0UHJvY2Vzc29yUGx1Z2luKHRoaXMpKTtcclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cclxuXHR9XHJcblxyXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuXHR9XHJcbn1cclxuXHJcbmNsYXNzIFZhcmlhYmxlc1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHRwbHVnaW46IFZhcmlhYmxlc1BsdWdpbjtcclxuXHRkZWJvdW5jZWRSZWZyZXNoID0gZGVib3VuY2UoKCkgPT4geyB0aGlzLmRpc3BsYXkoKTsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbHVnaW4tdmFycy1maWx0ZXItaW5wdXRcIikuZm9jdXMoKTsgfSwgNzAwLCB0cnVlKTtcclxuXHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogVmFyaWFibGVzUGx1Z2luKSB7XHJcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xyXG5cclxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblxyXG5cdFx0bGV0IHBpbkljb24gPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93QXBwbGljYWJsZVZhcnMgPyBcImNoZWNrLWluLWNpcmNsZVwiIDogXCJjaGVjay1zbWFsbFwiO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0Q2xhc3MoXCJwbHVnaW4tdmFycy1oZWFkZXJcIilcclxuXHRcdFx0LnNldE5hbWUoXCJWYXJpYWJsZXNcIilcclxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdGaWx0ZXIgYnkgdmFyaWFibGUgbmFtZScpXHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZpbHRlcilcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWx0ZXIgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0dGhpcy5kZWJvdW5jZWRSZWZyZXNoKCk7XHJcblx0XHRcdFx0fSkuaW5wdXRFbC5pZCA9IFwicGx1Z2luLXZhcnMtZmlsdGVyLWlucHV0XCIpXHJcblx0XHRcdC5hZGRCdXR0b24oYnRuID0+IGJ0blxyXG5cdFx0XHRcdC5zZXRUb29sdGlwKFwiT3BlbiBkb2N1bWVudGF0aW9uIG9uIEdpdEh1YlwiKVxyXG5cdFx0XHRcdC5zZXRJY29uKFwiaGVscFwiKVxyXG5cdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcclxuXHRcdFx0XHRcdHdpbmRvdy5vcGVuKFwiaHR0cHM6Ly9naXRodWIuY29tL2pmZmF1c3Qvb2JzaWRpYW4tdmFyaWFibGVzL1wiLCAnX2JsYW5rJyk7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0KVxyXG5cdFx0XHQuYWRkQnV0dG9uKGJ0biA9PiBidG5cclxuXHRcdFx0XHQuc2V0VG9vbHRpcChcIkNvcHkgY3VycmVudCB2YXVsdCBwYXRoXCIpXHJcblx0XHRcdFx0LnNldEljb24oXCJ2YXVsdFwiKVxyXG5cdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcclxuXHRcdFx0XHRcdG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGdldFZhdWx0QWJzb2x1dGVQYXRoKHRoaXMuYXBwKSk7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0KVxyXG5cdFx0XHQuYWRkQnV0dG9uKGJ0biA9PiBidG5cclxuXHRcdFx0XHQuc2V0VG9vbHRpcChcIlRvZ2dsZSBiZXR3ZWVuIHNob3dpbmcgYWxsIHZhcmlhYmxlcyBvciBvbmx5IHRoZSBvbmVzIHRoYXQgYXBwbHkgdG8gdGhlIGN1cnJlbnQgdmF1bHRcIilcclxuXHRcdFx0XHQuc2V0SWNvbihwaW5JY29uKVxyXG5cdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dBcHBsaWNhYmxlVmFycyA9ICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93QXBwbGljYWJsZVZhcnM7XHJcblx0XHRcdFx0XHR0aGlzLmRpc3BsYXkoKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHQpXHJcblx0XHRcdC5hZGRCdXR0b24oYnRuID0+IGJ0blxyXG5cdFx0XHRcdC5zZXRUb29sdGlwKFwiQWRkIGEgbmV3IHZhcmlhYmxlXCIpXHJcblx0XHRcdFx0LnNldEljb24oXCJpbXBvcnQtZ2x5cGhcIilcclxuXHRcdFx0XHQub25DbGljaygoKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy52YXJpYWJsZXMucHVzaCh7XHJcblx0XHRcdFx0XHRcdHZhdWx0UGF0aDogXCJcIixcclxuXHRcdFx0XHRcdFx0bmFtZTogXCJcIixcclxuXHRcdFx0XHRcdFx0dmFsdWU6IFwiXCJcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGx1Z2luLnNldHRpbmdzLnZhcmlhYmxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRjb25zdCB2YXJpYWJsZSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnZhcmlhYmxlc1tpXTtcclxuXHJcblx0XHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWx0ZXIgJiYgIXZhcmlhYmxlLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLnBsdWdpbi5zZXR0aW5ncy5maWx0ZXIudG9Mb3dlckNhc2UoKSkpIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dBcHBsaWNhYmxlVmFycyAmJiAhdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBwbGljYWJsZVZhckluZGV4ZXMuY29udGFpbnMoaSkpIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdFx0LnNldENsYXNzKFwicGx1Z2luLXZhcnMtbGlzdFwiKVxyXG5cdFx0XHRcdC5zZXROYW1lKGBWYXJpYWJsZWApXHJcblx0XHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ3ZhdWx0IHBhdGgnKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnZhcmlhYmxlc1tpXS52YXVsdFBhdGgpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnZhcmlhYmxlc1tpXS52YXVsdFBhdGggPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0dGhpcy51cGRhdGVBcHBsaWNhYmxlVmFycygpO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pKVxyXG5cdFx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCduYW1lJylcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy52YXJpYWJsZXNbaV0ubmFtZSlcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudmFyaWFibGVzW2ldLm5hbWUgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0dGhpcy51cGRhdGVBcHBsaWNhYmxlVmFycygpO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pKVxyXG5cdFx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCd2YWx1ZScpXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudmFyaWFibGVzW2ldLnZhbHVlKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy52YXJpYWJsZXNbaV0udmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHR9KSlcclxuXHRcdFx0XHQuYWRkRXh0cmFCdXR0b24oYnRuID0+IGJ0blxyXG5cdFx0XHRcdFx0LnNldEljb24oXCJjcm9zcy1pbi1ib3hcIilcclxuXHRcdFx0XHRcdC5zZXRUb29sdGlwKFwiRGVsZXRlIHRoaXMgdmFyaWFibGVcIilcclxuXHRcdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudmFyaWFibGVzLnNwbGljZShpLCAxKTtcclxuXHRcdFx0XHRcdFx0dGhpcy51cGRhdGVBcHBsaWNhYmxlVmFycygpO1xyXG5cdFx0XHRcdFx0XHR0aGlzLmRpc3BsYXkoKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHVwZGF0ZUFwcGxpY2FibGVWYXJzKCk6IHZvaWQge1xyXG5cdFx0bGV0IG5ld0luZGV4ZXNNYXA6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSB7fTtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wbHVnaW4uc2V0dGluZ3MudmFyaWFibGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGxldCB2ID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MudmFyaWFibGVzW2ldO1xyXG5cclxuXHRcdFx0aWYgKHYubmFtZSAmJiB2LnZhdWx0UGF0aCkge1xyXG5cdFx0XHRcdGlmIChuZXdJbmRleGVzTWFwW3YubmFtZV0gPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRpZiAodi52YXVsdFBhdGggPT0gXCIqXCIgfHwgdi52YXVsdFBhdGggPT0gZ2V0VmF1bHRBYnNvbHV0ZVBhdGgodGhpcy5hcHApKSB7XHJcblx0XHRcdFx0XHRcdG5ld0luZGV4ZXNNYXBbdi5uYW1lXSA9IGk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRsZXQgY3VycmVudFZhciA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnZhcmlhYmxlc1tuZXdJbmRleGVzTWFwW3YubmFtZV1dO1xyXG5cdFx0XHRcdFx0aWYgKGN1cnJlbnRWYXIudmF1bHRQYXRoID09IFwiKlwiICYmIHYudmF1bHRQYXRoID09IGdldFZhdWx0QWJzb2x1dGVQYXRoKHRoaXMuYXBwKSkge1xyXG5cdFx0XHRcdFx0XHRuZXdJbmRleGVzTWFwW3YubmFtZV0gPSBpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmFwcGxpY2FibGVWYXJJbmRleGVzID0gT2JqZWN0LnZhbHVlcyhuZXdJbmRleGVzTWFwKTtcclxuXHJcblx0XHRsZXQgZGVidWdNb2RlID0gZmFsc2U7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGx1Z2luLnNldHRpbmdzLmFwcGxpY2FibGVWYXJJbmRleGVzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHRjb25zdCB2YXJJbmRleCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmFwcGxpY2FibGVWYXJJbmRleGVzW2ldO1xyXG5cdFx0XHRjb25zdCB2YXJpYWJsZSA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnZhcmlhYmxlc1t2YXJJbmRleF07XHJcblx0XHRcdGlmICh2YXJpYWJsZS5uYW1lID09IFwiJERFQlVHXCIgJiYgdmFyaWFibGUudmFsdWUgPT0gXCJ0cnVlXCIpIHtcclxuXHRcdFx0XHRkZWJ1Z01vZGUgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVidWdNb2RlID0gZGVidWdNb2RlO1xyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gXCJAY29kZW1pcnJvci92aWV3XCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhdWx0QWJzb2x1dGVQYXRoKGFwcDogQXBwKSB7XG4gICAgcmV0dXJuIChhcHAudmF1bHQuYWRhcHRlciBhcyBhbnkpLmJhc2VQYXRoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGl2ZVByZXZpZXdSYW5nZXModmlldzogRWRpdG9yVmlldykge1xuXG4gICAgbGV0IHNlbGVjdGVkTGluZXMgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChsZXQgeyBmcm9tLCB0byB9IG9mIHZpZXcuc3RhdGUuc2VsZWN0aW9uLnJhbmdlcykge1xuICAgICAgICAvL2FsZ28gY2FuIGxpa2VseSBiZSBpbXByb3ZlZCBmb3IgbGFyZ2Ugc2VsZWN0aW9uc1xuICAgICAgICBmb3IgKGxldCBwb3MgPSBmcm9tOyBwb3MgPD0gdG87IHBvcysrKSB7XG4gICAgICAgICAgICBsZXQgbGluZSA9IHZpZXcuc3RhdGUuZG9jLmxpbmVBdChwb3MpO1xuICAgICAgICAgICAgc2VsZWN0ZWRMaW5lcy5hZGQobGluZS5udW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGxpdmVQcmV2aWV3TGluZXMgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgICBmb3IgKGxldCB7IGZyb20sIHRvIH0gb2Ygdmlldy52aXNpYmxlUmFuZ2VzKSB7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IGZyb207IHBvcyA8PSB0bzsgcG9zKyspIHtcblxuICAgICAgICAgICAgbGV0IGxpbmUgPSB2aWV3LnN0YXRlLmRvYy5saW5lQXQocG9zKTtcbiAgICAgICAgICAgIGlmICghc2VsZWN0ZWRMaW5lcy5oYXMobGluZS5udW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgbGl2ZVByZXZpZXdMaW5lcy5hZGQobGluZS5udW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGxpdmVQcmV2aWV3UmFuZ2VzID0gW107XG4gICAgZm9yIChsZXQgbGluZU51bWJlciBvZiBsaXZlUHJldmlld0xpbmVzKSB7XG4gICAgICAgIGxldCBsaW5lID0gdmlldy5zdGF0ZS5kb2MubGluZShsaW5lTnVtYmVyKVxuICAgICAgICBsaXZlUHJldmlld1Jhbmdlcy5wdXNoKHsgZnJvbTogbGluZS5mcm9tLCB0bzogbGluZS50byB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGl2ZVByZXZpZXdSYW5nZXM7XG59IiwgImV4cG9ydCBpbnRlcmZhY2UgVmFyQ29uZmlnIHtcbiAgICB2YXVsdFBhdGg6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYXJpYWJsZXNQbHVnaW5TZXR0aW5ncyB7XG4gICAgZmlsdGVyOiBzdHJpbmc7XG4gICAgdmFyaWFibGVzOiBWYXJDb25maWdbXTtcbiAgICBzaG93QXBwbGljYWJsZVZhcnM6IGJvb2xlYW47XG4gICAgYXBwbGljYWJsZVZhckluZGV4ZXM6IG51bWJlcltdO1xuICAgIGRlYnVnTW9kZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFZhcmlhYmxlc1BsdWdpblNldHRpbmdzID0ge1xuICAgIGZpbHRlcjogXCJcIixcbiAgICB2YXJpYWJsZXM6IFt7XG4gICAgICAgIHZhdWx0UGF0aDogXCIqXCIsXG4gICAgICAgIG5hbWU6IFwiJHZhclwiLFxuICAgICAgICB2YWx1ZTogXCJzd2FwcGVkXCJcbiAgICB9XSxcbiAgICBzaG93QXBwbGljYWJsZVZhcnM6IGZhbHNlLFxuICAgIGFwcGxpY2FibGVWYXJJbmRleGVzOiBbMF0sXG4gICAgZGVidWdNb2RlOiBmYWxzZVxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQUNFLGlCQUtFLE9BTEYsZ0JBQ0EsaUJBSUUsT0FKRixnQkFDQSxXQUdFLE9BSEYsVUFDQSxpQkFFRSxPQUZGLGdCQUNBLDJCQUNFLE9BREY7VUFHSSxTQUF5QixPQUF6QixRQUFRLE9BQWlCLE9BQWpCLE1BQU0sU0FBVyxPQUFYO2lCQUNPLE9BQU8sWUFBWSxlQUFlLFNBQXZELFFBQUEsS0FBQSxPQUFPLFlBQUEsS0FBQTtBQUViLFVBQUksQ0FBQyxPQUFPO0FBQ1YsZ0JBQVEsZ0JBQVUsS0FBSyxXQUFXLE1BQU07QUFDdEMsaUJBQU8sSUFBSSxNQUFNLFdBQVc7OztBQUloQyxVQUFJLENBQUMsUUFBUTtBQUNYLGlCQUFTLGlCQUFVLEdBQUc7QUFDcEIsaUJBQU87OztBQUlYLFVBQUksQ0FBQyxNQUFNO0FBQ1QsZUFBTyxlQUFVLEdBQUc7QUFDbEIsaUJBQU87OztBQUlYLFVBQUksQ0FBQyxXQUFXO0FBQ2Qsb0JBQVksb0JBQVUsTUFBTSxNQUFNO0FBQ2hDLGlCQUFBLElBQUEsVUFBQSxVQUFBLEtBQUEsTUFBVyxNQUFYLENBQUEsTUFBQSxPQUFBLG1CQUFtQjs7O0FBSXZCLFVBQU0sZUFBZSxRQUFRLE1BQU0sVUFBVTtBQUU3QyxVQUFNLFdBQVcsUUFBUSxNQUFNLFVBQVU7QUFDekMsVUFBTSxZQUFZLFFBQVEsTUFBTSxVQUFVO0FBRzFDLFVBQU0sb0JBQW9CLFFBQVEsT0FBTyxVQUFVO0FBQ25ELFVBQU0sY0FBYyxRQUFRLE9BQU8sVUFBVTtBQUM3QyxVQUFNLGdCQUFnQixRQUFRLE9BQU8sVUFBVTtBQUMvQyxVQUFNLGdCQUFnQixRQUFRLE9BQU8sVUFBVTtBQUMvQyxVQUFNLGFBQWEsUUFBUSxPQUFPLFVBQVU7QUFFNUMsVUFBTSxhQUFhLFFBQVEsT0FBTyxVQUFVO0FBRTVDLFVBQU0sa0JBQWtCLFlBQVk7QUFFN0IsdUJBQWlCLE1BQU07QUFDNUIsZUFBTyxTQUFDLFNBQUQ7QUFBQSxtQkFBQSxPQUFBLFVBQUEsUUFBYSxPQUFiLE1BQUEsT0FBQSxJQUFBLE9BQUEsSUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE1BQUEsUUFBQTtBQUFhLGlCQUFiLE9BQUEsS0FBQSxVQUFBOztBQUFBLGlCQUFzQixNQUFNLE1BQU0sU0FBUzs7O0FBRzdDLDJCQUFxQixNQUFNO0FBQ2hDLGVBQU8sV0FBQTtBQUFBLG1CQUFBLFFBQUEsVUFBQSxRQUFJLE9BQUosTUFBQSxRQUFBLFFBQUEsR0FBQSxRQUFBLE9BQUEsU0FBQTtBQUFJLGlCQUFKLFNBQUEsVUFBQTs7QUFBQSxpQkFBYSxVQUFVLE1BQU07OztBQUkvQix3QkFBa0IsS0FBSyxPQUFPO0FBQ25DLFlBQUksZ0JBQWdCO0FBSWxCLHlCQUFlLEtBQUs7O0FBR3RCLFlBQUksSUFBSSxNQUFNO0FBQ2QsZUFBTyxLQUFLO0FBQ1YsY0FBSSxVQUFVLE1BQU07QUFDcEIsY0FBSSxPQUFPLFlBQVksVUFBVTtBQUMvQixnQkFBTSxZQUFZLGtCQUFrQjtBQUNwQyxnQkFBSSxjQUFjLFNBQVM7QUFFekIsa0JBQUksQ0FBQyxTQUFTLFFBQVE7QUFDcEIsc0JBQU0sS0FBSzs7QUFHYix3QkFBVTs7O0FBSWQsY0FBSSxXQUFXOztBQUdqQixlQUFPOztBQUlGLHFCQUFlLFFBQVE7QUFDNUIsWUFBTSxZQUFZLE9BQU87QUFFekIsWUFBSSxXQUFBO0FBQ0osYUFBSyxZQUFZLFFBQVE7QUFDdkIsY0FBSSxNQUFNLGdCQUFnQixRQUFRLENBQUMsWUFBWTtBQUM3QyxzQkFBVSxZQUFZLE9BQU87OztBQUlqQyxlQUFPOztBQU9ULDRCQUFzQixRQUFRLE1BQU07QUFDbEMsZUFBTyxXQUFXLE1BQU07QUFDdEIsY0FBTSxPQUFPLHlCQUF5QixRQUFRO0FBQzlDLGNBQUksTUFBTTtBQUNSLGdCQUFJLEtBQUssS0FBSztBQUNaLHFCQUFPLFFBQVEsS0FBSzs7QUFHdEIsZ0JBQUksT0FBTyxLQUFLLFVBQVUsWUFBWTtBQUNwQyxxQkFBTyxRQUFRLEtBQUs7OztBQUl4QixtQkFBUyxlQUFlOztBQUcxQiwrQkFBdUIsU0FBUztBQUM5QixrQkFBUSxLQUFLLHNCQUFzQjtBQUNuQyxpQkFBTzs7QUFHVCxlQUFPOztBQzlIRixVQUFNLE9BQU8sT0FBTyxDQUN6QixLQUNBLFFBQ0EsV0FDQSxXQUNBLFFBQ0EsV0FDQSxTQUNBLFNBQ0EsS0FDQSxPQUNBLE9BQ0EsT0FDQSxTQUNBLGNBQ0EsUUFDQSxNQUNBLFVBQ0EsVUFDQSxXQUNBLFVBQ0EsUUFDQSxRQUNBLE9BQ0EsWUFDQSxXQUNBLFFBQ0EsWUFDQSxNQUNBLGFBQ0EsT0FDQSxXQUNBLE9BQ0EsVUFDQSxPQUNBLE9BQ0EsTUFDQSxNQUNBLFdBQ0EsTUFDQSxZQUNBLGNBQ0EsVUFDQSxRQUNBLFVBQ0EsUUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxRQUNBLFVBQ0EsVUFDQSxNQUNBLFFBQ0EsS0FDQSxPQUNBLFNBQ0EsT0FDQSxPQUNBLFNBQ0EsVUFDQSxNQUNBLFFBQ0EsT0FDQSxRQUNBLFdBQ0EsUUFDQSxZQUNBLFNBQ0EsT0FDQSxRQUNBLE1BQ0EsWUFDQSxVQUNBLFVBQ0EsS0FDQSxXQUNBLE9BQ0EsWUFDQSxLQUNBLE1BQ0EsTUFDQSxRQUNBLEtBQ0EsUUFDQSxXQUNBLFVBQ0EsVUFDQSxTQUNBLFVBQ0EsVUFDQSxRQUNBLFVBQ0EsVUFDQSxTQUNBLE9BQ0EsV0FDQSxPQUNBLFNBQ0EsU0FDQSxNQUNBLFlBQ0EsWUFDQSxTQUNBLE1BQ0EsU0FDQSxRQUNBLE1BQ0EsU0FDQSxNQUNBLEtBQ0EsTUFDQSxPQUNBLFNBQ0E7QUFJSyxVQUFNLE1BQU0sT0FBTyxDQUN4QixPQUNBLEtBQ0EsWUFDQSxlQUNBLGdCQUNBLGdCQUNBLGlCQUNBLG9CQUNBLFVBQ0EsWUFDQSxRQUNBLFFBQ0EsV0FDQSxVQUNBLFFBQ0EsS0FDQSxTQUNBLFlBQ0EsU0FDQSxTQUNBLFFBQ0Esa0JBQ0EsVUFDQSxRQUNBLFlBQ0EsU0FDQSxRQUNBLFdBQ0EsV0FDQSxZQUNBLGtCQUNBLFFBQ0EsUUFDQSxTQUNBLFVBQ0EsVUFDQSxRQUNBLFlBQ0EsU0FDQSxRQUNBLFNBQ0EsUUFDQTtBQUdLLFVBQU0sYUFBYSxPQUFPLENBQy9CLFdBQ0EsaUJBQ0EsdUJBQ0EsZUFDQSxvQkFDQSxxQkFDQSxxQkFDQSxrQkFDQSxXQUNBLFdBQ0EsV0FDQSxXQUNBLFdBQ0Esa0JBQ0EsV0FDQSxXQUNBLGVBQ0EsZ0JBQ0EsWUFDQSxnQkFDQSxzQkFDQSxlQUNBLFVBQ0E7QUFPSyxVQUFNLGdCQUFnQixPQUFPLENBQ2xDLFdBQ0EsaUJBQ0EsVUFDQSxXQUNBLGdCQUNBLGFBQ0Esb0JBQ0Esa0JBQ0EsaUJBQ0EsaUJBQ0EsaUJBQ0EsU0FDQSxhQUNBLFFBQ0EsZ0JBQ0EsYUFDQSxXQUNBLGlCQUNBLFVBQ0EsT0FDQSxjQUNBLFdBQ0E7QUFHSyxVQUFNLFNBQVMsT0FBTyxDQUMzQixRQUNBLFlBQ0EsVUFDQSxXQUNBLFNBQ0EsVUFDQSxNQUNBLGNBQ0EsaUJBQ0EsTUFDQSxNQUNBLFNBQ0EsV0FDQSxZQUNBLFNBQ0EsUUFDQSxNQUNBLFVBQ0EsU0FDQSxVQUNBLFFBQ0EsUUFDQSxXQUNBLFVBQ0EsT0FDQSxTQUNBLE9BQ0EsVUFDQTtBQUtLLFVBQU0sbUJBQW1CLE9BQU8sQ0FDckMsV0FDQSxlQUNBLGNBQ0EsWUFDQSxhQUNBLFdBQ0EsV0FDQSxVQUNBLFVBQ0EsU0FDQSxhQUNBLGNBQ0Esa0JBQ0EsZUFDQTtBQUdLLFVBQU0sT0FBTyxPQUFPLENBQUM7QUNwUnJCLFVBQU0sU0FBTyxPQUFPLENBQ3pCLFVBQ0EsVUFDQSxTQUNBLE9BQ0Esa0JBQ0EsZ0JBQ0Esd0JBQ0EsWUFDQSxjQUNBLFdBQ0EsVUFDQSxXQUNBLGVBQ0EsZUFDQSxXQUNBLFFBQ0EsU0FDQSxTQUNBLFNBQ0EsUUFDQSxXQUNBLFlBQ0EsZ0JBQ0EsVUFDQSxlQUNBLFlBQ0EsWUFDQSxXQUNBLE9BQ0EsWUFDQSwyQkFDQSx5QkFDQSxZQUNBLGFBQ0EsV0FDQSxnQkFDQSxRQUNBLE9BQ0EsV0FDQSxVQUNBLFVBQ0EsUUFDQSxRQUNBLFlBQ0EsTUFDQSxhQUNBLGFBQ0EsU0FDQSxRQUNBLFNBQ0EsUUFDQSxRQUNBLFdBQ0EsUUFDQSxPQUNBLE9BQ0EsYUFDQSxTQUNBLFVBQ0EsT0FDQSxhQUNBLFlBQ0EsU0FDQSxRQUNBLFNBQ0EsV0FDQSxjQUNBLFVBQ0EsUUFDQSxXQUNBLFdBQ0EsZUFDQSxlQUNBLFVBQ0EsV0FDQSxXQUNBLGNBQ0EsWUFDQSxPQUNBLFlBQ0EsT0FDQSxZQUNBLFFBQ0EsUUFDQSxXQUNBLGNBQ0EsU0FDQSxZQUNBLFNBQ0EsUUFDQSxTQUNBLFFBQ0EsV0FDQSxTQUNBLE9BQ0EsVUFDQSxRQUNBLFNBQ0EsV0FDQSxZQUNBLFNBQ0EsYUFDQSxRQUNBLFVBQ0EsVUFDQSxTQUNBLFNBQ0EsU0FDQTtBQUdLLFVBQU0sUUFBTSxPQUFPLENBQ3hCLGlCQUNBLGNBQ0EsWUFDQSxzQkFDQSxVQUNBLGlCQUNBLGlCQUNBLFdBQ0EsaUJBQ0Esa0JBQ0EsU0FDQSxRQUNBLE1BQ0EsU0FDQSxRQUNBLGlCQUNBLGFBQ0EsYUFDQSxTQUNBLHVCQUNBLCtCQUNBLGlCQUNBLG1CQUNBLE1BQ0EsTUFDQSxLQUNBLE1BQ0EsTUFDQSxtQkFDQSxhQUNBLFdBQ0EsV0FDQSxPQUNBLFlBQ0EsYUFDQSxPQUNBLFFBQ0EsZ0JBQ0EsYUFDQSxVQUNBLGVBQ0EsZUFDQSxpQkFDQSxlQUNBLGFBQ0Esb0JBQ0EsZ0JBQ0EsY0FDQSxnQkFDQSxlQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsY0FDQSxZQUNBLGlCQUNBLHFCQUNBLFVBQ0EsUUFDQSxNQUNBLG1CQUNBLE1BQ0EsT0FDQSxLQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsV0FDQSxhQUNBLGNBQ0EsWUFDQSxRQUNBLGdCQUNBLGtCQUNBLGdCQUNBLG9CQUNBLGtCQUNBLFNBQ0EsY0FDQSxjQUNBLGdCQUNBLGdCQUNBLGVBQ0EsZUFDQSxvQkFDQSxhQUNBLE9BQ0EsUUFDQSxTQUNBLFVBQ0EsUUFDQSxPQUNBLFFBQ0EsY0FDQSxVQUNBLFlBQ0EsV0FDQSxTQUNBLFVBQ0EsZUFDQSxVQUNBLFlBQ0EsZUFDQSxRQUNBLGNBQ0EsdUJBQ0Esb0JBQ0EsZ0JBQ0EsVUFDQSxpQkFDQSx1QkFDQSxrQkFDQSxLQUNBLE1BQ0EsTUFDQSxVQUNBLFFBQ0EsUUFDQSxlQUNBLGFBQ0EsV0FDQSxVQUNBLFVBQ0EsU0FDQSxRQUNBLG1CQUNBLG9CQUNBLG9CQUNBLGdCQUNBLGVBQ0EsZ0JBQ0EsZUFDQSxjQUNBLGdCQUNBLG9CQUNBLHFCQUNBLGtCQUNBLG1CQUNBLHFCQUNBLGtCQUNBLFVBQ0EsZ0JBQ0EsU0FDQSxnQkFDQSxrQkFDQSxZQUNBLFdBQ0EsV0FDQSxhQUNBLG9CQUNBLGVBQ0EsbUJBQ0Esa0JBQ0EsY0FDQSxRQUNBLE1BQ0EsTUFDQSxXQUNBLFVBQ0EsV0FDQSxjQUNBLFdBQ0EsY0FDQSxpQkFDQSxpQkFDQSxTQUNBLGdCQUNBLFFBQ0EsZ0JBQ0Esb0JBQ0Esb0JBQ0EsS0FDQSxNQUNBLE1BQ0EsU0FDQSxLQUNBLE1BQ0EsTUFDQSxLQUNBO0FBR0ssVUFBTSxXQUFTLE9BQU8sQ0FDM0IsVUFDQSxlQUNBLFNBQ0EsWUFDQSxTQUNBLGdCQUNBLGVBQ0EsY0FDQSxjQUNBLFNBQ0EsT0FDQSxXQUNBLGdCQUNBLFlBQ0EsU0FDQSxTQUNBLFVBQ0EsUUFDQSxNQUNBLFdBQ0EsVUFDQSxpQkFDQSxVQUNBLFVBQ0Esa0JBQ0EsYUFDQSxZQUNBLGVBQ0EsV0FDQSxXQUNBLGlCQUNBLFlBQ0EsWUFDQSxRQUNBLFlBQ0EsWUFDQSxjQUNBLFdBQ0EsVUFDQSxVQUNBLGVBQ0EsaUJBQ0Esd0JBQ0EsYUFDQSxhQUNBLGNBQ0EsWUFDQSxrQkFDQSxrQkFDQSxhQUNBLFdBQ0EsU0FDQTtBQUdLLFVBQU0sTUFBTSxPQUFPLENBQ3hCLGNBQ0EsVUFDQSxlQUNBLGFBQ0E7QUNyV0ssVUFBTSxnQkFBZ0IsS0FBSztBQUMzQixVQUFNLFdBQVcsS0FBSztBQUN0QixVQUFNLFlBQVksS0FBSztBQUN2QixVQUFNLFlBQVksS0FBSztBQUN2QixVQUFNLGlCQUFpQixLQUM1QjtBQUVLLFVBQU0sb0JBQW9CLEtBQUs7QUFDL0IsVUFBTSxrQkFBa0IsS0FDN0I7QUFFSyxVQUFNLGVBQWUsS0FBSzs7Ozs7Ozs7Ozs7Ozs7OztBQ01qQyxVQUFNLFlBQVksc0JBQUE7QUFBQSxlQUFPLE9BQU8sV0FBVyxjQUFjLE9BQU87O0FBVWhFLFVBQU0sNEJBQTRCLG9DQUFVLGNBQWMsV0FBVTtBQUNsRSxZQUNFLFFBQU8saUJBQVAsY0FBQSxjQUFBLFFBQU8sbUJBQWlCLFlBQ3hCLE9BQU8sYUFBYSxpQkFBaUIsWUFDckM7QUFDQSxpQkFBTzs7QUFNVCxZQUFJLFNBQVM7QUFDYixZQUFNLFlBQVk7QUFDbEIsWUFDRSxVQUFTLGlCQUNULFVBQVMsY0FBYyxhQUFhLFlBQ3BDO0FBQ0EsbUJBQVMsVUFBUyxjQUFjLGFBQWE7O0FBRy9DLFlBQU0sYUFBYSxjQUFlLFVBQVMsTUFBTSxTQUFTO0FBRTFELFlBQUk7QUFDRixpQkFBTyxhQUFhLGFBQWEsWUFBWTtZQUMzQyxZQUQyQyxvQkFDaEMsU0FBTTtBQUNmLHFCQUFPOzs7aUJBR0osR0FBUDtBQUlBLGtCQUFRLEtBQ04seUJBQXlCLGFBQWE7QUFFeEMsaUJBQU87OztBQUlYLGlDQUErQztBQUFBLFlBQXRCLFVBQXNCLFVBQUEsU0FBQSxLQUFBLFVBQUEsT0FBQSxTQUFBLFVBQUEsS0FBYjtBQUNoQyxZQUFNLGFBQVksb0JBQUMsTUFBRDtBQUFBLGlCQUFVLGdCQUFnQjs7QUFNNUMsbUJBQVUsVUFBVTtBQU1wQixtQkFBVSxVQUFVO0FBRXBCLFlBQUksQ0FBQyxXQUFVLENBQUMsUUFBTyxZQUFZLFFBQU8sU0FBUyxhQUFhLEdBQUc7QUFHakUscUJBQVUsY0FBYztBQUV4QixpQkFBTzs7QUFHVCxZQUFNLG1CQUFtQixRQUFPO0FBdkJhLFlBeUJ2QyxZQUFhLFFBQWI7QUF6QnVDLFlBMkIzQyxtQkFTRSxRQVRGLGtCQUNBLHNCQVFFLFFBUkYscUJBQ0EsT0FPRSxRQVBGLE1BQ0EsVUFNRSxRQU5GLFNBQ0EsYUFLRSxRQUxGLFlBL0IyQyx1QkFvQ3pDLFFBSkYsY0FBQSxlQWhDMkMseUJBQUEsU0FnQzVCLFFBQU8sZ0JBQWdCLFFBQU8sa0JBaENGLHNCQWlDM0Msa0JBR0UsUUFIRixpQkFDQSxZQUVFLFFBRkYsV0FDQSxlQUNFLFFBREY7QUFHRixZQUFNLG1CQUFtQixRQUFRO0FBRWpDLFlBQU0sWUFBWSxhQUFhLGtCQUFrQjtBQUNqRCxZQUFNLGlCQUFpQixhQUFhLGtCQUFrQjtBQUN0RCxZQUFNLGdCQUFnQixhQUFhLGtCQUFrQjtBQUNyRCxZQUFNLGdCQUFnQixhQUFhLGtCQUFrQjtBQVFyRCxZQUFJLE9BQU8sd0JBQXdCLFlBQVk7QUFDN0MsY0FBTSxXQUFXLFVBQVMsY0FBYztBQUN4QyxjQUFJLFNBQVMsV0FBVyxTQUFTLFFBQVEsZUFBZTtBQUN0RCx3QkFBVyxTQUFTLFFBQVE7OztBQUloQyxZQUFNLHFCQUFxQiwwQkFDekIsY0FDQTtBQUVGLFlBQU0sWUFBWSxxQkFBcUIsbUJBQW1CLFdBQVcsTUFBTTtBQTlEOUIsWUFBQSxZQXFFekMsV0FKRixpQkFqRTJDLFVBaUUzQyxnQkFDQSxxQkFsRTJDLFVBa0UzQyxvQkFDQSx5QkFuRTJDLFVBbUUzQyx3QkFDQSx1QkFwRTJDLFVBb0UzQztBQXBFMkMsWUFzRXJDLGFBQWUsaUJBQWY7QUFFUixZQUFJLGVBQWU7QUFDbkIsWUFBSTtBQUNGLHlCQUFlLE1BQU0sV0FBVSxlQUFlLFVBQVMsZUFBZTtpQkFDL0QsR0FBUDs7QUFFRixZQUFJLFFBQVE7QUFLWixtQkFBVSxjQUNSLE9BQU8sa0JBQWtCLGNBQ3pCLGtCQUNBLE9BQU8sZUFBZSx1QkFBdUIsZUFDN0MsaUJBQWlCO0FBdEYwQixZQXlGM0MsbUJBTUUsZUFMRixjQUtFLFVBSkYsZUFJRSxXQUhGLGVBR0UsV0FGRix1QkFFRSxtQkFERixxQkFDRTtBQS9GeUMsWUFpR3ZDLG9CQUFtQjtBQVF6QixZQUFJLGVBQWU7QUFDbkIsWUFBTSx1QkFBdUIsU0FBUyxJQUFULEdBQUEsT0FBQSxxQkFDeEIsT0FEd0IscUJBRXhCLE1BRndCLHFCQUd4QixhQUh3QixxQkFJeEIsU0FKd0IscUJBS3hCO0FBSUwsWUFBSSxlQUFlO0FBQ25CLFlBQU0sdUJBQXVCLFNBQVMsSUFBVCxHQUFBLE9BQUEscUJBQ3hCLFNBRHdCLHFCQUV4QixRQUZ3QixxQkFHeEIsV0FId0IscUJBSXhCO0FBU0wsWUFBTSwwQkFBMEIsT0FBTyxLQUNyQyxPQUFPLE9BQU8sTUFBTTtVQUNsQixjQUFjO1lBQ1osVUFBVTtZQUNWLGNBQWM7WUFDZCxZQUFZO1lBQ1osT0FBTzs7VUFFVCxvQkFBb0I7WUFDbEIsVUFBVTtZQUNWLGNBQWM7WUFDZCxZQUFZO1lBQ1osT0FBTzs7VUFFVCxnQ0FBZ0M7WUFDOUIsVUFBVTtZQUNWLGNBQWM7WUFDZCxZQUFZO1lBQ1osT0FBTzs7O0FBTWIsWUFBSSxjQUFjO0FBR2xCLFlBQUksY0FBYztBQUdsQixZQUFJLGtCQUFrQjtBQUd0QixZQUFJLGtCQUFrQjtBQUd0QixZQUFJLDBCQUEwQjtBQUs5QixZQUFJLHFCQUFxQjtBQUd6QixZQUFJLGlCQUFpQjtBQUdyQixZQUFJLGFBQWE7QUFJakIsWUFBSSxhQUFhO0FBTWpCLFlBQUksYUFBYTtBQUlqQixZQUFJLHNCQUFzQjtBQUkxQixZQUFJLHNCQUFzQjtBQUcxQixZQUFJLGVBQWU7QUFHbkIsWUFBSSxlQUFlO0FBSW5CLFlBQUksV0FBVztBQUdmLFlBQUksZUFBZTtBQUduQixZQUFJLGtCQUFrQjtBQUN0QixZQUFNLDBCQUEwQixTQUFTLElBQUksQ0FDM0Msa0JBQ0EsU0FDQSxZQUNBLFFBQ0EsaUJBQ0EsUUFDQSxVQUNBLFFBQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxTQUNBLFdBQ0EsWUFDQSxZQUNBLGFBQ0EsVUFDQSxTQUNBLE9BQ0EsWUFDQSxTQUNBLFNBQ0EsU0FDQTtBQUlGLFlBQUksZ0JBQWdCO0FBQ3BCLFlBQU0sd0JBQXdCLFNBQVMsSUFBSSxDQUN6QyxTQUNBLFNBQ0EsT0FDQSxVQUNBLFNBQ0E7QUFJRixZQUFJLHNCQUFzQjtBQUMxQixZQUFNLDhCQUE4QixTQUFTLElBQUksQ0FDL0MsT0FDQSxTQUNBLE9BQ0EsTUFDQSxTQUNBLFFBQ0EsV0FDQSxlQUNBLFFBQ0EsV0FDQSxTQUNBLFNBQ0EsU0FDQTtBQUdGLFlBQU0sbUJBQW1CO0FBQ3pCLFlBQU0sZ0JBQWdCO0FBQ3RCLFlBQU0saUJBQWlCO0FBRXZCLFlBQUksWUFBWTtBQUNoQixZQUFJLGlCQUFpQjtBQUdyQixZQUFJLG9CQUFBO0FBQ0osWUFBTSwrQkFBK0IsQ0FBQyx5QkFBeUI7QUFDL0QsWUFBTSw0QkFBNEI7QUFDbEMsWUFBSSxvQkFBQTtBQUdKLFlBQUksU0FBUztBQUtiLFlBQU0sY0FBYyxVQUFTLGNBQWM7QUFFM0MsWUFBTSxvQkFBb0IsNEJBQVUsV0FBVztBQUM3QyxpQkFBTyxxQkFBcUIsVUFBVSxxQkFBcUI7O0FBUzdELFlBQU0sZUFBZSx1QkFBVSxLQUFLO0FBQ2xDLGNBQUksVUFBVSxXQUFXLEtBQUs7QUFDNUI7O0FBSUYsY0FBSSxDQUFDLE9BQU8sUUFBTyxRQUFQLGNBQUEsY0FBQSxRQUFPLFVBQVEsVUFBVTtBQUNuQyxrQkFBTTs7QUFJUixnQkFBTSxNQUFNO0FBR1oseUJBQ0Usa0JBQWtCLE1BQ2QsU0FBUyxJQUFJLElBQUksZ0JBQ2pCO0FBQ04seUJBQ0Usa0JBQWtCLE1BQ2QsU0FBUyxJQUFJLElBQUksZ0JBQ2pCO0FBQ04sZ0NBQ0UsdUJBQXVCLE1BQ25CLFNBQVMsTUFBTSw4QkFBOEIsSUFBSSxxQkFDakQ7QUFDTiwwQkFDRSx1QkFBdUIsTUFDbkIsU0FBUyxNQUFNLHdCQUF3QixJQUFJLHFCQUMzQztBQUNOLDRCQUNFLHFCQUFxQixNQUNqQixTQUFTLElBQUksSUFBSSxtQkFDakI7QUFDTix3QkFBYyxpQkFBaUIsTUFBTSxTQUFTLElBQUksSUFBSSxlQUFlO0FBQ3JFLHdCQUFjLGlCQUFpQixNQUFNLFNBQVMsSUFBSSxJQUFJLGVBQWU7QUFDckUseUJBQWUsa0JBQWtCLE1BQU0sSUFBSSxlQUFlO0FBQzFELDRCQUFrQixJQUFJLG9CQUFvQjtBQUMxQyw0QkFBa0IsSUFBSSxvQkFBb0I7QUFDMUMsb0NBQTBCLElBQUksMkJBQTJCO0FBQ3pELCtCQUFxQixJQUFJLHNCQUFzQjtBQUMvQywyQkFBaUIsSUFBSSxrQkFBa0I7QUFDdkMsdUJBQWEsSUFBSSxjQUFjO0FBQy9CLGdDQUFzQixJQUFJLHVCQUF1QjtBQUNqRCxnQ0FBc0IsSUFBSSx1QkFBdUI7QUFDakQsdUJBQWEsSUFBSSxjQUFjO0FBQy9CLHlCQUFlLElBQUksaUJBQWlCO0FBQ3BDLHlCQUFlLElBQUksaUJBQWlCO0FBQ3BDLHFCQUFXLElBQUksWUFBWTtBQUMzQiw4QkFBaUIsSUFBSSxzQkFBc0I7QUFDM0Msc0JBQVksSUFBSSxhQUFhO0FBQzdCLGNBQ0UsSUFBSSwyQkFDSixrQkFBa0IsSUFBSSx3QkFBd0IsZUFDOUM7QUFDQSxvQ0FBd0IsZUFDdEIsSUFBSSx3QkFBd0I7O0FBR2hDLGNBQ0UsSUFBSSwyQkFDSixrQkFBa0IsSUFBSSx3QkFBd0IscUJBQzlDO0FBQ0Esb0NBQXdCLHFCQUN0QixJQUFJLHdCQUF3Qjs7QUFHaEMsY0FDRSxJQUFJLDJCQUNKLE9BQU8sSUFBSSx3QkFBd0IsbUNBQ2pDLFdBQ0Y7QUFDQSxvQ0FBd0IsaUNBQ3RCLElBQUksd0JBQXdCOztBQUdoQyw4QkFFRSw2QkFBNkIsUUFBUSxJQUFJLHVCQUF1QixLQUMzRCxvQkFBb0IsNEJBQ3BCLG9CQUFvQixJQUFJO0FBRy9CLDhCQUNFLHNCQUFzQiwwQkFDbEIsU0FBQyxHQUFEO0FBQUEsbUJBQU87Y0FDUDtBQUVOLGNBQUksb0JBQW9CO0FBQ3RCLDhCQUFrQjs7QUFHcEIsY0FBSSxxQkFBcUI7QUFDdkIseUJBQWE7O0FBSWYsY0FBSSxjQUFjO0FBQ2hCLDJCQUFlLFNBQVMsSUFBVCxHQUFBLE9BQUEscUJBQWlCO0FBQ2hDLDJCQUFlO0FBQ2YsZ0JBQUksYUFBYSxTQUFTLE1BQU07QUFDOUIsdUJBQVMsY0FBYztBQUN2Qix1QkFBUyxjQUFjOztBQUd6QixnQkFBSSxhQUFhLFFBQVEsTUFBTTtBQUM3Qix1QkFBUyxjQUFjO0FBQ3ZCLHVCQUFTLGNBQWM7QUFDdkIsdUJBQVMsY0FBYzs7QUFHekIsZ0JBQUksYUFBYSxlQUFlLE1BQU07QUFDcEMsdUJBQVMsY0FBYztBQUN2Qix1QkFBUyxjQUFjO0FBQ3ZCLHVCQUFTLGNBQWM7O0FBR3pCLGdCQUFJLGFBQWEsV0FBVyxNQUFNO0FBQ2hDLHVCQUFTLGNBQWM7QUFDdkIsdUJBQVMsY0FBYztBQUN2Qix1QkFBUyxjQUFjOzs7QUFLM0IsY0FBSSxJQUFJLFVBQVU7QUFDaEIsZ0JBQUksaUJBQWlCLHNCQUFzQjtBQUN6Qyw2QkFBZSxNQUFNOztBQUd2QixxQkFBUyxjQUFjLElBQUk7O0FBRzdCLGNBQUksSUFBSSxVQUFVO0FBQ2hCLGdCQUFJLGlCQUFpQixzQkFBc0I7QUFDekMsNkJBQWUsTUFBTTs7QUFHdkIscUJBQVMsY0FBYyxJQUFJOztBQUc3QixjQUFJLElBQUksbUJBQW1CO0FBQ3pCLHFCQUFTLHFCQUFxQixJQUFJOztBQUdwQyxjQUFJLElBQUksaUJBQWlCO0FBQ3ZCLGdCQUFJLG9CQUFvQix5QkFBeUI7QUFDL0MsZ0NBQWtCLE1BQU07O0FBRzFCLHFCQUFTLGlCQUFpQixJQUFJOztBQUloQyxjQUFJLGNBQWM7QUFDaEIseUJBQWEsV0FBVzs7QUFJMUIsY0FBSSxnQkFBZ0I7QUFDbEIscUJBQVMsY0FBYyxDQUFDLFFBQVEsUUFBUTs7QUFJMUMsY0FBSSxhQUFhLE9BQU87QUFDdEIscUJBQVMsY0FBYyxDQUFDO0FBQ3hCLG1CQUFPLFlBQVk7O0FBS3JCLGNBQUksUUFBUTtBQUNWLG1CQUFPOztBQUdULG1CQUFTOztBQUdYLFlBQU0saUNBQWlDLFNBQVMsSUFBSSxDQUNsRCxNQUNBLE1BQ0EsTUFDQSxNQUNBO0FBR0YsWUFBTSwwQkFBMEIsU0FBUyxJQUFJLENBQzNDLGlCQUNBLFFBQ0EsU0FDQTtBQU1GLFlBQU0sZUFBZSxTQUFTLElBQUk7QUFDbEMsaUJBQVMsY0FBYztBQUN2QixpQkFBUyxjQUFjO0FBRXZCLFlBQU0sa0JBQWtCLFNBQVMsSUFBSTtBQUNyQyxpQkFBUyxpQkFBaUI7QUFVMUIsWUFBTSx1QkFBdUIsK0JBQVUsU0FBUztBQUM5QyxjQUFJLFNBQVMsY0FBYztBQUkzQixjQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sU0FBUztBQUM5QixxQkFBUztjQUNQLGNBQWM7Y0FDZCxTQUFTOzs7QUFJYixjQUFNLFVBQVUsa0JBQWtCLFFBQVE7QUFDMUMsY0FBTSxnQkFBZ0Isa0JBQWtCLE9BQU87QUFFL0MsY0FBSSxRQUFRLGlCQUFpQixlQUFlO0FBSTFDLGdCQUFJLE9BQU8saUJBQWlCLGdCQUFnQjtBQUMxQyxxQkFBTyxZQUFZOztBQU1yQixnQkFBSSxPQUFPLGlCQUFpQixrQkFBa0I7QUFDNUMscUJBQ0UsWUFBWSxTQUNYLG1CQUFrQixvQkFDakIsK0JBQStCOztBQU1yQyxtQkFBTyxRQUFRLGFBQWE7O0FBRzlCLGNBQUksUUFBUSxpQkFBaUIsa0JBQWtCO0FBSTdDLGdCQUFJLE9BQU8saUJBQWlCLGdCQUFnQjtBQUMxQyxxQkFBTyxZQUFZOztBQUtyQixnQkFBSSxPQUFPLGlCQUFpQixlQUFlO0FBQ3pDLHFCQUFPLFlBQVksVUFBVSx3QkFBd0I7O0FBS3ZELG1CQUFPLFFBQVEsZ0JBQWdCOztBQUdqQyxjQUFJLFFBQVEsaUJBQWlCLGdCQUFnQjtBQUkzQyxnQkFDRSxPQUFPLGlCQUFpQixpQkFDeEIsQ0FBQyx3QkFBd0IsZ0JBQ3pCO0FBQ0EscUJBQU87O0FBR1QsZ0JBQ0UsT0FBTyxpQkFBaUIsb0JBQ3hCLENBQUMsK0JBQStCLGdCQUNoQztBQUNBLHFCQUFPOztBQU9ULGdCQUFNLDJCQUEyQixTQUFTLElBQUksQ0FDNUMsU0FDQSxTQUNBLFFBQ0EsS0FDQTtBQUtGLG1CQUNFLENBQUMsZ0JBQWdCLFlBQ2hCLDBCQUF5QixZQUFZLENBQUMsYUFBYTs7QUFPeEQsaUJBQU87O0FBUVQsWUFBTSxlQUFlLHVCQUFVLE1BQU07QUFDbkMsb0JBQVUsV0FBVSxTQUFTLEVBQUUsU0FBUztBQUN4QyxjQUFJO0FBRUYsaUJBQUssV0FBVyxZQUFZO21CQUNyQixHQUFQO0FBQ0EsZ0JBQUk7QUFDRixtQkFBSyxZQUFZO3FCQUNWLElBQVA7QUFDQSxtQkFBSzs7OztBQVdYLFlBQU0sbUJBQW1CLDJCQUFVLE1BQU0sTUFBTTtBQUM3QyxjQUFJO0FBQ0Ysc0JBQVUsV0FBVSxTQUFTO2NBQzNCLFdBQVcsS0FBSyxpQkFBaUI7Y0FDakMsTUFBTTs7bUJBRUQsR0FBUDtBQUNBLHNCQUFVLFdBQVUsU0FBUztjQUMzQixXQUFXO2NBQ1gsTUFBTTs7O0FBSVYsZUFBSyxnQkFBZ0I7QUFHckIsY0FBSSxTQUFTLFFBQVEsQ0FBQyxhQUFhLE9BQU87QUFDeEMsZ0JBQUksY0FBYyxxQkFBcUI7QUFDckMsa0JBQUk7QUFDRiw2QkFBYTt1QkFDTixHQUFQOzttQkFDRztBQUNMLGtCQUFJO0FBQ0YscUJBQUssYUFBYSxNQUFNO3VCQUNqQixHQUFQOzs7OztBQVdSLFlBQU0sZ0JBQWdCLHdCQUFVLE9BQU87QUFFckMsY0FBSSxNQUFBO0FBQ0osY0FBSSxvQkFBQTtBQUVKLGNBQUksWUFBWTtBQUNkLG9CQUFRLHNCQUFzQjtpQkFDekI7QUFFTCxnQkFBTSxVQUFVLFlBQVksT0FBTztBQUNuQyxnQ0FBb0IsV0FBVyxRQUFROztBQUd6QyxjQUFJLHNCQUFzQix5QkFBeUI7QUFFakQsb0JBQ0UsbUVBQ0EsUUFDQTs7QUFHSixjQUFNLGVBQWUscUJBQ2pCLG1CQUFtQixXQUFXLFNBQzlCO0FBS0osY0FBSSxjQUFjLGdCQUFnQjtBQUNoQyxnQkFBSTtBQUNGLG9CQUFNLElBQUksWUFBWSxnQkFBZ0IsY0FBYztxQkFDN0MsR0FBUDs7O0FBSUosY0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLGlCQUFpQjtBQUNoQyxrQkFBTSxlQUFlLGVBQWUsV0FBVyxZQUFZO0FBQzNELGdCQUFJO0FBQ0Ysa0JBQUksZ0JBQWdCLFlBQVksaUJBQWlCLEtBQUs7cUJBQy9DLEdBQVA7OztBQUtKLGNBQU0sT0FBTyxJQUFJLFFBQVEsSUFBSTtBQUU3QixjQUFJLFNBQVMsbUJBQW1CO0FBQzlCLGlCQUFLLGFBQ0gsVUFBUyxlQUFlLG9CQUN4QixLQUFLLFdBQVcsTUFBTTs7QUFLMUIsY0FBSSxjQUFjLGdCQUFnQjtBQUNoQyxtQkFBTyxxQkFBcUIsS0FDMUIsS0FDQSxpQkFBaUIsU0FBUyxRQUMxQjs7QUFHSixpQkFBTyxpQkFBaUIsSUFBSSxrQkFBa0I7O0FBU2hELFlBQU0sa0JBQWtCLDBCQUFVLE1BQU07QUFDdEMsaUJBQU8sbUJBQW1CLEtBQ3hCLEtBQUssaUJBQWlCLE1BQ3RCLE1BRUEsV0FBVyxlQUFlLFdBQVcsZUFBZSxXQUFXLFdBQy9ELE1BQ0E7O0FBVUosWUFBTSxlQUFlLHVCQUFVLEtBQUs7QUFDbEMsaUJBQ0UsZUFBZSxtQkFDZCxRQUFPLElBQUksYUFBYSxZQUN2QixPQUFPLElBQUksZ0JBQWdCLFlBQzNCLE9BQU8sSUFBSSxnQkFBZ0IsY0FDM0IsQ0FBRSxLQUFJLHNCQUFzQixpQkFDNUIsT0FBTyxJQUFJLG9CQUFvQixjQUMvQixPQUFPLElBQUksaUJBQWlCLGNBQzVCLE9BQU8sSUFBSSxpQkFBaUIsWUFDNUIsT0FBTyxJQUFJLGlCQUFpQjs7QUFVbEMsWUFBTSxVQUFVLGtCQUFVLFFBQVE7QUFDaEMsaUJBQU8sUUFBTyxTQUFQLGNBQUEsY0FBQSxRQUFPLFdBQVMsV0FDbkIsa0JBQWtCLE9BQ2xCLFVBQ0UsUUFBTyxXQUFQLGNBQUEsY0FBQSxRQUFPLGFBQVcsWUFDbEIsT0FBTyxPQUFPLGFBQWEsWUFDM0IsT0FBTyxPQUFPLGFBQWE7O0FBV25DLFlBQU0sZUFBZSx1QkFBVSxZQUFZLGFBQWEsTUFBTTtBQUM1RCxjQUFJLENBQUMsTUFBTSxhQUFhO0FBQ3RCOztBQUdGLHVCQUFhLE1BQU0sYUFBYSxTQUFDLE1BQVM7QUFDeEMsaUJBQUssS0FBSyxZQUFXLGFBQWEsTUFBTTs7O0FBYzVDLFlBQU0sb0JBQW9CLDRCQUFVLGFBQWE7QUFDL0MsY0FBSSxVQUFBO0FBR0osdUJBQWEsMEJBQTBCLGFBQWE7QUFHcEQsY0FBSSxhQUFhLGNBQWM7QUFDN0IseUJBQWE7QUFDYixtQkFBTzs7QUFJVCxjQUFJLFlBQVksWUFBWSxVQUFVLG9CQUFvQjtBQUN4RCx5QkFBYTtBQUNiLG1CQUFPOztBQUlULGNBQU0sVUFBVSxrQkFBa0IsWUFBWTtBQUc5Qyx1QkFBYSx1QkFBdUIsYUFBYTtZQUMvQztZQUNBLGFBQWE7O0FBSWYsY0FDRSxDQUFDLFFBQVEsWUFBWSxzQkFDcEIsRUFBQyxRQUFRLFlBQVksWUFDcEIsQ0FBQyxRQUFRLFlBQVksUUFBUSx1QkFDL0IsV0FBVyxXQUFXLFlBQVksY0FDbEMsV0FBVyxXQUFXLFlBQVksY0FDbEM7QUFDQSx5QkFBYTtBQUNiLG1CQUFPOztBQUlULGNBQ0UsWUFBWSxZQUNaLFdBQVcsY0FBYyxZQUFZLFlBQ3JDO0FBQ0EseUJBQWE7QUFDYixtQkFBTzs7QUFJVCxjQUFJLENBQUMsYUFBYSxZQUFZLFlBQVksVUFBVTtBQUVsRCxnQkFBSSxDQUFDLFlBQVksWUFBWSx3QkFBd0IsVUFBVTtBQUM3RCxrQkFDRSx3QkFBd0Isd0JBQXdCLFVBQ2hELFdBQVcsd0JBQXdCLGNBQWM7QUFFakQsdUJBQU87QUFDVCxrQkFDRSx3QkFBd0Isd0JBQXdCLFlBQ2hELHdCQUF3QixhQUFhO0FBRXJDLHVCQUFPOztBQUlYLGdCQUFJLGdCQUFnQixDQUFDLGdCQUFnQixVQUFVO0FBQzdDLGtCQUFNLGFBQWEsY0FBYyxnQkFBZ0IsWUFBWTtBQUM3RCxrQkFBTSxhQUFhLGNBQWMsZ0JBQWdCLFlBQVk7QUFFN0Qsa0JBQUksY0FBYyxZQUFZO0FBQzVCLG9CQUFNLGFBQWEsV0FBVztBQUU5Qix5QkFBUyxJQUFJLGFBQWEsR0FBRyxLQUFLLEdBQUcsRUFBRSxHQUFHO0FBQ3hDLDZCQUFXLGFBQ1QsVUFBVSxXQUFXLElBQUksT0FDekIsZUFBZTs7OztBQU12Qix5QkFBYTtBQUNiLG1CQUFPOztBQUlULGNBQUksdUJBQXVCLFdBQVcsQ0FBQyxxQkFBcUIsY0FBYztBQUN4RSx5QkFBYTtBQUNiLG1CQUFPOztBQUdULGNBQ0csYUFBWSxjQUFjLFlBQVksY0FDdkMsV0FBVyx3QkFBd0IsWUFBWSxZQUMvQztBQUNBLHlCQUFhO0FBQ2IsbUJBQU87O0FBSVQsY0FBSSxzQkFBc0IsWUFBWSxhQUFhLEdBQUc7QUFFcEQsc0JBQVUsWUFBWTtBQUN0QixzQkFBVSxjQUFjLFNBQVMsa0JBQWU7QUFDaEQsc0JBQVUsY0FBYyxTQUFTLGFBQVU7QUFDM0MsZ0JBQUksWUFBWSxnQkFBZ0IsU0FBUztBQUN2Qyx3QkFBVSxXQUFVLFNBQVMsRUFBRSxTQUFTLFlBQVk7QUFDcEQsMEJBQVksY0FBYzs7O0FBSzlCLHVCQUFhLHlCQUF5QixhQUFhO0FBRW5ELGlCQUFPOztBQVlULFlBQU0sb0JBQW9CLDRCQUFVLE9BQU8sUUFBUSxPQUFPO0FBRXhELGNBQ0UsZ0JBQ0MsWUFBVyxRQUFRLFdBQVcsV0FDOUIsVUFBUyxhQUFZLFNBQVMsY0FDL0I7QUFDQSxtQkFBTzs7QUFPVCxjQUNFLG1CQUNBLENBQUMsWUFBWSxXQUNiLFdBQVcsY0FBVztBQUN0QjttQkFFUyxtQkFBbUIsV0FBVyxjQUFXO0FBQVM7bUJBR2xELENBQUMsYUFBYSxXQUFXLFlBQVksU0FBUztBQUN2RCxnQkFJRyx3QkFBd0IsVUFDckIseUJBQXdCLHdCQUF3QixVQUNoRCxXQUFXLHdCQUF3QixjQUFjLFVBQ2hELHdCQUF3Qix3QkFBd0IsWUFDL0Msd0JBQXdCLGFBQWEsV0FDdkMseUJBQXdCLDhCQUE4QixVQUN0RCxXQUFXLHdCQUF3QixvQkFBb0IsV0FDdEQsd0JBQXdCLDhCQUE4QixZQUNyRCx3QkFBd0IsbUJBQW1CLFlBR2hELFdBQVcsUUFDVix3QkFBd0Isa0NBQ3RCLHlCQUF3Qix3QkFBd0IsVUFDaEQsV0FBVyx3QkFBd0IsY0FBYyxVQUNoRCx3QkFBd0Isd0JBQXdCLFlBQy9DLHdCQUF3QixhQUFhO0FBQzNDO2lCQUdLO0FBQ0wscUJBQU87O3FCQUdBLG9CQUFvQjtBQUFTO21CQUt0QyxXQUFXLG1CQUFnQixjQUFjLE9BQU8sb0JBQWlCO0FBQ2pFO21CQUtDLFlBQVcsU0FBUyxXQUFXLGdCQUFnQixXQUFXLFdBQzNELFVBQVUsWUFDVixjQUFjLE9BQU8sYUFBYSxLQUNsQyxjQUFjO0FBQ2Q7bUJBTUEsMkJBQ0EsQ0FBQyxXQUFXLHNCQUFtQixjQUFjLE9BQU8sb0JBQWlCO0FBQ3JFO21CQUlTLENBQUM7QUFBTztlQUdaO0FBQ0wsbUJBQU87O0FBR1QsaUJBQU87O0FBU1QsWUFBTSwwQkFBMEIsa0NBQVUsU0FBUztBQUNqRCxpQkFBTyxRQUFRLFFBQVEsT0FBTzs7QUFhaEMsWUFBTSxzQkFBc0IsOEJBQVUsYUFBYTtBQUNqRCxjQUFJLE9BQUE7QUFDSixjQUFJLFFBQUE7QUFDSixjQUFJLFNBQUE7QUFDSixjQUFJLElBQUE7QUFFSix1QkFBYSw0QkFBNEIsYUFBYTtBQU5MLGNBUXpDLGFBQWUsWUFBZjtBQUdSLGNBQUksQ0FBQyxZQUFZO0FBQ2Y7O0FBR0YsY0FBTSxZQUFZO1lBQ2hCLFVBQVU7WUFDVixXQUFXO1lBQ1gsVUFBVTtZQUNWLG1CQUFtQjs7QUFFckIsY0FBSSxXQUFXO0FBR2YsaUJBQU8sS0FBSztBQUNWLG1CQUFPLFdBQVc7QUFEUixnQkFBQSxRQUVxQixNQUF2QixPQUZFLE1BRUYsTUFBTSxlQUZKLE1BRUk7QUFDZCxvQkFBUSxXQUFXLEtBQUs7QUFDeEIscUJBQVMsa0JBQWtCO0FBRzNCLHNCQUFVLFdBQVc7QUFDckIsc0JBQVUsWUFBWTtBQUN0QixzQkFBVSxXQUFXO0FBQ3JCLHNCQUFVLGdCQUFnQjtBQUMxQix5QkFBYSx5QkFBeUIsYUFBYTtBQUNuRCxvQkFBUSxVQUFVO0FBRWxCLGdCQUFJLFVBQVUsZUFBZTtBQUMzQjs7QUFJRiw2QkFBaUIsTUFBTTtBQUd2QixnQkFBSSxDQUFDLFVBQVUsVUFBVTtBQUN2Qjs7QUFJRixnQkFBSSxXQUFXLFFBQVEsUUFBUTtBQUM3QiwrQkFBaUIsTUFBTTtBQUN2Qjs7QUFJRixnQkFBSSxvQkFBb0I7QUFDdEIsc0JBQVEsY0FBYyxPQUFPLGtCQUFlO0FBQzVDLHNCQUFRLGNBQWMsT0FBTyxhQUFVOztBQUl6QyxnQkFBTSxRQUFRLGtCQUFrQixZQUFZO0FBQzVDLGdCQUFJLENBQUMsa0JBQWtCLE9BQU8sUUFBUSxRQUFRO0FBQzVDOztBQUlGLGdCQUFJO0FBQ0Ysa0JBQUksY0FBYztBQUNoQiw0QkFBWSxlQUFlLGNBQWMsTUFBTTtxQkFDMUM7QUFFTCw0QkFBWSxhQUFhLE1BQU07O0FBR2pDLHVCQUFTLFdBQVU7cUJBQ1osR0FBUDs7O0FBSUosdUJBQWEsMkJBQTJCLGFBQWE7O0FBUXZELFlBQU0scUJBQXFCLDZCQUFVLFVBQVU7QUFDN0MsY0FBSSxhQUFBO0FBQ0osY0FBTSxpQkFBaUIsZ0JBQWdCO0FBR3ZDLHVCQUFhLDJCQUEyQixVQUFVO0FBRWxELGlCQUFRLGFBQWEsZUFBZSxZQUFhO0FBRS9DLHlCQUFhLDBCQUEwQixZQUFZO0FBR25ELGdCQUFJLGtCQUFrQixhQUFhO0FBQ2pDOztBQUlGLGdCQUFJLFdBQVcsbUJBQW1CLGtCQUFrQjtBQUNsRCxrQ0FBbUIsV0FBVzs7QUFJaEMsZ0NBQW9COztBQUl0Qix1QkFBYSwwQkFBMEIsVUFBVTs7QUFXbkQsbUJBQVUsV0FBVyxTQUFVLE9BQU8sS0FBSztBQUN6QyxjQUFJLE9BQUE7QUFDSixjQUFJLGVBQUE7QUFDSixjQUFJLGNBQUE7QUFDSixjQUFJLFVBQUE7QUFDSixjQUFJLGFBQUE7QUFJSiwyQkFBaUIsQ0FBQztBQUNsQixjQUFJLGdCQUFnQjtBQUNsQixvQkFBUTs7QUFJVixjQUFJLE9BQU8sVUFBVSxZQUFZLENBQUMsUUFBUSxRQUFRO0FBRWhELGdCQUFJLE9BQU8sTUFBTSxhQUFhLFlBQVk7QUFDeEMsb0JBQU0sZ0JBQWdCO21CQUNqQjtBQUNMLHNCQUFRLE1BQU07QUFDZCxrQkFBSSxPQUFPLFVBQVUsVUFBVTtBQUM3QixzQkFBTSxnQkFBZ0I7Ozs7QUFNNUIsY0FBSSxDQUFDLFdBQVUsYUFBYTtBQUMxQixnQkFDRSxRQUFPLFFBQU8sa0JBQWlCLFlBQy9CLE9BQU8sUUFBTyxpQkFBaUIsWUFDL0I7QUFDQSxrQkFBSSxPQUFPLFVBQVUsVUFBVTtBQUM3Qix1QkFBTyxRQUFPLGFBQWE7O0FBRzdCLGtCQUFJLFFBQVEsUUFBUTtBQUNsQix1QkFBTyxRQUFPLGFBQWEsTUFBTTs7O0FBSXJDLG1CQUFPOztBQUlULGNBQUksQ0FBQyxZQUFZO0FBQ2YseUJBQWE7O0FBSWYscUJBQVUsVUFBVTtBQUdwQixjQUFJLE9BQU8sVUFBVSxVQUFVO0FBQzdCLHVCQUFXOztBQUdiLGNBQUksVUFBVTtBQUVaLGdCQUFJLE1BQU0sVUFBVTtBQUNsQixrQkFBTSxVQUFVLGtCQUFrQixNQUFNO0FBQ3hDLGtCQUFJLENBQUMsYUFBYSxZQUFZLFlBQVksVUFBVTtBQUNsRCxzQkFBTSxnQkFDSjs7O3FCQUlHLGlCQUFpQixNQUFNO0FBR2hDLG1CQUFPLGNBQWM7QUFDckIsMkJBQWUsS0FBSyxjQUFjLFdBQVcsT0FBTztBQUNwRCxnQkFBSSxhQUFhLGFBQWEsS0FBSyxhQUFhLGFBQWEsUUFBUTtBQUVuRSxxQkFBTzt1QkFDRSxhQUFhLGFBQWEsUUFBUTtBQUMzQyxxQkFBTzttQkFDRjtBQUVMLG1CQUFLLFlBQVk7O2lCQUVkO0FBRUwsZ0JBQ0UsQ0FBQyxjQUNELENBQUMsc0JBQ0QsQ0FBQyxrQkFFRCxNQUFNLFFBQVEsU0FBUyxJQUN2QjtBQUNBLHFCQUFPLHNCQUFzQixzQkFDekIsbUJBQW1CLFdBQVcsU0FDOUI7O0FBSU4sbUJBQU8sY0FBYztBQUdyQixnQkFBSSxDQUFDLE1BQU07QUFDVCxxQkFBTyxhQUFhLE9BQU8sc0JBQXNCLFlBQVk7OztBQUtqRSxjQUFJLFFBQVEsWUFBWTtBQUN0Qix5QkFBYSxLQUFLOztBQUlwQixjQUFNLGVBQWUsZ0JBQWdCLFdBQVcsUUFBUTtBQUd4RCxpQkFBUSxjQUFjLGFBQWEsWUFBYTtBQUU5QyxnQkFBSSxZQUFZLGFBQWEsS0FBSyxnQkFBZ0IsU0FBUztBQUN6RDs7QUFJRixnQkFBSSxrQkFBa0IsY0FBYztBQUNsQzs7QUFJRixnQkFBSSxZQUFZLG1CQUFtQixrQkFBa0I7QUFDbkQsaUNBQW1CLFlBQVk7O0FBSWpDLGdDQUFvQjtBQUVwQixzQkFBVTs7QUFHWixvQkFBVTtBQUdWLGNBQUksVUFBVTtBQUNaLG1CQUFPOztBQUlULGNBQUksWUFBWTtBQUNkLGdCQUFJLHFCQUFxQjtBQUN2QiwyQkFBYSx1QkFBdUIsS0FBSyxLQUFLO0FBRTlDLHFCQUFPLEtBQUssWUFBWTtBQUV0QiwyQkFBVyxZQUFZLEtBQUs7O21CQUV6QjtBQUNMLDJCQUFhOztBQUdmLGdCQUFJLGFBQWEsWUFBWTtBQVEzQiwyQkFBYSxXQUFXLEtBQUssa0JBQWtCLFlBQVk7O0FBRzdELG1CQUFPOztBQUdULGNBQUksaUJBQWlCLGlCQUFpQixLQUFLLFlBQVksS0FBSztBQUc1RCxjQUNFLGtCQUNBLGFBQWEsZUFDYixLQUFLLGlCQUNMLEtBQUssY0FBYyxXQUNuQixLQUFLLGNBQWMsUUFBUSxRQUMzQixXQUFXLGNBQTBCLEtBQUssY0FBYyxRQUFRLE9BQ2hFO0FBQ0EsNkJBQ0UsZUFBZSxLQUFLLGNBQWMsUUFBUSxPQUFPLFFBQVE7O0FBSTdELGNBQUksb0JBQW9CO0FBQ3RCLDZCQUFpQixjQUFjLGdCQUFnQixrQkFBZTtBQUM5RCw2QkFBaUIsY0FBYyxnQkFBZ0IsYUFBVTs7QUFHM0QsaUJBQU8sc0JBQXNCLHNCQUN6QixtQkFBbUIsV0FBVyxrQkFDOUI7O0FBU04sbUJBQVUsWUFBWSxTQUFVLEtBQUs7QUFDbkMsdUJBQWE7QUFDYix1QkFBYTs7QUFRZixtQkFBVSxjQUFjLFdBQVk7QUFDbEMsbUJBQVM7QUFDVCx1QkFBYTs7QUFhZixtQkFBVSxtQkFBbUIsU0FBVSxLQUFLLE1BQU0sT0FBTztBQUV2RCxjQUFJLENBQUMsUUFBUTtBQUNYLHlCQUFhOztBQUdmLGNBQU0sUUFBUSxrQkFBa0I7QUFDaEMsY0FBTSxTQUFTLGtCQUFrQjtBQUNqQyxpQkFBTyxrQkFBa0IsT0FBTyxRQUFROztBQVUxQyxtQkFBVSxVQUFVLFNBQVUsWUFBWSxjQUFjO0FBQ3RELGNBQUksT0FBTyxpQkFBaUIsWUFBWTtBQUN0Qzs7QUFHRixnQkFBTSxjQUFjLE1BQU0sZUFBZTtBQUN6QyxvQkFBVSxNQUFNLGFBQWE7O0FBVS9CLG1CQUFVLGFBQWEsU0FBVSxZQUFZO0FBQzNDLGNBQUksTUFBTSxhQUFhO0FBQ3JCLHFCQUFTLE1BQU07OztBQVVuQixtQkFBVSxjQUFjLFNBQVUsWUFBWTtBQUM1QyxjQUFJLE1BQU0sYUFBYTtBQUNyQixrQkFBTSxjQUFjOzs7QUFTeEIsbUJBQVUsaUJBQWlCLFdBQVk7QUFDckMsa0JBQVE7O0FBR1YsZUFBTzs7QUFHVCxVQUFBLFNBQWU7Ozs7Ozs7QUNuZ0RmO0FBQUE7QUFBQTtBQUNBLHNCQUFpRTs7O0FDRTFELDhCQUE4QixLQUFVO0FBQzNDLFNBQVEsSUFBSSxNQUFNLFFBQWdCO0FBQUE7OztBQ1UvQixJQUFNLG1CQUE0QztBQUFBLEVBQ3JELFFBQVE7QUFBQSxFQUNSLFdBQVcsQ0FBQztBQUFBLElBQ1IsV0FBVztBQUFBLElBQ1gsTUFBTTtBQUFBLElBQ04sT0FBTztBQUFBO0FBQUEsRUFFWCxvQkFBb0I7QUFBQSxFQUNwQixzQkFBc0IsQ0FBQztBQUFBLEVBQ3ZCLFdBQVc7QUFBQTs7O0FGbkJmLGdCQUEyQjtBQUUzQixvQ0FBNkMsdUJBQU87QUFBQSxFQUc3QyxTQUFTO0FBQUE7QUFDZCxZQUFNLEtBQUs7QUFFWCxXQUFLLGNBQWMsSUFBSSxvQkFBb0IsS0FBSyxLQUFLO0FBRXJELFdBQUssV0FBVztBQUFBLFFBQ2YsSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sVUFBVSxNQUFNO0FBRWYsZUFBSyxJQUFJLFFBQVE7QUFFakIsZUFBSyxJQUFJLFFBQVEsWUFBWTtBQUFBO0FBQUE7QUFJL0IsV0FBSyw4QkFBOEIsQ0FBQyxTQUFTLFlBQVk7QUFDeEQsaUJBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxTQUFTLHFCQUFxQixRQUFRLEtBQUs7QUFFbkUsZ0JBQU0sV0FBVyxLQUFLLFNBQVMsVUFBVSxLQUFLLFNBQVMscUJBQXFCO0FBTTVFLGNBQUksZUFBZSxBQUFVLG1CQUFTLFNBQVM7QUFDL0Msa0JBQVEsWUFBWSxRQUFRLFVBQVUsV0FBVyxTQUFTLE1BQU07QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUW5FLFdBQVc7QUFBQTtBQUFBLEVBSUwsZUFBZTtBQUFBO0FBQ3BCLFdBQUssV0FBVyxPQUFPLE9BQU8sSUFBSSxrQkFBa0IsTUFBTSxLQUFLO0FBQUE7QUFBQTtBQUFBLEVBRzFELGVBQWU7QUFBQTtBQUNwQixZQUFNLEtBQUssU0FBUyxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBSTNCLHdDQUFrQyxpQ0FBaUI7QUFBQSxFQUlsRCxZQUFZLEtBQVUsUUFBeUI7QUFDOUMsVUFBTSxLQUFLO0FBSFosNEJBQW1CLDhCQUFTLE1BQU07QUFBRSxXQUFLO0FBQVcsZUFBUyxlQUFlLDRCQUE0QjtBQUFBLE9BQVksS0FBSztBQUl4SCxTQUFLLFNBQVM7QUFBQTtBQUFBLEVBR2YsVUFBZ0I7QUFDZixVQUFNLEVBQUUsZ0JBQWdCO0FBRXhCLGdCQUFZO0FBRVosUUFBSSxVQUFVLEtBQUssT0FBTyxTQUFTLHFCQUFxQixvQkFBb0I7QUFFNUUsUUFBSSx3QkFBUSxhQUNWLFNBQVMsc0JBQ1QsUUFBUSxhQUNSLFFBQVEsVUFBUSxLQUNmLGVBQWUsMkJBQ2YsU0FBUyxLQUFLLE9BQU8sU0FBUyxRQUM5QixTQUFTLENBQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxTQUFTO0FBQzlCLFlBQU0sS0FBSyxPQUFPO0FBQ2xCLFdBQUs7QUFBQSxRQUNILFFBQVEsS0FBSyw0QkFDaEIsVUFBVSxTQUFPLElBQ2hCLFdBQVcsZ0NBQ1gsUUFBUSxRQUNSLFFBQVEsTUFBTTtBQUNkLGFBQU8sS0FBSyxrREFBa0Q7QUFBQSxRQUcvRCxVQUFVLFNBQU8sSUFDaEIsV0FBVywyQkFDWCxRQUFRLFNBQ1IsUUFBUSxNQUFNO0FBQ2QsZ0JBQVUsVUFBVSxVQUFVLHFCQUFxQixLQUFLO0FBQUEsUUFHekQsVUFBVSxTQUFPLElBQ2hCLFdBQVcseUZBQ1gsUUFBUSxTQUNSLFFBQVEsTUFBTTtBQUNkLFdBQUssT0FBTyxTQUFTLHFCQUFxQixDQUFDLEtBQUssT0FBTyxTQUFTO0FBQ2hFLFdBQUs7QUFBQSxRQUdOLFVBQVUsU0FBTyxJQUNoQixXQUFXLHNCQUNYLFFBQVEsZ0JBQ1IsUUFBUSxNQUFNO0FBQ2QsV0FBSyxPQUFPLFNBQVMsVUFBVSxLQUFLO0FBQUEsUUFDbkMsV0FBVztBQUFBLFFBQ1gsTUFBTTtBQUFBLFFBQ04sT0FBTztBQUFBO0FBRVIsV0FBSztBQUFBO0FBSVIsYUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLE9BQU8sU0FBUyxVQUFVLFFBQVEsS0FBSztBQUMvRCxZQUFNLFdBQVcsS0FBSyxPQUFPLFNBQVMsVUFBVTtBQUVoRCxVQUFJLEtBQUssT0FBTyxTQUFTLFVBQVUsQ0FBQyxTQUFTLEtBQUssY0FBYyxTQUFTLEtBQUssT0FBTyxTQUFTLE9BQU8sZ0JBQWdCO0FBQ3BIO0FBQUE7QUFHRCxVQUFJLEtBQUssT0FBTyxTQUFTLHNCQUFzQixDQUFDLEtBQUssT0FBTyxTQUFTLHFCQUFxQixTQUFTLElBQUk7QUFDdEc7QUFBQTtBQUdELFVBQUksd0JBQVEsYUFDVixTQUFTLG9CQUNULFFBQVEsWUFDUixRQUFRLFVBQVEsS0FDZixlQUFlLGNBQ2YsU0FBUyxLQUFLLE9BQU8sU0FBUyxVQUFVLEdBQUcsV0FDM0MsU0FBUyxDQUFPLFVBQVU7QUFDMUIsYUFBSyxPQUFPLFNBQVMsVUFBVSxHQUFHLFlBQVk7QUFDOUMsYUFBSztBQUNMLGNBQU0sS0FBSyxPQUFPO0FBQUEsV0FFbkIsUUFBUSxVQUFRLEtBQ2YsZUFBZSxRQUNmLFNBQVMsS0FBSyxPQUFPLFNBQVMsVUFBVSxHQUFHLE1BQzNDLFNBQVMsQ0FBTyxVQUFVO0FBQzFCLGFBQUssT0FBTyxTQUFTLFVBQVUsR0FBRyxPQUFPO0FBQ3pDLGFBQUs7QUFDTCxjQUFNLEtBQUssT0FBTztBQUFBLFdBRW5CLFFBQVEsVUFBUSxLQUNmLGVBQWUsU0FDZixTQUFTLEtBQUssT0FBTyxTQUFTLFVBQVUsR0FBRyxPQUMzQyxTQUFTLENBQU8sVUFBVTtBQUMxQixhQUFLLE9BQU8sU0FBUyxVQUFVLEdBQUcsUUFBUTtBQUMxQyxjQUFNLEtBQUssT0FBTztBQUFBLFdBRW5CLGVBQWUsU0FBTyxJQUNyQixRQUFRLGdCQUNSLFdBQVcsd0JBQ1gsUUFBUSxNQUFNO0FBQ2QsYUFBSyxPQUFPLFNBQVMsVUFBVSxPQUFPLEdBQUc7QUFDekMsYUFBSztBQUNMLGFBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1WLHVCQUE2QjtBQUM1QixRQUFJLGdCQUEyQztBQUMvQyxhQUFTLElBQUksR0FBRyxJQUFJLEtBQUssT0FBTyxTQUFTLFVBQVUsUUFBUSxLQUFLO0FBQy9ELFVBQUksSUFBSSxLQUFLLE9BQU8sU0FBUyxVQUFVO0FBRXZDLFVBQUksRUFBRSxRQUFRLEVBQUUsV0FBVztBQUMxQixZQUFJLGNBQWMsRUFBRSxTQUFTLFFBQVc7QUFDdkMsY0FBSSxFQUFFLGFBQWEsT0FBTyxFQUFFLGFBQWEscUJBQXFCLEtBQUssTUFBTTtBQUN4RSwwQkFBYyxFQUFFLFFBQVE7QUFBQTtBQUFBLGVBRW5CO0FBRU4sY0FBSSxhQUFhLEtBQUssT0FBTyxTQUFTLFVBQVUsY0FBYyxFQUFFO0FBQ2hFLGNBQUksV0FBVyxhQUFhLE9BQU8sRUFBRSxhQUFhLHFCQUFxQixLQUFLLE1BQU07QUFDakYsMEJBQWMsRUFBRSxRQUFRO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNNUIsU0FBSyxPQUFPLFNBQVMsdUJBQXVCLE9BQU8sT0FBTztBQUUxRCxRQUFJLFlBQVk7QUFDaEIsYUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLE9BQU8sU0FBUyxxQkFBcUIsUUFBUSxLQUFLO0FBRTFFLFlBQU0sV0FBVyxLQUFLLE9BQU8sU0FBUyxxQkFBcUI7QUFDM0QsWUFBTSxXQUFXLEtBQUssT0FBTyxTQUFTLFVBQVU7QUFDaEQsVUFBSSxTQUFTLFFBQVEsWUFBWSxTQUFTLFNBQVMsUUFBUTtBQUMxRCxvQkFBWTtBQUFBO0FBQUE7QUFJZCxTQUFLLE9BQU8sU0FBUyxZQUFZO0FBQUE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
